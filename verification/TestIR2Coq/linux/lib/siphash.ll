; ModuleID = 'lib/siphash.c'
source_filename = "lib/siphash.c"
target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
target triple = "aarch64-unknown-linux-gnu"

%struct.siphash_key_t = type { [2 x i64] }
%struct.hsiphash_key_t = type { [2 x i64] }

; Function Attrs: nofree noinline nounwind null_pointer_is_valid readonly
define dso_local i64 @__siphash_aligned(i8* noundef %data, i64 noundef %len, %struct.siphash_key_t* nocapture noundef readonly %key) local_unnamed_addr #0 {
entry:
  %add.ptr = getelementptr i8, i8* %data, i64 %len
  %rem = and i64 %len, 7
  %idx.neg = sub nsw i64 0, %rem
  %add.ptr1 = getelementptr i8, i8* %add.ptr, i64 %idx.neg
  %0 = trunc i64 %len to i8
  %conv = and i8 %0, 7
  %shl = shl i64 %len, 56
  %arrayidx = getelementptr %struct.siphash_key_t, %struct.siphash_key_t* %key, i64 0, i32 0, i64 1
  %1 = load i64, i64* %arrayidx, align 8
  %xor = xor i64 %1, 8387220255154660723
  %arrayidx4 = getelementptr inbounds %struct.siphash_key_t, %struct.siphash_key_t* %key, i64 0, i32 0, i64 0
  %2 = load i64, i64* %arrayidx4, align 8
  %xor5 = xor i64 %2, 7816392313619706465
  %xor8 = xor i64 %1, 7237128888997146477
  %xor11 = xor i64 %2, 8317987319222330741
  %cmp.not364 = icmp eq i8* %add.ptr1, %data
  br i1 %cmp.not364, label %for.end, label %for.body

for.body:                                         ; preds = %entry, %for.body
  %v3.0369 = phi i64 [ %xor37, %for.body ], [ %xor, %entry ]
  %v2.0368 = phi i64 [ %call41, %for.body ], [ %xor5, %entry ]
  %v1.0367 = phi i64 [ %xor40, %for.body ], [ %xor8, %entry ]
  %v0.0366 = phi i64 [ %xor44, %for.body ], [ %xor11, %entry ]
  %data.addr.0365 = phi i8* [ %add.ptr45, %for.body ], [ %data, %entry ]
  %3 = bitcast i8* %data.addr.0365 to i64*
  %4 = load i64, i64* %3, align 8
  %xor13 = xor i64 %4, %v3.0369
  %add = add i64 %v1.0367, %v0.0366
  %call14 = call fastcc i64 @rol64(i64 noundef %v1.0367, i32 noundef 13) #4
  %xor15 = xor i64 %call14, %add
  %call16 = call fastcc i64 @rol64(i64 noundef %add, i32 noundef 32) #4
  %add17 = add i64 %xor13, %v2.0368
  %call18 = call fastcc i64 @rol64(i64 noundef %xor13, i32 noundef 16) #4
  %xor19 = xor i64 %call18, %add17
  %add20 = add i64 %xor19, %call16
  %call21 = call fastcc i64 @rol64(i64 noundef %xor19, i32 noundef 21) #4
  %xor22 = xor i64 %add20, %call21
  %add23 = add i64 %add17, %xor15
  %call24 = call fastcc i64 @rol64(i64 noundef %xor15, i32 noundef 17) #4
  %xor25 = xor i64 %call24, %add23
  %call26 = call fastcc i64 @rol64(i64 noundef %add23, i32 noundef 32) #4
  %add28 = add i64 %xor25, %add20
  %call29 = call fastcc i64 @rol64(i64 noundef %xor25, i32 noundef 13) #4
  %xor30 = xor i64 %call29, %add28
  %call31 = call fastcc i64 @rol64(i64 noundef %add28, i32 noundef 32) #4
  %add32 = add i64 %call26, %xor22
  %call33 = call fastcc i64 @rol64(i64 noundef %xor22, i32 noundef 16) #4
  %xor34 = xor i64 %call33, %add32
  %add35 = add i64 %xor34, %call31
  %call36 = call fastcc i64 @rol64(i64 noundef %xor34, i32 noundef 21) #4
  %xor37 = xor i64 %add35, %call36
  %add38 = add i64 %xor30, %add32
  %call39 = call fastcc i64 @rol64(i64 noundef %xor30, i32 noundef 17) #4
  %xor40 = xor i64 %call39, %add38
  %call41 = call fastcc i64 @rol64(i64 noundef %add38, i32 noundef 32) #4
  %xor44 = xor i64 %add35, %4
  %add.ptr45 = getelementptr i8, i8* %data.addr.0365, i64 8
  %cmp.not = icmp eq i8* %add.ptr45, %add.ptr1
  br i1 %cmp.not, label %for.end, label %for.body

for.end:                                          ; preds = %for.body, %entry
  %data.addr.0.lcssa = phi i8* [ %data, %entry ], [ %add.ptr1, %for.body ]
  %v0.0.lcssa = phi i64 [ %xor11, %entry ], [ %xor44, %for.body ]
  %v1.0.lcssa = phi i64 [ %xor8, %entry ], [ %xor40, %for.body ]
  %v2.0.lcssa = phi i64 [ %xor5, %entry ], [ %call41, %for.body ]
  %v3.0.lcssa = phi i64 [ %xor, %entry ], [ %xor37, %for.body ]
  %tobool.not = icmp eq i8 %conv, 0
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %for.end
  %call46 = call fastcc i64 @load_unaligned_zeropad(i8* noundef %data.addr.0.lcssa) #4
  %5 = shl nuw nsw i8 %conv, 3
  %sh_prom = zext i8 %5 to i64
  %shl48 = shl nsw i64 -1, %sh_prom
  %neg = xor i64 %shl48, -1
  %and49 = and i64 %call46, %neg
  %or = or i64 %and49, %shl
  br label %if.end

if.end:                                           ; preds = %if.then, %for.end
  %b.0 = phi i64 [ %or, %if.then ], [ %shl, %for.end ]
  %xor50 = xor i64 %b.0, %v3.0.lcssa
  %add52 = add i64 %v1.0.lcssa, %v0.0.lcssa
  %call53 = call fastcc i64 @rol64(i64 noundef %v1.0.lcssa, i32 noundef 13) #4
  %xor54 = xor i64 %call53, %add52
  %call55 = call fastcc i64 @rol64(i64 noundef %add52, i32 noundef 32) #4
  %add56 = add i64 %xor50, %v2.0.lcssa
  %call57 = call fastcc i64 @rol64(i64 noundef %xor50, i32 noundef 16) #4
  %xor58 = xor i64 %call57, %add56
  %add59 = add i64 %xor58, %call55
  %call60 = call fastcc i64 @rol64(i64 noundef %xor58, i32 noundef 21) #4
  %xor61 = xor i64 %add59, %call60
  %add62 = add i64 %add56, %xor54
  %call63 = call fastcc i64 @rol64(i64 noundef %xor54, i32 noundef 17) #4
  %xor64 = xor i64 %call63, %add62
  %call65 = call fastcc i64 @rol64(i64 noundef %add62, i32 noundef 32) #4
  %add69 = add i64 %xor64, %add59
  %call70 = call fastcc i64 @rol64(i64 noundef %xor64, i32 noundef 13) #4
  %xor71 = xor i64 %call70, %add69
  %call72 = call fastcc i64 @rol64(i64 noundef %add69, i32 noundef 32) #4
  %add73 = add i64 %call65, %xor61
  %call74 = call fastcc i64 @rol64(i64 noundef %xor61, i32 noundef 16) #4
  %xor75 = xor i64 %call74, %add73
  %add76 = add i64 %xor75, %call72
  %call77 = call fastcc i64 @rol64(i64 noundef %xor75, i32 noundef 21) #4
  %xor78 = xor i64 %add76, %call77
  %add79 = add i64 %xor71, %add73
  %call80 = call fastcc i64 @rol64(i64 noundef %xor71, i32 noundef 17) #4
  %xor81 = xor i64 %call80, %add79
  %call82 = call fastcc i64 @rol64(i64 noundef %add79, i32 noundef 32) #4
  %xor85 = xor i64 %add76, %b.0
  %xor86 = xor i64 %call82, 255
  %add88 = add i64 %xor85, %xor81
  %call89 = call fastcc i64 @rol64(i64 noundef %xor81, i32 noundef 13) #4
  %xor90 = xor i64 %call89, %add88
  %call91 = call fastcc i64 @rol64(i64 noundef %add88, i32 noundef 32) #4
  %add92 = add i64 %xor86, %xor78
  %call93 = call fastcc i64 @rol64(i64 noundef %xor78, i32 noundef 16) #4
  %xor94 = xor i64 %call93, %add92
  %add95 = add i64 %xor94, %call91
  %call96 = call fastcc i64 @rol64(i64 noundef %xor94, i32 noundef 21) #4
  %xor97 = xor i64 %add95, %call96
  %add98 = add i64 %add92, %xor90
  %call99 = call fastcc i64 @rol64(i64 noundef %xor90, i32 noundef 17) #4
  %xor100 = xor i64 %call99, %add98
  %call101 = call fastcc i64 @rol64(i64 noundef %add98, i32 noundef 32) #4
  %add105 = add i64 %xor100, %add95
  %call106 = call fastcc i64 @rol64(i64 noundef %xor100, i32 noundef 13) #4
  %xor107 = xor i64 %call106, %add105
  %call108 = call fastcc i64 @rol64(i64 noundef %add105, i32 noundef 32) #4
  %add109 = add i64 %call101, %xor97
  %call110 = call fastcc i64 @rol64(i64 noundef %xor97, i32 noundef 16) #4
  %xor111 = xor i64 %call110, %add109
  %add112 = add i64 %xor111, %call108
  %call113 = call fastcc i64 @rol64(i64 noundef %xor111, i32 noundef 21) #4
  %xor114 = xor i64 %add112, %call113
  %add115 = add i64 %xor107, %add109
  %call116 = call fastcc i64 @rol64(i64 noundef %xor107, i32 noundef 17) #4
  %xor117 = xor i64 %call116, %add115
  %call118 = call fastcc i64 @rol64(i64 noundef %add115, i32 noundef 32) #4
  %add122 = add i64 %xor117, %add112
  %call123 = call fastcc i64 @rol64(i64 noundef %xor117, i32 noundef 13) #4
  %xor124 = xor i64 %call123, %add122
  %call125 = call fastcc i64 @rol64(i64 noundef %add122, i32 noundef 32) #4
  %add126 = add i64 %call118, %xor114
  %call127 = call fastcc i64 @rol64(i64 noundef %xor114, i32 noundef 16) #4
  %xor128 = xor i64 %call127, %add126
  %add129 = add i64 %xor128, %call125
  %call130 = call fastcc i64 @rol64(i64 noundef %xor128, i32 noundef 21) #4
  %xor131 = xor i64 %add129, %call130
  %add132 = add i64 %xor124, %add126
  %call133 = call fastcc i64 @rol64(i64 noundef %xor124, i32 noundef 17) #4
  %xor134 = xor i64 %call133, %add132
  %call135 = call fastcc i64 @rol64(i64 noundef %add132, i32 noundef 32) #4
  %add139 = add i64 %xor134, %add129
  %call140 = call fastcc i64 @rol64(i64 noundef %xor134, i32 noundef 13) #4
  %xor141 = xor i64 %call140, %add139
  %add143 = add i64 %call135, %xor131
  %call144 = call fastcc i64 @rol64(i64 noundef %xor131, i32 noundef 16) #4
  %xor145 = xor i64 %call144, %add143
  %call147 = call fastcc i64 @rol64(i64 noundef %xor145, i32 noundef 21) #4
  %add149 = add i64 %xor141, %add143
  %call150 = call fastcc i64 @rol64(i64 noundef %xor141, i32 noundef 17) #4
  %call152 = call fastcc i64 @rol64(i64 noundef %add149, i32 noundef 32) #4
  %xor151 = xor i64 %call147, %add149
  %xor155 = xor i64 %xor151, %call150
  %xor157 = xor i64 %xor155, %call152
  ret i64 %xor157
}

; Function Attrs: mustprogress nofree noinline nosync nounwind null_pointer_is_valid readnone willreturn
define internal fastcc i64 @rol64(i64 noundef %word, i32 noundef %shift) unnamed_addr #1 {
entry:
  %sh_prom = zext i32 %shift to i64
  %or = call i64 @llvm.fshl.i64(i64 %word, i64 %word, i64 %sh_prom)
  ret i64 %or
}

; Function Attrs: nofree noinline nounwind null_pointer_is_valid readonly
define internal fastcc i64 @load_unaligned_zeropad(i8* noundef %addr) unnamed_addr #0 {
entry:
  %0 = bitcast i8* %addr to i64*
  %1 = call { i64, i64 } asm "1:\09ldr\09$0, $3\0A2:\0A\09.pushsection .fixup,\22ax\22\0A\09.align 2\0A3:\09bic\09$1, $2, #0x7\0A\09ldr\09$0, [$1]\0A\09and\09$1, $2, #0x7\0A\09lsl\09$1, $1, #0x3\0A\09lsr\09$0, $0, $1\0A\09b\092b\0A\09.popsection\0A\09.pushsection\09__ex_table, \22a\22\0A\09.align\09\093\0A\09.long\09\09(1b - .), (3b - .)\0A\09.popsection\0A", "=&r,=&r,r,*Q"(i8* %addr, i64* elementtype(i64) %0) #5, !srcloc !7
  %asmresult = extractvalue { i64, i64 } %1, 0
  ret i64 %asmresult
}

; Function Attrs: mustprogress nofree noinline nosync nounwind null_pointer_is_valid readonly willreturn
define dso_local i64 @siphash_1u64(i64 noundef %first, %struct.siphash_key_t* nocapture noundef readonly %key) local_unnamed_addr #2 {
entry:
  %arrayidx = getelementptr %struct.siphash_key_t, %struct.siphash_key_t* %key, i64 0, i32 0, i64 1
  %0 = load i64, i64* %arrayidx, align 8
  %arrayidx3 = getelementptr inbounds %struct.siphash_key_t, %struct.siphash_key_t* %key, i64 0, i32 0, i64 0
  %1 = load i64, i64* %arrayidx3, align 8
  %xor4 = xor i64 %1, 7816392313619706465
  %xor7 = xor i64 %0, 7237128888997146477
  %xor10 = xor i64 %1, 8317987319222330741
  %2 = xor i64 %0, %first
  %xor11 = xor i64 %2, 8387220255154660723
  %add = add i64 %xor10, %xor7
  %call = call fastcc i64 @rol64(i64 noundef %xor7, i32 noundef 13) #4
  %xor12 = xor i64 %add, %call
  %call13 = call fastcc i64 @rol64(i64 noundef %add, i32 noundef 32) #4
  %add14 = add i64 %xor4, %xor11
  %call15 = call fastcc i64 @rol64(i64 noundef %xor11, i32 noundef 16) #4
  %xor16 = xor i64 %call15, %add14
  %add17 = add i64 %xor16, %call13
  %call18 = call fastcc i64 @rol64(i64 noundef %xor16, i32 noundef 21) #4
  %xor19 = xor i64 %add17, %call18
  %add20 = add i64 %xor12, %add14
  %call21 = call fastcc i64 @rol64(i64 noundef %xor12, i32 noundef 17) #4
  %xor22 = xor i64 %call21, %add20
  %call23 = call fastcc i64 @rol64(i64 noundef %add20, i32 noundef 32) #4
  %add25 = add i64 %xor22, %add17
  %call26 = call fastcc i64 @rol64(i64 noundef %xor22, i32 noundef 13) #4
  %xor27 = xor i64 %call26, %add25
  %call28 = call fastcc i64 @rol64(i64 noundef %add25, i32 noundef 32) #4
  %add29 = add i64 %call23, %xor19
  %call30 = call fastcc i64 @rol64(i64 noundef %xor19, i32 noundef 16) #4
  %xor31 = xor i64 %call30, %add29
  %add32 = add i64 %xor31, %call28
  %call33 = call fastcc i64 @rol64(i64 noundef %xor31, i32 noundef 21) #4
  %add35 = add i64 %xor27, %add29
  %call36 = call fastcc i64 @rol64(i64 noundef %xor27, i32 noundef 17) #4
  %xor37 = xor i64 %call36, %add35
  %call38 = call fastcc i64 @rol64(i64 noundef %add35, i32 noundef 32) #4
  %xor41 = xor i64 %add32, %first
  %3 = xor i64 %call33, %add32
  %xor42 = xor i64 %3, 576460752303423488
  %add44 = add i64 %xor41, %xor37
  %call45 = call fastcc i64 @rol64(i64 noundef %xor37, i32 noundef 13) #4
  %xor46 = xor i64 %call45, %add44
  %call47 = call fastcc i64 @rol64(i64 noundef %add44, i32 noundef 32) #4
  %add48 = add i64 %call38, %xor42
  %call49 = call fastcc i64 @rol64(i64 noundef %xor42, i32 noundef 16) #4
  %xor50 = xor i64 %call49, %add48
  %add51 = add i64 %xor50, %call47
  %call52 = call fastcc i64 @rol64(i64 noundef %xor50, i32 noundef 21) #4
  %xor53 = xor i64 %add51, %call52
  %add54 = add i64 %xor46, %add48
  %call55 = call fastcc i64 @rol64(i64 noundef %xor46, i32 noundef 17) #4
  %xor56 = xor i64 %call55, %add54
  %call57 = call fastcc i64 @rol64(i64 noundef %add54, i32 noundef 32) #4
  %add61 = add i64 %xor56, %add51
  %call62 = call fastcc i64 @rol64(i64 noundef %xor56, i32 noundef 13) #4
  %xor63 = xor i64 %call62, %add61
  %call64 = call fastcc i64 @rol64(i64 noundef %add61, i32 noundef 32) #4
  %add65 = add i64 %call57, %xor53
  %call66 = call fastcc i64 @rol64(i64 noundef %xor53, i32 noundef 16) #4
  %xor67 = xor i64 %call66, %add65
  %add68 = add i64 %xor67, %call64
  %call69 = call fastcc i64 @rol64(i64 noundef %xor67, i32 noundef 21) #4
  %xor70 = xor i64 %add68, %call69
  %add71 = add i64 %xor63, %add65
  %call72 = call fastcc i64 @rol64(i64 noundef %xor63, i32 noundef 17) #4
  %xor73 = xor i64 %call72, %add71
  %call74 = call fastcc i64 @rol64(i64 noundef %add71, i32 noundef 32) #4
  %xor77 = xor i64 %add68, 576460752303423488
  %xor78 = xor i64 %call74, 255
  %add80 = add i64 %xor77, %xor73
  %call81 = call fastcc i64 @rol64(i64 noundef %xor73, i32 noundef 13) #4
  %xor82 = xor i64 %call81, %add80
  %call83 = call fastcc i64 @rol64(i64 noundef %add80, i32 noundef 32) #4
  %add84 = add i64 %xor78, %xor70
  %call85 = call fastcc i64 @rol64(i64 noundef %xor70, i32 noundef 16) #4
  %xor86 = xor i64 %call85, %add84
  %add87 = add i64 %xor86, %call83
  %call88 = call fastcc i64 @rol64(i64 noundef %xor86, i32 noundef 21) #4
  %xor89 = xor i64 %add87, %call88
  %add90 = add i64 %add84, %xor82
  %call91 = call fastcc i64 @rol64(i64 noundef %xor82, i32 noundef 17) #4
  %xor92 = xor i64 %call91, %add90
  %call93 = call fastcc i64 @rol64(i64 noundef %add90, i32 noundef 32) #4
  %add97 = add i64 %xor92, %add87
  %call98 = call fastcc i64 @rol64(i64 noundef %xor92, i32 noundef 13) #4
  %xor99 = xor i64 %call98, %add97
  %call100 = call fastcc i64 @rol64(i64 noundef %add97, i32 noundef 32) #4
  %add101 = add i64 %call93, %xor89
  %call102 = call fastcc i64 @rol64(i64 noundef %xor89, i32 noundef 16) #4
  %xor103 = xor i64 %call102, %add101
  %add104 = add i64 %xor103, %call100
  %call105 = call fastcc i64 @rol64(i64 noundef %xor103, i32 noundef 21) #4
  %xor106 = xor i64 %add104, %call105
  %add107 = add i64 %xor99, %add101
  %call108 = call fastcc i64 @rol64(i64 noundef %xor99, i32 noundef 17) #4
  %xor109 = xor i64 %call108, %add107
  %call110 = call fastcc i64 @rol64(i64 noundef %add107, i32 noundef 32) #4
  %add114 = add i64 %xor109, %add104
  %call115 = call fastcc i64 @rol64(i64 noundef %xor109, i32 noundef 13) #4
  %xor116 = xor i64 %call115, %add114
  %call117 = call fastcc i64 @rol64(i64 noundef %add114, i32 noundef 32) #4
  %add118 = add i64 %call110, %xor106
  %call119 = call fastcc i64 @rol64(i64 noundef %xor106, i32 noundef 16) #4
  %xor120 = xor i64 %call119, %add118
  %add121 = add i64 %xor120, %call117
  %call122 = call fastcc i64 @rol64(i64 noundef %xor120, i32 noundef 21) #4
  %xor123 = xor i64 %add121, %call122
  %add124 = add i64 %xor116, %add118
  %call125 = call fastcc i64 @rol64(i64 noundef %xor116, i32 noundef 17) #4
  %xor126 = xor i64 %call125, %add124
  %call127 = call fastcc i64 @rol64(i64 noundef %add124, i32 noundef 32) #4
  %add131 = add i64 %xor126, %add121
  %call132 = call fastcc i64 @rol64(i64 noundef %xor126, i32 noundef 13) #4
  %xor133 = xor i64 %call132, %add131
  %add135 = add i64 %call127, %xor123
  %call136 = call fastcc i64 @rol64(i64 noundef %xor123, i32 noundef 16) #4
  %xor137 = xor i64 %call136, %add135
  %call139 = call fastcc i64 @rol64(i64 noundef %xor137, i32 noundef 21) #4
  %add141 = add i64 %xor133, %add135
  %call142 = call fastcc i64 @rol64(i64 noundef %xor133, i32 noundef 17) #4
  %call144 = call fastcc i64 @rol64(i64 noundef %add141, i32 noundef 32) #4
  %xor143 = xor i64 %call139, %add141
  %xor147 = xor i64 %xor143, %call142
  %xor149 = xor i64 %xor147, %call144
  ret i64 %xor149
}

; Function Attrs: mustprogress nofree noinline nosync nounwind null_pointer_is_valid readonly willreturn
define dso_local i64 @siphash_2u64(i64 noundef %first, i64 noundef %second, %struct.siphash_key_t* nocapture noundef readonly %key) local_unnamed_addr #2 {
entry:
  %arrayidx = getelementptr %struct.siphash_key_t, %struct.siphash_key_t* %key, i64 0, i32 0, i64 1
  %0 = load i64, i64* %arrayidx, align 8
  %arrayidx3 = getelementptr inbounds %struct.siphash_key_t, %struct.siphash_key_t* %key, i64 0, i32 0, i64 0
  %1 = load i64, i64* %arrayidx3, align 8
  %xor4 = xor i64 %1, 7816392313619706465
  %xor7 = xor i64 %0, 7237128888997146477
  %xor10 = xor i64 %1, 8317987319222330741
  %2 = xor i64 %0, %first
  %xor11 = xor i64 %2, 8387220255154660723
  %add = add i64 %xor10, %xor7
  %call = call fastcc i64 @rol64(i64 noundef %xor7, i32 noundef 13) #4
  %xor12 = xor i64 %add, %call
  %call13 = call fastcc i64 @rol64(i64 noundef %add, i32 noundef 32) #4
  %add14 = add i64 %xor4, %xor11
  %call15 = call fastcc i64 @rol64(i64 noundef %xor11, i32 noundef 16) #4
  %xor16 = xor i64 %call15, %add14
  %add17 = add i64 %xor16, %call13
  %call18 = call fastcc i64 @rol64(i64 noundef %xor16, i32 noundef 21) #4
  %xor19 = xor i64 %add17, %call18
  %add20 = add i64 %xor12, %add14
  %call21 = call fastcc i64 @rol64(i64 noundef %xor12, i32 noundef 17) #4
  %xor22 = xor i64 %call21, %add20
  %call23 = call fastcc i64 @rol64(i64 noundef %add20, i32 noundef 32) #4
  %add25 = add i64 %xor22, %add17
  %call26 = call fastcc i64 @rol64(i64 noundef %xor22, i32 noundef 13) #4
  %xor27 = xor i64 %call26, %add25
  %call28 = call fastcc i64 @rol64(i64 noundef %add25, i32 noundef 32) #4
  %add29 = add i64 %call23, %xor19
  %call30 = call fastcc i64 @rol64(i64 noundef %xor19, i32 noundef 16) #4
  %xor31 = xor i64 %call30, %add29
  %add32 = add i64 %xor31, %call28
  %call33 = call fastcc i64 @rol64(i64 noundef %xor31, i32 noundef 21) #4
  %add35 = add i64 %xor27, %add29
  %call36 = call fastcc i64 @rol64(i64 noundef %xor27, i32 noundef 17) #4
  %xor37 = xor i64 %call36, %add35
  %call38 = call fastcc i64 @rol64(i64 noundef %add35, i32 noundef 32) #4
  %xor41 = xor i64 %add32, %first
  %xor34 = xor i64 %call33, %second
  %xor42 = xor i64 %xor34, %add32
  %add44 = add i64 %xor41, %xor37
  %call45 = call fastcc i64 @rol64(i64 noundef %xor37, i32 noundef 13) #4
  %xor46 = xor i64 %call45, %add44
  %call47 = call fastcc i64 @rol64(i64 noundef %add44, i32 noundef 32) #4
  %add48 = add i64 %xor42, %call38
  %call49 = call fastcc i64 @rol64(i64 noundef %xor42, i32 noundef 16) #4
  %xor50 = xor i64 %call49, %add48
  %add51 = add i64 %xor50, %call47
  %call52 = call fastcc i64 @rol64(i64 noundef %xor50, i32 noundef 21) #4
  %xor53 = xor i64 %add51, %call52
  %add54 = add i64 %add48, %xor46
  %call55 = call fastcc i64 @rol64(i64 noundef %xor46, i32 noundef 17) #4
  %xor56 = xor i64 %call55, %add54
  %call57 = call fastcc i64 @rol64(i64 noundef %add54, i32 noundef 32) #4
  %add61 = add i64 %xor56, %add51
  %call62 = call fastcc i64 @rol64(i64 noundef %xor56, i32 noundef 13) #4
  %xor63 = xor i64 %call62, %add61
  %call64 = call fastcc i64 @rol64(i64 noundef %add61, i32 noundef 32) #4
  %add65 = add i64 %call57, %xor53
  %call66 = call fastcc i64 @rol64(i64 noundef %xor53, i32 noundef 16) #4
  %xor67 = xor i64 %call66, %add65
  %add68 = add i64 %xor67, %call64
  %call69 = call fastcc i64 @rol64(i64 noundef %xor67, i32 noundef 21) #4
  %add71 = add i64 %xor63, %add65
  %call72 = call fastcc i64 @rol64(i64 noundef %xor63, i32 noundef 17) #4
  %xor73 = xor i64 %call72, %add71
  %call74 = call fastcc i64 @rol64(i64 noundef %add71, i32 noundef 32) #4
  %xor77 = xor i64 %add68, %second
  %3 = xor i64 %call69, %add68
  %xor78 = xor i64 %3, 1152921504606846976
  %add80 = add i64 %xor77, %xor73
  %call81 = call fastcc i64 @rol64(i64 noundef %xor73, i32 noundef 13) #4
  %xor82 = xor i64 %call81, %add80
  %call83 = call fastcc i64 @rol64(i64 noundef %add80, i32 noundef 32) #4
  %add84 = add i64 %call74, %xor78
  %call85 = call fastcc i64 @rol64(i64 noundef %xor78, i32 noundef 16) #4
  %xor86 = xor i64 %call85, %add84
  %add87 = add i64 %xor86, %call83
  %call88 = call fastcc i64 @rol64(i64 noundef %xor86, i32 noundef 21) #4
  %xor89 = xor i64 %add87, %call88
  %add90 = add i64 %xor82, %add84
  %call91 = call fastcc i64 @rol64(i64 noundef %xor82, i32 noundef 17) #4
  %xor92 = xor i64 %call91, %add90
  %call93 = call fastcc i64 @rol64(i64 noundef %add90, i32 noundef 32) #4
  %add97 = add i64 %xor92, %add87
  %call98 = call fastcc i64 @rol64(i64 noundef %xor92, i32 noundef 13) #4
  %xor99 = xor i64 %call98, %add97
  %call100 = call fastcc i64 @rol64(i64 noundef %add97, i32 noundef 32) #4
  %add101 = add i64 %call93, %xor89
  %call102 = call fastcc i64 @rol64(i64 noundef %xor89, i32 noundef 16) #4
  %xor103 = xor i64 %call102, %add101
  %add104 = add i64 %xor103, %call100
  %call105 = call fastcc i64 @rol64(i64 noundef %xor103, i32 noundef 21) #4
  %xor106 = xor i64 %add104, %call105
  %add107 = add i64 %xor99, %add101
  %call108 = call fastcc i64 @rol64(i64 noundef %xor99, i32 noundef 17) #4
  %xor109 = xor i64 %call108, %add107
  %call110 = call fastcc i64 @rol64(i64 noundef %add107, i32 noundef 32) #4
  %xor113 = xor i64 %add104, 1152921504606846976
  %xor114 = xor i64 %call110, 255
  %add116 = add i64 %xor113, %xor109
  %call117 = call fastcc i64 @rol64(i64 noundef %xor109, i32 noundef 13) #4
  %xor118 = xor i64 %call117, %add116
  %call119 = call fastcc i64 @rol64(i64 noundef %add116, i32 noundef 32) #4
  %add120 = add i64 %xor114, %xor106
  %call121 = call fastcc i64 @rol64(i64 noundef %xor106, i32 noundef 16) #4
  %xor122 = xor i64 %call121, %add120
  %add123 = add i64 %xor122, %call119
  %call124 = call fastcc i64 @rol64(i64 noundef %xor122, i32 noundef 21) #4
  %xor125 = xor i64 %add123, %call124
  %add126 = add i64 %add120, %xor118
  %call127 = call fastcc i64 @rol64(i64 noundef %xor118, i32 noundef 17) #4
  %xor128 = xor i64 %call127, %add126
  %call129 = call fastcc i64 @rol64(i64 noundef %add126, i32 noundef 32) #4
  %add133 = add i64 %xor128, %add123
  %call134 = call fastcc i64 @rol64(i64 noundef %xor128, i32 noundef 13) #4
  %xor135 = xor i64 %call134, %add133
  %call136 = call fastcc i64 @rol64(i64 noundef %add133, i32 noundef 32) #4
  %add137 = add i64 %call129, %xor125
  %call138 = call fastcc i64 @rol64(i64 noundef %xor125, i32 noundef 16) #4
  %xor139 = xor i64 %call138, %add137
  %add140 = add i64 %xor139, %call136
  %call141 = call fastcc i64 @rol64(i64 noundef %xor139, i32 noundef 21) #4
  %xor142 = xor i64 %add140, %call141
  %add143 = add i64 %xor135, %add137
  %call144 = call fastcc i64 @rol64(i64 noundef %xor135, i32 noundef 17) #4
  %xor145 = xor i64 %call144, %add143
  %call146 = call fastcc i64 @rol64(i64 noundef %add143, i32 noundef 32) #4
  %add150 = add i64 %xor145, %add140
  %call151 = call fastcc i64 @rol64(i64 noundef %xor145, i32 noundef 13) #4
  %xor152 = xor i64 %call151, %add150
  %call153 = call fastcc i64 @rol64(i64 noundef %add150, i32 noundef 32) #4
  %add154 = add i64 %call146, %xor142
  %call155 = call fastcc i64 @rol64(i64 noundef %xor142, i32 noundef 16) #4
  %xor156 = xor i64 %call155, %add154
  %add157 = add i64 %xor156, %call153
  %call158 = call fastcc i64 @rol64(i64 noundef %xor156, i32 noundef 21) #4
  %xor159 = xor i64 %add157, %call158
  %add160 = add i64 %xor152, %add154
  %call161 = call fastcc i64 @rol64(i64 noundef %xor152, i32 noundef 17) #4
  %xor162 = xor i64 %call161, %add160
  %call163 = call fastcc i64 @rol64(i64 noundef %add160, i32 noundef 32) #4
  %add167 = add i64 %xor162, %add157
  %call168 = call fastcc i64 @rol64(i64 noundef %xor162, i32 noundef 13) #4
  %xor169 = xor i64 %call168, %add167
  %add171 = add i64 %call163, %xor159
  %call172 = call fastcc i64 @rol64(i64 noundef %xor159, i32 noundef 16) #4
  %xor173 = xor i64 %call172, %add171
  %call175 = call fastcc i64 @rol64(i64 noundef %xor173, i32 noundef 21) #4
  %add177 = add i64 %xor169, %add171
  %call178 = call fastcc i64 @rol64(i64 noundef %xor169, i32 noundef 17) #4
  %call180 = call fastcc i64 @rol64(i64 noundef %add177, i32 noundef 32) #4
  %xor179 = xor i64 %call175, %add177
  %xor183 = xor i64 %xor179, %call178
  %xor185 = xor i64 %xor183, %call180
  ret i64 %xor185
}

; Function Attrs: mustprogress nofree noinline nosync nounwind null_pointer_is_valid readonly willreturn
define dso_local i64 @siphash_3u64(i64 noundef %first, i64 noundef %second, i64 noundef %third, %struct.siphash_key_t* nocapture noundef readonly %key) local_unnamed_addr #2 {
entry:
  %arrayidx = getelementptr %struct.siphash_key_t, %struct.siphash_key_t* %key, i64 0, i32 0, i64 1
  %0 = load i64, i64* %arrayidx, align 8
  %arrayidx3 = getelementptr inbounds %struct.siphash_key_t, %struct.siphash_key_t* %key, i64 0, i32 0, i64 0
  %1 = load i64, i64* %arrayidx3, align 8
  %xor4 = xor i64 %1, 7816392313619706465
  %xor7 = xor i64 %0, 7237128888997146477
  %xor10 = xor i64 %1, 8317987319222330741
  %2 = xor i64 %0, %first
  %xor11 = xor i64 %2, 8387220255154660723
  %add = add i64 %xor10, %xor7
  %call = call fastcc i64 @rol64(i64 noundef %xor7, i32 noundef 13) #4
  %xor12 = xor i64 %add, %call
  %call13 = call fastcc i64 @rol64(i64 noundef %add, i32 noundef 32) #4
  %add14 = add i64 %xor4, %xor11
  %call15 = call fastcc i64 @rol64(i64 noundef %xor11, i32 noundef 16) #4
  %xor16 = xor i64 %call15, %add14
  %add17 = add i64 %xor16, %call13
  %call18 = call fastcc i64 @rol64(i64 noundef %xor16, i32 noundef 21) #4
  %xor19 = xor i64 %add17, %call18
  %add20 = add i64 %xor12, %add14
  %call21 = call fastcc i64 @rol64(i64 noundef %xor12, i32 noundef 17) #4
  %xor22 = xor i64 %call21, %add20
  %call23 = call fastcc i64 @rol64(i64 noundef %add20, i32 noundef 32) #4
  %add25 = add i64 %xor22, %add17
  %call26 = call fastcc i64 @rol64(i64 noundef %xor22, i32 noundef 13) #4
  %xor27 = xor i64 %call26, %add25
  %call28 = call fastcc i64 @rol64(i64 noundef %add25, i32 noundef 32) #4
  %add29 = add i64 %call23, %xor19
  %call30 = call fastcc i64 @rol64(i64 noundef %xor19, i32 noundef 16) #4
  %xor31 = xor i64 %call30, %add29
  %add32 = add i64 %xor31, %call28
  %call33 = call fastcc i64 @rol64(i64 noundef %xor31, i32 noundef 21) #4
  %add35 = add i64 %xor27, %add29
  %call36 = call fastcc i64 @rol64(i64 noundef %xor27, i32 noundef 17) #4
  %xor37 = xor i64 %call36, %add35
  %call38 = call fastcc i64 @rol64(i64 noundef %add35, i32 noundef 32) #4
  %xor41 = xor i64 %add32, %first
  %xor34 = xor i64 %call33, %second
  %xor42 = xor i64 %xor34, %add32
  %add44 = add i64 %xor41, %xor37
  %call45 = call fastcc i64 @rol64(i64 noundef %xor37, i32 noundef 13) #4
  %xor46 = xor i64 %call45, %add44
  %call47 = call fastcc i64 @rol64(i64 noundef %add44, i32 noundef 32) #4
  %add48 = add i64 %xor42, %call38
  %call49 = call fastcc i64 @rol64(i64 noundef %xor42, i32 noundef 16) #4
  %xor50 = xor i64 %call49, %add48
  %add51 = add i64 %xor50, %call47
  %call52 = call fastcc i64 @rol64(i64 noundef %xor50, i32 noundef 21) #4
  %xor53 = xor i64 %add51, %call52
  %add54 = add i64 %add48, %xor46
  %call55 = call fastcc i64 @rol64(i64 noundef %xor46, i32 noundef 17) #4
  %xor56 = xor i64 %call55, %add54
  %call57 = call fastcc i64 @rol64(i64 noundef %add54, i32 noundef 32) #4
  %add61 = add i64 %xor56, %add51
  %call62 = call fastcc i64 @rol64(i64 noundef %xor56, i32 noundef 13) #4
  %xor63 = xor i64 %call62, %add61
  %call64 = call fastcc i64 @rol64(i64 noundef %add61, i32 noundef 32) #4
  %add65 = add i64 %call57, %xor53
  %call66 = call fastcc i64 @rol64(i64 noundef %xor53, i32 noundef 16) #4
  %xor67 = xor i64 %call66, %add65
  %add68 = add i64 %xor67, %call64
  %call69 = call fastcc i64 @rol64(i64 noundef %xor67, i32 noundef 21) #4
  %add71 = add i64 %xor63, %add65
  %call72 = call fastcc i64 @rol64(i64 noundef %xor63, i32 noundef 17) #4
  %xor73 = xor i64 %call72, %add71
  %call74 = call fastcc i64 @rol64(i64 noundef %add71, i32 noundef 32) #4
  %xor77 = xor i64 %add68, %second
  %xor70 = xor i64 %call69, %third
  %xor78 = xor i64 %xor70, %add68
  %add80 = add i64 %xor77, %xor73
  %call81 = call fastcc i64 @rol64(i64 noundef %xor73, i32 noundef 13) #4
  %xor82 = xor i64 %call81, %add80
  %call83 = call fastcc i64 @rol64(i64 noundef %add80, i32 noundef 32) #4
  %add84 = add i64 %xor78, %call74
  %call85 = call fastcc i64 @rol64(i64 noundef %xor78, i32 noundef 16) #4
  %xor86 = xor i64 %call85, %add84
  %add87 = add i64 %xor86, %call83
  %call88 = call fastcc i64 @rol64(i64 noundef %xor86, i32 noundef 21) #4
  %xor89 = xor i64 %add87, %call88
  %add90 = add i64 %add84, %xor82
  %call91 = call fastcc i64 @rol64(i64 noundef %xor82, i32 noundef 17) #4
  %xor92 = xor i64 %call91, %add90
  %call93 = call fastcc i64 @rol64(i64 noundef %add90, i32 noundef 32) #4
  %add97 = add i64 %xor92, %add87
  %call98 = call fastcc i64 @rol64(i64 noundef %xor92, i32 noundef 13) #4
  %xor99 = xor i64 %call98, %add97
  %call100 = call fastcc i64 @rol64(i64 noundef %add97, i32 noundef 32) #4
  %add101 = add i64 %call93, %xor89
  %call102 = call fastcc i64 @rol64(i64 noundef %xor89, i32 noundef 16) #4
  %xor103 = xor i64 %call102, %add101
  %add104 = add i64 %xor103, %call100
  %call105 = call fastcc i64 @rol64(i64 noundef %xor103, i32 noundef 21) #4
  %add107 = add i64 %xor99, %add101
  %call108 = call fastcc i64 @rol64(i64 noundef %xor99, i32 noundef 17) #4
  %xor109 = xor i64 %call108, %add107
  %call110 = call fastcc i64 @rol64(i64 noundef %add107, i32 noundef 32) #4
  %xor113 = xor i64 %add104, %third
  %3 = xor i64 %call105, %add104
  %xor114 = xor i64 %3, 1729382256910270464
  %add116 = add i64 %xor113, %xor109
  %call117 = call fastcc i64 @rol64(i64 noundef %xor109, i32 noundef 13) #4
  %xor118 = xor i64 %call117, %add116
  %call119 = call fastcc i64 @rol64(i64 noundef %add116, i32 noundef 32) #4
  %add120 = add i64 %call110, %xor114
  %call121 = call fastcc i64 @rol64(i64 noundef %xor114, i32 noundef 16) #4
  %xor122 = xor i64 %call121, %add120
  %add123 = add i64 %xor122, %call119
  %call124 = call fastcc i64 @rol64(i64 noundef %xor122, i32 noundef 21) #4
  %xor125 = xor i64 %add123, %call124
  %add126 = add i64 %xor118, %add120
  %call127 = call fastcc i64 @rol64(i64 noundef %xor118, i32 noundef 17) #4
  %xor128 = xor i64 %call127, %add126
  %call129 = call fastcc i64 @rol64(i64 noundef %add126, i32 noundef 32) #4
  %add133 = add i64 %xor128, %add123
  %call134 = call fastcc i64 @rol64(i64 noundef %xor128, i32 noundef 13) #4
  %xor135 = xor i64 %call134, %add133
  %call136 = call fastcc i64 @rol64(i64 noundef %add133, i32 noundef 32) #4
  %add137 = add i64 %call129, %xor125
  %call138 = call fastcc i64 @rol64(i64 noundef %xor125, i32 noundef 16) #4
  %xor139 = xor i64 %call138, %add137
  %add140 = add i64 %xor139, %call136
  %call141 = call fastcc i64 @rol64(i64 noundef %xor139, i32 noundef 21) #4
  %xor142 = xor i64 %add140, %call141
  %add143 = add i64 %xor135, %add137
  %call144 = call fastcc i64 @rol64(i64 noundef %xor135, i32 noundef 17) #4
  %xor145 = xor i64 %call144, %add143
  %call146 = call fastcc i64 @rol64(i64 noundef %add143, i32 noundef 32) #4
  %xor149 = xor i64 %add140, 1729382256910270464
  %xor150 = xor i64 %call146, 255
  %add152 = add i64 %xor149, %xor145
  %call153 = call fastcc i64 @rol64(i64 noundef %xor145, i32 noundef 13) #4
  %xor154 = xor i64 %call153, %add152
  %call155 = call fastcc i64 @rol64(i64 noundef %add152, i32 noundef 32) #4
  %add156 = add i64 %xor150, %xor142
  %call157 = call fastcc i64 @rol64(i64 noundef %xor142, i32 noundef 16) #4
  %xor158 = xor i64 %call157, %add156
  %add159 = add i64 %xor158, %call155
  %call160 = call fastcc i64 @rol64(i64 noundef %xor158, i32 noundef 21) #4
  %xor161 = xor i64 %add159, %call160
  %add162 = add i64 %add156, %xor154
  %call163 = call fastcc i64 @rol64(i64 noundef %xor154, i32 noundef 17) #4
  %xor164 = xor i64 %call163, %add162
  %call165 = call fastcc i64 @rol64(i64 noundef %add162, i32 noundef 32) #4
  %add169 = add i64 %xor164, %add159
  %call170 = call fastcc i64 @rol64(i64 noundef %xor164, i32 noundef 13) #4
  %xor171 = xor i64 %call170, %add169
  %call172 = call fastcc i64 @rol64(i64 noundef %add169, i32 noundef 32) #4
  %add173 = add i64 %call165, %xor161
  %call174 = call fastcc i64 @rol64(i64 noundef %xor161, i32 noundef 16) #4
  %xor175 = xor i64 %call174, %add173
  %add176 = add i64 %xor175, %call172
  %call177 = call fastcc i64 @rol64(i64 noundef %xor175, i32 noundef 21) #4
  %xor178 = xor i64 %add176, %call177
  %add179 = add i64 %xor171, %add173
  %call180 = call fastcc i64 @rol64(i64 noundef %xor171, i32 noundef 17) #4
  %xor181 = xor i64 %call180, %add179
  %call182 = call fastcc i64 @rol64(i64 noundef %add179, i32 noundef 32) #4
  %add186 = add i64 %xor181, %add176
  %call187 = call fastcc i64 @rol64(i64 noundef %xor181, i32 noundef 13) #4
  %xor188 = xor i64 %call187, %add186
  %call189 = call fastcc i64 @rol64(i64 noundef %add186, i32 noundef 32) #4
  %add190 = add i64 %call182, %xor178
  %call191 = call fastcc i64 @rol64(i64 noundef %xor178, i32 noundef 16) #4
  %xor192 = xor i64 %call191, %add190
  %add193 = add i64 %xor192, %call189
  %call194 = call fastcc i64 @rol64(i64 noundef %xor192, i32 noundef 21) #4
  %xor195 = xor i64 %add193, %call194
  %add196 = add i64 %xor188, %add190
  %call197 = call fastcc i64 @rol64(i64 noundef %xor188, i32 noundef 17) #4
  %xor198 = xor i64 %call197, %add196
  %call199 = call fastcc i64 @rol64(i64 noundef %add196, i32 noundef 32) #4
  %add203 = add i64 %xor198, %add193
  %call204 = call fastcc i64 @rol64(i64 noundef %xor198, i32 noundef 13) #4
  %xor205 = xor i64 %call204, %add203
  %add207 = add i64 %call199, %xor195
  %call208 = call fastcc i64 @rol64(i64 noundef %xor195, i32 noundef 16) #4
  %xor209 = xor i64 %call208, %add207
  %call211 = call fastcc i64 @rol64(i64 noundef %xor209, i32 noundef 21) #4
  %add213 = add i64 %xor205, %add207
  %call214 = call fastcc i64 @rol64(i64 noundef %xor205, i32 noundef 17) #4
  %call216 = call fastcc i64 @rol64(i64 noundef %add213, i32 noundef 32) #4
  %xor215 = xor i64 %call211, %add213
  %xor219 = xor i64 %xor215, %call214
  %xor221 = xor i64 %xor219, %call216
  ret i64 %xor221
}

; Function Attrs: mustprogress nofree noinline nosync nounwind null_pointer_is_valid readonly willreturn
define dso_local i64 @siphash_4u64(i64 noundef %first, i64 noundef %second, i64 noundef %third, i64 noundef %forth, %struct.siphash_key_t* nocapture noundef readonly %key) local_unnamed_addr #2 {
entry:
  %arrayidx = getelementptr %struct.siphash_key_t, %struct.siphash_key_t* %key, i64 0, i32 0, i64 1
  %0 = load i64, i64* %arrayidx, align 8
  %arrayidx3 = getelementptr inbounds %struct.siphash_key_t, %struct.siphash_key_t* %key, i64 0, i32 0, i64 0
  %1 = load i64, i64* %arrayidx3, align 8
  %xor4 = xor i64 %1, 7816392313619706465
  %xor7 = xor i64 %0, 7237128888997146477
  %xor10 = xor i64 %1, 8317987319222330741
  %2 = xor i64 %0, %first
  %xor11 = xor i64 %2, 8387220255154660723
  %add = add i64 %xor10, %xor7
  %call = call fastcc i64 @rol64(i64 noundef %xor7, i32 noundef 13) #4
  %xor12 = xor i64 %add, %call
  %call13 = call fastcc i64 @rol64(i64 noundef %add, i32 noundef 32) #4
  %add14 = add i64 %xor4, %xor11
  %call15 = call fastcc i64 @rol64(i64 noundef %xor11, i32 noundef 16) #4
  %xor16 = xor i64 %call15, %add14
  %add17 = add i64 %xor16, %call13
  %call18 = call fastcc i64 @rol64(i64 noundef %xor16, i32 noundef 21) #4
  %xor19 = xor i64 %add17, %call18
  %add20 = add i64 %xor12, %add14
  %call21 = call fastcc i64 @rol64(i64 noundef %xor12, i32 noundef 17) #4
  %xor22 = xor i64 %call21, %add20
  %call23 = call fastcc i64 @rol64(i64 noundef %add20, i32 noundef 32) #4
  %add25 = add i64 %xor22, %add17
  %call26 = call fastcc i64 @rol64(i64 noundef %xor22, i32 noundef 13) #4
  %xor27 = xor i64 %call26, %add25
  %call28 = call fastcc i64 @rol64(i64 noundef %add25, i32 noundef 32) #4
  %add29 = add i64 %call23, %xor19
  %call30 = call fastcc i64 @rol64(i64 noundef %xor19, i32 noundef 16) #4
  %xor31 = xor i64 %call30, %add29
  %add32 = add i64 %xor31, %call28
  %call33 = call fastcc i64 @rol64(i64 noundef %xor31, i32 noundef 21) #4
  %add35 = add i64 %xor27, %add29
  %call36 = call fastcc i64 @rol64(i64 noundef %xor27, i32 noundef 17) #4
  %xor37 = xor i64 %call36, %add35
  %call38 = call fastcc i64 @rol64(i64 noundef %add35, i32 noundef 32) #4
  %xor41 = xor i64 %add32, %first
  %xor34 = xor i64 %call33, %second
  %xor42 = xor i64 %xor34, %add32
  %add44 = add i64 %xor41, %xor37
  %call45 = call fastcc i64 @rol64(i64 noundef %xor37, i32 noundef 13) #4
  %xor46 = xor i64 %call45, %add44
  %call47 = call fastcc i64 @rol64(i64 noundef %add44, i32 noundef 32) #4
  %add48 = add i64 %xor42, %call38
  %call49 = call fastcc i64 @rol64(i64 noundef %xor42, i32 noundef 16) #4
  %xor50 = xor i64 %call49, %add48
  %add51 = add i64 %xor50, %call47
  %call52 = call fastcc i64 @rol64(i64 noundef %xor50, i32 noundef 21) #4
  %xor53 = xor i64 %add51, %call52
  %add54 = add i64 %add48, %xor46
  %call55 = call fastcc i64 @rol64(i64 noundef %xor46, i32 noundef 17) #4
  %xor56 = xor i64 %call55, %add54
  %call57 = call fastcc i64 @rol64(i64 noundef %add54, i32 noundef 32) #4
  %add61 = add i64 %xor56, %add51
  %call62 = call fastcc i64 @rol64(i64 noundef %xor56, i32 noundef 13) #4
  %xor63 = xor i64 %call62, %add61
  %call64 = call fastcc i64 @rol64(i64 noundef %add61, i32 noundef 32) #4
  %add65 = add i64 %call57, %xor53
  %call66 = call fastcc i64 @rol64(i64 noundef %xor53, i32 noundef 16) #4
  %xor67 = xor i64 %call66, %add65
  %add68 = add i64 %xor67, %call64
  %call69 = call fastcc i64 @rol64(i64 noundef %xor67, i32 noundef 21) #4
  %add71 = add i64 %xor63, %add65
  %call72 = call fastcc i64 @rol64(i64 noundef %xor63, i32 noundef 17) #4
  %xor73 = xor i64 %call72, %add71
  %call74 = call fastcc i64 @rol64(i64 noundef %add71, i32 noundef 32) #4
  %xor77 = xor i64 %add68, %second
  %xor70 = xor i64 %call69, %third
  %xor78 = xor i64 %xor70, %add68
  %add80 = add i64 %xor77, %xor73
  %call81 = call fastcc i64 @rol64(i64 noundef %xor73, i32 noundef 13) #4
  %xor82 = xor i64 %call81, %add80
  %call83 = call fastcc i64 @rol64(i64 noundef %add80, i32 noundef 32) #4
  %add84 = add i64 %xor78, %call74
  %call85 = call fastcc i64 @rol64(i64 noundef %xor78, i32 noundef 16) #4
  %xor86 = xor i64 %call85, %add84
  %add87 = add i64 %xor86, %call83
  %call88 = call fastcc i64 @rol64(i64 noundef %xor86, i32 noundef 21) #4
  %xor89 = xor i64 %add87, %call88
  %add90 = add i64 %add84, %xor82
  %call91 = call fastcc i64 @rol64(i64 noundef %xor82, i32 noundef 17) #4
  %xor92 = xor i64 %call91, %add90
  %call93 = call fastcc i64 @rol64(i64 noundef %add90, i32 noundef 32) #4
  %add97 = add i64 %xor92, %add87
  %call98 = call fastcc i64 @rol64(i64 noundef %xor92, i32 noundef 13) #4
  %xor99 = xor i64 %call98, %add97
  %call100 = call fastcc i64 @rol64(i64 noundef %add97, i32 noundef 32) #4
  %add101 = add i64 %call93, %xor89
  %call102 = call fastcc i64 @rol64(i64 noundef %xor89, i32 noundef 16) #4
  %xor103 = xor i64 %call102, %add101
  %add104 = add i64 %xor103, %call100
  %call105 = call fastcc i64 @rol64(i64 noundef %xor103, i32 noundef 21) #4
  %add107 = add i64 %xor99, %add101
  %call108 = call fastcc i64 @rol64(i64 noundef %xor99, i32 noundef 17) #4
  %xor109 = xor i64 %call108, %add107
  %call110 = call fastcc i64 @rol64(i64 noundef %add107, i32 noundef 32) #4
  %xor113 = xor i64 %add104, %third
  %xor106 = xor i64 %call105, %forth
  %xor114 = xor i64 %xor106, %add104
  %add116 = add i64 %xor113, %xor109
  %call117 = call fastcc i64 @rol64(i64 noundef %xor109, i32 noundef 13) #4
  %xor118 = xor i64 %call117, %add116
  %call119 = call fastcc i64 @rol64(i64 noundef %add116, i32 noundef 32) #4
  %add120 = add i64 %xor114, %call110
  %call121 = call fastcc i64 @rol64(i64 noundef %xor114, i32 noundef 16) #4
  %xor122 = xor i64 %call121, %add120
  %add123 = add i64 %xor122, %call119
  %call124 = call fastcc i64 @rol64(i64 noundef %xor122, i32 noundef 21) #4
  %xor125 = xor i64 %add123, %call124
  %add126 = add i64 %add120, %xor118
  %call127 = call fastcc i64 @rol64(i64 noundef %xor118, i32 noundef 17) #4
  %xor128 = xor i64 %call127, %add126
  %call129 = call fastcc i64 @rol64(i64 noundef %add126, i32 noundef 32) #4
  %add133 = add i64 %xor128, %add123
  %call134 = call fastcc i64 @rol64(i64 noundef %xor128, i32 noundef 13) #4
  %xor135 = xor i64 %call134, %add133
  %call136 = call fastcc i64 @rol64(i64 noundef %add133, i32 noundef 32) #4
  %add137 = add i64 %call129, %xor125
  %call138 = call fastcc i64 @rol64(i64 noundef %xor125, i32 noundef 16) #4
  %xor139 = xor i64 %call138, %add137
  %add140 = add i64 %xor139, %call136
  %call141 = call fastcc i64 @rol64(i64 noundef %xor139, i32 noundef 21) #4
  %add143 = add i64 %xor135, %add137
  %call144 = call fastcc i64 @rol64(i64 noundef %xor135, i32 noundef 17) #4
  %xor145 = xor i64 %call144, %add143
  %call146 = call fastcc i64 @rol64(i64 noundef %add143, i32 noundef 32) #4
  %xor149 = xor i64 %add140, %forth
  %3 = xor i64 %call141, %add140
  %xor150 = xor i64 %3, 2305843009213693952
  %add152 = add i64 %xor149, %xor145
  %call153 = call fastcc i64 @rol64(i64 noundef %xor145, i32 noundef 13) #4
  %xor154 = xor i64 %call153, %add152
  %call155 = call fastcc i64 @rol64(i64 noundef %add152, i32 noundef 32) #4
  %add156 = add i64 %call146, %xor150
  %call157 = call fastcc i64 @rol64(i64 noundef %xor150, i32 noundef 16) #4
  %xor158 = xor i64 %call157, %add156
  %add159 = add i64 %xor158, %call155
  %call160 = call fastcc i64 @rol64(i64 noundef %xor158, i32 noundef 21) #4
  %xor161 = xor i64 %add159, %call160
  %add162 = add i64 %xor154, %add156
  %call163 = call fastcc i64 @rol64(i64 noundef %xor154, i32 noundef 17) #4
  %xor164 = xor i64 %call163, %add162
  %call165 = call fastcc i64 @rol64(i64 noundef %add162, i32 noundef 32) #4
  %add169 = add i64 %xor164, %add159
  %call170 = call fastcc i64 @rol64(i64 noundef %xor164, i32 noundef 13) #4
  %xor171 = xor i64 %call170, %add169
  %call172 = call fastcc i64 @rol64(i64 noundef %add169, i32 noundef 32) #4
  %add173 = add i64 %call165, %xor161
  %call174 = call fastcc i64 @rol64(i64 noundef %xor161, i32 noundef 16) #4
  %xor175 = xor i64 %call174, %add173
  %add176 = add i64 %xor175, %call172
  %call177 = call fastcc i64 @rol64(i64 noundef %xor175, i32 noundef 21) #4
  %xor178 = xor i64 %add176, %call177
  %add179 = add i64 %xor171, %add173
  %call180 = call fastcc i64 @rol64(i64 noundef %xor171, i32 noundef 17) #4
  %xor181 = xor i64 %call180, %add179
  %call182 = call fastcc i64 @rol64(i64 noundef %add179, i32 noundef 32) #4
  %xor185 = xor i64 %add176, 2305843009213693952
  %xor186 = xor i64 %call182, 255
  %add188 = add i64 %xor185, %xor181
  %call189 = call fastcc i64 @rol64(i64 noundef %xor181, i32 noundef 13) #4
  %xor190 = xor i64 %call189, %add188
  %call191 = call fastcc i64 @rol64(i64 noundef %add188, i32 noundef 32) #4
  %add192 = add i64 %xor186, %xor178
  %call193 = call fastcc i64 @rol64(i64 noundef %xor178, i32 noundef 16) #4
  %xor194 = xor i64 %call193, %add192
  %add195 = add i64 %xor194, %call191
  %call196 = call fastcc i64 @rol64(i64 noundef %xor194, i32 noundef 21) #4
  %xor197 = xor i64 %add195, %call196
  %add198 = add i64 %add192, %xor190
  %call199 = call fastcc i64 @rol64(i64 noundef %xor190, i32 noundef 17) #4
  %xor200 = xor i64 %call199, %add198
  %call201 = call fastcc i64 @rol64(i64 noundef %add198, i32 noundef 32) #4
  %add205 = add i64 %xor200, %add195
  %call206 = call fastcc i64 @rol64(i64 noundef %xor200, i32 noundef 13) #4
  %xor207 = xor i64 %call206, %add205
  %call208 = call fastcc i64 @rol64(i64 noundef %add205, i32 noundef 32) #4
  %add209 = add i64 %call201, %xor197
  %call210 = call fastcc i64 @rol64(i64 noundef %xor197, i32 noundef 16) #4
  %xor211 = xor i64 %call210, %add209
  %add212 = add i64 %xor211, %call208
  %call213 = call fastcc i64 @rol64(i64 noundef %xor211, i32 noundef 21) #4
  %xor214 = xor i64 %add212, %call213
  %add215 = add i64 %xor207, %add209
  %call216 = call fastcc i64 @rol64(i64 noundef %xor207, i32 noundef 17) #4
  %xor217 = xor i64 %call216, %add215
  %call218 = call fastcc i64 @rol64(i64 noundef %add215, i32 noundef 32) #4
  %add222 = add i64 %xor217, %add212
  %call223 = call fastcc i64 @rol64(i64 noundef %xor217, i32 noundef 13) #4
  %xor224 = xor i64 %call223, %add222
  %call225 = call fastcc i64 @rol64(i64 noundef %add222, i32 noundef 32) #4
  %add226 = add i64 %call218, %xor214
  %call227 = call fastcc i64 @rol64(i64 noundef %xor214, i32 noundef 16) #4
  %xor228 = xor i64 %call227, %add226
  %add229 = add i64 %xor228, %call225
  %call230 = call fastcc i64 @rol64(i64 noundef %xor228, i32 noundef 21) #4
  %xor231 = xor i64 %add229, %call230
  %add232 = add i64 %xor224, %add226
  %call233 = call fastcc i64 @rol64(i64 noundef %xor224, i32 noundef 17) #4
  %xor234 = xor i64 %call233, %add232
  %call235 = call fastcc i64 @rol64(i64 noundef %add232, i32 noundef 32) #4
  %add239 = add i64 %xor234, %add229
  %call240 = call fastcc i64 @rol64(i64 noundef %xor234, i32 noundef 13) #4
  %xor241 = xor i64 %call240, %add239
  %add243 = add i64 %call235, %xor231
  %call244 = call fastcc i64 @rol64(i64 noundef %xor231, i32 noundef 16) #4
  %xor245 = xor i64 %call244, %add243
  %call247 = call fastcc i64 @rol64(i64 noundef %xor245, i32 noundef 21) #4
  %add249 = add i64 %xor241, %add243
  %call250 = call fastcc i64 @rol64(i64 noundef %xor241, i32 noundef 17) #4
  %call252 = call fastcc i64 @rol64(i64 noundef %add249, i32 noundef 32) #4
  %xor251 = xor i64 %call247, %add249
  %xor255 = xor i64 %xor251, %call250
  %xor257 = xor i64 %xor255, %call252
  ret i64 %xor257
}

; Function Attrs: mustprogress nofree noinline nosync nounwind null_pointer_is_valid readonly willreturn
define dso_local i64 @siphash_1u32(i32 noundef %first, %struct.siphash_key_t* nocapture noundef readonly %key) local_unnamed_addr #2 {
entry:
  %arrayidx = getelementptr %struct.siphash_key_t, %struct.siphash_key_t* %key, i64 0, i32 0, i64 1
  %0 = load i64, i64* %arrayidx, align 8
  %arrayidx3 = getelementptr inbounds %struct.siphash_key_t, %struct.siphash_key_t* %key, i64 0, i32 0, i64 0
  %1 = load i64, i64* %arrayidx3, align 8
  %xor4 = xor i64 %1, 7816392313619706465
  %xor7 = xor i64 %0, 7237128888997146477
  %xor10 = xor i64 %1, 8317987319222330741
  %conv = zext i32 %first to i64
  %or = or i64 %conv, 288230376151711744
  %2 = xor i64 %0, %conv
  %xor11 = xor i64 %2, 8098989879002948979
  %add = add i64 %xor10, %xor7
  %call = call fastcc i64 @rol64(i64 noundef %xor7, i32 noundef 13) #4
  %xor12 = xor i64 %add, %call
  %call13 = call fastcc i64 @rol64(i64 noundef %add, i32 noundef 32) #4
  %add14 = add i64 %xor4, %xor11
  %call15 = call fastcc i64 @rol64(i64 noundef %xor11, i32 noundef 16) #4
  %xor16 = xor i64 %call15, %add14
  %add17 = add i64 %xor16, %call13
  %call18 = call fastcc i64 @rol64(i64 noundef %xor16, i32 noundef 21) #4
  %xor19 = xor i64 %add17, %call18
  %add20 = add i64 %xor12, %add14
  %call21 = call fastcc i64 @rol64(i64 noundef %xor12, i32 noundef 17) #4
  %xor22 = xor i64 %call21, %add20
  %call23 = call fastcc i64 @rol64(i64 noundef %add20, i32 noundef 32) #4
  %add25 = add i64 %xor22, %add17
  %call26 = call fastcc i64 @rol64(i64 noundef %xor22, i32 noundef 13) #4
  %xor27 = xor i64 %call26, %add25
  %call28 = call fastcc i64 @rol64(i64 noundef %add25, i32 noundef 32) #4
  %add29 = add i64 %call23, %xor19
  %call30 = call fastcc i64 @rol64(i64 noundef %xor19, i32 noundef 16) #4
  %xor31 = xor i64 %call30, %add29
  %add32 = add i64 %xor31, %call28
  %call33 = call fastcc i64 @rol64(i64 noundef %xor31, i32 noundef 21) #4
  %xor34 = xor i64 %add32, %call33
  %add35 = add i64 %xor27, %add29
  %call36 = call fastcc i64 @rol64(i64 noundef %xor27, i32 noundef 17) #4
  %xor37 = xor i64 %call36, %add35
  %call38 = call fastcc i64 @rol64(i64 noundef %add35, i32 noundef 32) #4
  %xor41 = xor i64 %add32, %or
  %xor42 = xor i64 %call38, 255
  %add44 = add i64 %xor41, %xor37
  %call45 = call fastcc i64 @rol64(i64 noundef %xor37, i32 noundef 13) #4
  %xor46 = xor i64 %call45, %add44
  %call47 = call fastcc i64 @rol64(i64 noundef %add44, i32 noundef 32) #4
  %add48 = add i64 %xor42, %xor34
  %call49 = call fastcc i64 @rol64(i64 noundef %xor34, i32 noundef 16) #4
  %xor50 = xor i64 %call49, %add48
  %add51 = add i64 %xor50, %call47
  %call52 = call fastcc i64 @rol64(i64 noundef %xor50, i32 noundef 21) #4
  %xor53 = xor i64 %add51, %call52
  %add54 = add i64 %add48, %xor46
  %call55 = call fastcc i64 @rol64(i64 noundef %xor46, i32 noundef 17) #4
  %xor56 = xor i64 %call55, %add54
  %call57 = call fastcc i64 @rol64(i64 noundef %add54, i32 noundef 32) #4
  %add61 = add i64 %xor56, %add51
  %call62 = call fastcc i64 @rol64(i64 noundef %xor56, i32 noundef 13) #4
  %xor63 = xor i64 %call62, %add61
  %call64 = call fastcc i64 @rol64(i64 noundef %add61, i32 noundef 32) #4
  %add65 = add i64 %call57, %xor53
  %call66 = call fastcc i64 @rol64(i64 noundef %xor53, i32 noundef 16) #4
  %xor67 = xor i64 %call66, %add65
  %add68 = add i64 %xor67, %call64
  %call69 = call fastcc i64 @rol64(i64 noundef %xor67, i32 noundef 21) #4
  %xor70 = xor i64 %add68, %call69
  %add71 = add i64 %xor63, %add65
  %call72 = call fastcc i64 @rol64(i64 noundef %xor63, i32 noundef 17) #4
  %xor73 = xor i64 %call72, %add71
  %call74 = call fastcc i64 @rol64(i64 noundef %add71, i32 noundef 32) #4
  %add78 = add i64 %xor73, %add68
  %call79 = call fastcc i64 @rol64(i64 noundef %xor73, i32 noundef 13) #4
  %xor80 = xor i64 %call79, %add78
  %call81 = call fastcc i64 @rol64(i64 noundef %add78, i32 noundef 32) #4
  %add82 = add i64 %call74, %xor70
  %call83 = call fastcc i64 @rol64(i64 noundef %xor70, i32 noundef 16) #4
  %xor84 = xor i64 %call83, %add82
  %add85 = add i64 %xor84, %call81
  %call86 = call fastcc i64 @rol64(i64 noundef %xor84, i32 noundef 21) #4
  %xor87 = xor i64 %add85, %call86
  %add88 = add i64 %xor80, %add82
  %call89 = call fastcc i64 @rol64(i64 noundef %xor80, i32 noundef 17) #4
  %xor90 = xor i64 %call89, %add88
  %call91 = call fastcc i64 @rol64(i64 noundef %add88, i32 noundef 32) #4
  %add95 = add i64 %xor90, %add85
  %call96 = call fastcc i64 @rol64(i64 noundef %xor90, i32 noundef 13) #4
  %xor97 = xor i64 %call96, %add95
  %add99 = add i64 %call91, %xor87
  %call100 = call fastcc i64 @rol64(i64 noundef %xor87, i32 noundef 16) #4
  %xor101 = xor i64 %call100, %add99
  %call103 = call fastcc i64 @rol64(i64 noundef %xor101, i32 noundef 21) #4
  %add105 = add i64 %xor97, %add99
  %call106 = call fastcc i64 @rol64(i64 noundef %xor97, i32 noundef 17) #4
  %call108 = call fastcc i64 @rol64(i64 noundef %add105, i32 noundef 32) #4
  %xor107 = xor i64 %call103, %add105
  %xor111 = xor i64 %xor107, %call106
  %xor113 = xor i64 %xor111, %call108
  ret i64 %xor113
}

; Function Attrs: mustprogress nofree noinline nosync nounwind null_pointer_is_valid readonly willreturn
define dso_local i64 @siphash_3u32(i32 noundef %first, i32 noundef %second, i32 noundef %third, %struct.siphash_key_t* nocapture noundef readonly %key) local_unnamed_addr #2 {
entry:
  %conv = zext i32 %second to i64
  %shl = shl nuw i64 %conv, 32
  %conv1 = zext i32 %first to i64
  %or = or i64 %shl, %conv1
  %arrayidx = getelementptr %struct.siphash_key_t, %struct.siphash_key_t* %key, i64 0, i32 0, i64 1
  %0 = load i64, i64* %arrayidx, align 8
  %arrayidx4 = getelementptr inbounds %struct.siphash_key_t, %struct.siphash_key_t* %key, i64 0, i32 0, i64 0
  %1 = load i64, i64* %arrayidx4, align 8
  %xor5 = xor i64 %1, 7816392313619706465
  %xor8 = xor i64 %0, 7237128888997146477
  %xor11 = xor i64 %1, 8317987319222330741
  %2 = xor i64 %or, %0
  %xor12 = xor i64 %2, 8387220255154660723
  %add = add i64 %xor11, %xor8
  %call = call fastcc i64 @rol64(i64 noundef %xor8, i32 noundef 13) #4
  %xor13 = xor i64 %add, %call
  %call14 = call fastcc i64 @rol64(i64 noundef %add, i32 noundef 32) #4
  %add15 = add i64 %xor5, %xor12
  %call16 = call fastcc i64 @rol64(i64 noundef %xor12, i32 noundef 16) #4
  %xor17 = xor i64 %call16, %add15
  %add18 = add i64 %xor17, %call14
  %call19 = call fastcc i64 @rol64(i64 noundef %xor17, i32 noundef 21) #4
  %xor20 = xor i64 %add18, %call19
  %add21 = add i64 %xor13, %add15
  %call22 = call fastcc i64 @rol64(i64 noundef %xor13, i32 noundef 17) #4
  %xor23 = xor i64 %call22, %add21
  %call24 = call fastcc i64 @rol64(i64 noundef %add21, i32 noundef 32) #4
  %add26 = add i64 %xor23, %add18
  %call27 = call fastcc i64 @rol64(i64 noundef %xor23, i32 noundef 13) #4
  %xor28 = xor i64 %call27, %add26
  %call29 = call fastcc i64 @rol64(i64 noundef %add26, i32 noundef 32) #4
  %add30 = add i64 %call24, %xor20
  %call31 = call fastcc i64 @rol64(i64 noundef %xor20, i32 noundef 16) #4
  %xor32 = xor i64 %call31, %add30
  %add33 = add i64 %xor32, %call29
  %call34 = call fastcc i64 @rol64(i64 noundef %xor32, i32 noundef 21) #4
  %add36 = add i64 %xor28, %add30
  %call37 = call fastcc i64 @rol64(i64 noundef %xor28, i32 noundef 17) #4
  %xor38 = xor i64 %call37, %add36
  %call39 = call fastcc i64 @rol64(i64 noundef %add36, i32 noundef 32) #4
  %xor42 = xor i64 %add33, %or
  %conv43 = zext i32 %third to i64
  %or44 = or i64 %conv43, 864691128455135232
  %xor35 = xor i64 %call34, %or44
  %xor45 = xor i64 %xor35, %add33
  %add47 = add i64 %xor42, %xor38
  %call48 = call fastcc i64 @rol64(i64 noundef %xor38, i32 noundef 13) #4
  %xor49 = xor i64 %call48, %add47
  %call50 = call fastcc i64 @rol64(i64 noundef %add47, i32 noundef 32) #4
  %add51 = add i64 %xor45, %call39
  %call52 = call fastcc i64 @rol64(i64 noundef %xor45, i32 noundef 16) #4
  %xor53 = xor i64 %call52, %add51
  %add54 = add i64 %xor53, %call50
  %call55 = call fastcc i64 @rol64(i64 noundef %xor53, i32 noundef 21) #4
  %xor56 = xor i64 %add54, %call55
  %add57 = add i64 %add51, %xor49
  %call58 = call fastcc i64 @rol64(i64 noundef %xor49, i32 noundef 17) #4
  %xor59 = xor i64 %call58, %add57
  %call60 = call fastcc i64 @rol64(i64 noundef %add57, i32 noundef 32) #4
  %add64 = add i64 %xor59, %add54
  %call65 = call fastcc i64 @rol64(i64 noundef %xor59, i32 noundef 13) #4
  %xor66 = xor i64 %call65, %add64
  %call67 = call fastcc i64 @rol64(i64 noundef %add64, i32 noundef 32) #4
  %add68 = add i64 %call60, %xor56
  %call69 = call fastcc i64 @rol64(i64 noundef %xor56, i32 noundef 16) #4
  %xor70 = xor i64 %call69, %add68
  %add71 = add i64 %xor70, %call67
  %call72 = call fastcc i64 @rol64(i64 noundef %xor70, i32 noundef 21) #4
  %xor73 = xor i64 %add71, %call72
  %add74 = add i64 %xor66, %add68
  %call75 = call fastcc i64 @rol64(i64 noundef %xor66, i32 noundef 17) #4
  %xor76 = xor i64 %call75, %add74
  %call77 = call fastcc i64 @rol64(i64 noundef %add74, i32 noundef 32) #4
  %xor80 = xor i64 %add71, %or44
  %xor81 = xor i64 %call77, 255
  %add83 = add i64 %xor80, %xor76
  %call84 = call fastcc i64 @rol64(i64 noundef %xor76, i32 noundef 13) #4
  %xor85 = xor i64 %call84, %add83
  %call86 = call fastcc i64 @rol64(i64 noundef %add83, i32 noundef 32) #4
  %add87 = add i64 %xor81, %xor73
  %call88 = call fastcc i64 @rol64(i64 noundef %xor73, i32 noundef 16) #4
  %xor89 = xor i64 %call88, %add87
  %add90 = add i64 %xor89, %call86
  %call91 = call fastcc i64 @rol64(i64 noundef %xor89, i32 noundef 21) #4
  %xor92 = xor i64 %add90, %call91
  %add93 = add i64 %add87, %xor85
  %call94 = call fastcc i64 @rol64(i64 noundef %xor85, i32 noundef 17) #4
  %xor95 = xor i64 %call94, %add93
  %call96 = call fastcc i64 @rol64(i64 noundef %add93, i32 noundef 32) #4
  %add100 = add i64 %xor95, %add90
  %call101 = call fastcc i64 @rol64(i64 noundef %xor95, i32 noundef 13) #4
  %xor102 = xor i64 %call101, %add100
  %call103 = call fastcc i64 @rol64(i64 noundef %add100, i32 noundef 32) #4
  %add104 = add i64 %call96, %xor92
  %call105 = call fastcc i64 @rol64(i64 noundef %xor92, i32 noundef 16) #4
  %xor106 = xor i64 %call105, %add104
  %add107 = add i64 %xor106, %call103
  %call108 = call fastcc i64 @rol64(i64 noundef %xor106, i32 noundef 21) #4
  %xor109 = xor i64 %add107, %call108
  %add110 = add i64 %xor102, %add104
  %call111 = call fastcc i64 @rol64(i64 noundef %xor102, i32 noundef 17) #4
  %xor112 = xor i64 %call111, %add110
  %call113 = call fastcc i64 @rol64(i64 noundef %add110, i32 noundef 32) #4
  %add117 = add i64 %xor112, %add107
  %call118 = call fastcc i64 @rol64(i64 noundef %xor112, i32 noundef 13) #4
  %xor119 = xor i64 %call118, %add117
  %call120 = call fastcc i64 @rol64(i64 noundef %add117, i32 noundef 32) #4
  %add121 = add i64 %call113, %xor109
  %call122 = call fastcc i64 @rol64(i64 noundef %xor109, i32 noundef 16) #4
  %xor123 = xor i64 %call122, %add121
  %add124 = add i64 %xor123, %call120
  %call125 = call fastcc i64 @rol64(i64 noundef %xor123, i32 noundef 21) #4
  %xor126 = xor i64 %add124, %call125
  %add127 = add i64 %xor119, %add121
  %call128 = call fastcc i64 @rol64(i64 noundef %xor119, i32 noundef 17) #4
  %xor129 = xor i64 %call128, %add127
  %call130 = call fastcc i64 @rol64(i64 noundef %add127, i32 noundef 32) #4
  %add134 = add i64 %xor129, %add124
  %call135 = call fastcc i64 @rol64(i64 noundef %xor129, i32 noundef 13) #4
  %xor136 = xor i64 %call135, %add134
  %add138 = add i64 %call130, %xor126
  %call139 = call fastcc i64 @rol64(i64 noundef %xor126, i32 noundef 16) #4
  %xor140 = xor i64 %call139, %add138
  %call142 = call fastcc i64 @rol64(i64 noundef %xor140, i32 noundef 21) #4
  %add144 = add i64 %xor136, %add138
  %call145 = call fastcc i64 @rol64(i64 noundef %xor136, i32 noundef 17) #4
  %call147 = call fastcc i64 @rol64(i64 noundef %add144, i32 noundef 32) #4
  %xor146 = xor i64 %call142, %add144
  %xor150 = xor i64 %xor146, %call145
  %xor152 = xor i64 %xor150, %call147
  ret i64 %xor152
}

; Function Attrs: nofree noinline nounwind null_pointer_is_valid readonly
define dso_local i32 @__hsiphash_aligned(i8* noundef %data, i64 noundef %len, %struct.hsiphash_key_t* nocapture noundef readonly %key) local_unnamed_addr #0 {
entry:
  %add.ptr = getelementptr i8, i8* %data, i64 %len
  %rem = and i64 %len, 7
  %idx.neg = sub nsw i64 0, %rem
  %add.ptr1 = getelementptr i8, i8* %add.ptr, i64 %idx.neg
  %0 = trunc i64 %len to i8
  %conv = and i8 %0, 7
  %shl = shl i64 %len, 56
  %arrayidx = getelementptr %struct.hsiphash_key_t, %struct.hsiphash_key_t* %key, i64 0, i32 0, i64 1
  %1 = load i64, i64* %arrayidx, align 8
  %xor = xor i64 %1, 8387220255154660723
  %arrayidx4 = getelementptr inbounds %struct.hsiphash_key_t, %struct.hsiphash_key_t* %key, i64 0, i32 0, i64 0
  %2 = load i64, i64* %arrayidx4, align 8
  %xor5 = xor i64 %2, 7816392313619706465
  %xor8 = xor i64 %1, 7237128888997146477
  %xor11 = xor i64 %2, 8317987319222330741
  %cmp.not248 = icmp eq i8* %add.ptr1, %data
  br i1 %cmp.not248, label %for.end, label %for.body

for.body:                                         ; preds = %entry, %for.body
  %v3.0253 = phi i64 [ %xor22, %for.body ], [ %xor, %entry ]
  %v2.0252 = phi i64 [ %call26, %for.body ], [ %xor5, %entry ]
  %v1.0251 = phi i64 [ %xor25, %for.body ], [ %xor8, %entry ]
  %v0.0250 = phi i64 [ %xor27, %for.body ], [ %xor11, %entry ]
  %data.addr.0249 = phi i8* [ %add.ptr28, %for.body ], [ %data, %entry ]
  %3 = bitcast i8* %data.addr.0249 to i64*
  %4 = load i64, i64* %3, align 8
  %xor13 = xor i64 %4, %v3.0253
  %add = add i64 %v1.0251, %v0.0250
  %call14 = call fastcc i64 @rol64(i64 noundef %v1.0251, i32 noundef 13) #4
  %xor15 = xor i64 %call14, %add
  %call16 = call fastcc i64 @rol64(i64 noundef %add, i32 noundef 32) #4
  %add17 = add i64 %xor13, %v2.0252
  %call18 = call fastcc i64 @rol64(i64 noundef %xor13, i32 noundef 16) #4
  %xor19 = xor i64 %call18, %add17
  %add20 = add i64 %xor19, %call16
  %call21 = call fastcc i64 @rol64(i64 noundef %xor19, i32 noundef 21) #4
  %xor22 = xor i64 %add20, %call21
  %add23 = add i64 %add17, %xor15
  %call24 = call fastcc i64 @rol64(i64 noundef %xor15, i32 noundef 17) #4
  %xor25 = xor i64 %call24, %add23
  %call26 = call fastcc i64 @rol64(i64 noundef %add23, i32 noundef 32) #4
  %xor27 = xor i64 %add20, %4
  %add.ptr28 = getelementptr i8, i8* %data.addr.0249, i64 8
  %cmp.not = icmp eq i8* %add.ptr28, %add.ptr1
  br i1 %cmp.not, label %for.end, label %for.body

for.end:                                          ; preds = %for.body, %entry
  %data.addr.0.lcssa = phi i8* [ %data, %entry ], [ %add.ptr1, %for.body ]
  %v0.0.lcssa = phi i64 [ %xor11, %entry ], [ %xor27, %for.body ]
  %v1.0.lcssa = phi i64 [ %xor8, %entry ], [ %xor25, %for.body ]
  %v2.0.lcssa = phi i64 [ %xor5, %entry ], [ %call26, %for.body ]
  %v3.0.lcssa = phi i64 [ %xor, %entry ], [ %xor22, %for.body ]
  %tobool.not = icmp eq i8 %conv, 0
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %for.end
  %call29 = call fastcc i64 @load_unaligned_zeropad(i8* noundef %data.addr.0.lcssa) #4
  %5 = shl nuw nsw i8 %conv, 3
  %sh_prom = zext i8 %5 to i64
  %shl31 = shl nsw i64 -1, %sh_prom
  %neg = xor i64 %shl31, -1
  %and32 = and i64 %call29, %neg
  %or = or i64 %and32, %shl
  br label %if.end

if.end:                                           ; preds = %if.then, %for.end
  %b.0 = phi i64 [ %or, %if.then ], [ %shl, %for.end ]
  %xor33 = xor i64 %b.0, %v3.0.lcssa
  %add35 = add i64 %v1.0.lcssa, %v0.0.lcssa
  %call36 = call fastcc i64 @rol64(i64 noundef %v1.0.lcssa, i32 noundef 13) #4
  %xor37 = xor i64 %call36, %add35
  %call38 = call fastcc i64 @rol64(i64 noundef %add35, i32 noundef 32) #4
  %add39 = add i64 %xor33, %v2.0.lcssa
  %call40 = call fastcc i64 @rol64(i64 noundef %xor33, i32 noundef 16) #4
  %xor41 = xor i64 %call40, %add39
  %add42 = add i64 %xor41, %call38
  %call43 = call fastcc i64 @rol64(i64 noundef %xor41, i32 noundef 21) #4
  %xor44 = xor i64 %add42, %call43
  %add45 = add i64 %add39, %xor37
  %call46 = call fastcc i64 @rol64(i64 noundef %xor37, i32 noundef 17) #4
  %xor47 = xor i64 %call46, %add45
  %call48 = call fastcc i64 @rol64(i64 noundef %add45, i32 noundef 32) #4
  %xor51 = xor i64 %add42, %b.0
  %xor52 = xor i64 %call48, 255
  %add54 = add i64 %xor51, %xor47
  %call55 = call fastcc i64 @rol64(i64 noundef %xor47, i32 noundef 13) #4
  %xor56 = xor i64 %call55, %add54
  %call57 = call fastcc i64 @rol64(i64 noundef %add54, i32 noundef 32) #4
  %add58 = add i64 %xor52, %xor44
  %call59 = call fastcc i64 @rol64(i64 noundef %xor44, i32 noundef 16) #4
  %xor60 = xor i64 %call59, %add58
  %add61 = add i64 %xor60, %call57
  %call62 = call fastcc i64 @rol64(i64 noundef %xor60, i32 noundef 21) #4
  %xor63 = xor i64 %add61, %call62
  %add64 = add i64 %add58, %xor56
  %call65 = call fastcc i64 @rol64(i64 noundef %xor56, i32 noundef 17) #4
  %xor66 = xor i64 %call65, %add64
  %call67 = call fastcc i64 @rol64(i64 noundef %add64, i32 noundef 32) #4
  %add71 = add i64 %xor66, %add61
  %call72 = call fastcc i64 @rol64(i64 noundef %xor66, i32 noundef 13) #4
  %xor73 = xor i64 %call72, %add71
  %call74 = call fastcc i64 @rol64(i64 noundef %add71, i32 noundef 32) #4
  %add75 = add i64 %call67, %xor63
  %call76 = call fastcc i64 @rol64(i64 noundef %xor63, i32 noundef 16) #4
  %xor77 = xor i64 %call76, %add75
  %add78 = add i64 %xor77, %call74
  %call79 = call fastcc i64 @rol64(i64 noundef %xor77, i32 noundef 21) #4
  %xor80 = xor i64 %add78, %call79
  %add81 = add i64 %xor73, %add75
  %call82 = call fastcc i64 @rol64(i64 noundef %xor73, i32 noundef 17) #4
  %xor83 = xor i64 %call82, %add81
  %call84 = call fastcc i64 @rol64(i64 noundef %add81, i32 noundef 32) #4
  %add88 = add i64 %xor83, %add78
  %call89 = call fastcc i64 @rol64(i64 noundef %xor83, i32 noundef 13) #4
  %xor90 = xor i64 %call89, %add88
  %add92 = add i64 %call84, %xor80
  %call93 = call fastcc i64 @rol64(i64 noundef %xor80, i32 noundef 16) #4
  %xor94 = xor i64 %call93, %add92
  %call96 = call fastcc i64 @rol64(i64 noundef %xor94, i32 noundef 21) #4
  %add98 = add i64 %xor90, %add92
  %call99 = call fastcc i64 @rol64(i64 noundef %xor90, i32 noundef 17) #4
  %call101 = call fastcc i64 @rol64(i64 noundef %add98, i32 noundef 32) #4
  %xor100 = xor i64 %call96, %add98
  %xor104 = xor i64 %xor100, %call99
  %xor106 = xor i64 %xor104, %call101
  %conv107 = trunc i64 %xor106 to i32
  ret i32 %conv107
}

; Function Attrs: mustprogress nofree noinline nosync nounwind null_pointer_is_valid readonly willreturn
define dso_local i32 @hsiphash_1u32(i32 noundef %first, %struct.hsiphash_key_t* nocapture noundef readonly %key) local_unnamed_addr #2 {
entry:
  %arrayidx = getelementptr %struct.hsiphash_key_t, %struct.hsiphash_key_t* %key, i64 0, i32 0, i64 1
  %0 = load i64, i64* %arrayidx, align 8
  %arrayidx3 = getelementptr inbounds %struct.hsiphash_key_t, %struct.hsiphash_key_t* %key, i64 0, i32 0, i64 0
  %1 = load i64, i64* %arrayidx3, align 8
  %xor4 = xor i64 %1, 7816392313619706465
  %xor7 = xor i64 %0, 7237128888997146477
  %xor10 = xor i64 %1, 8317987319222330741
  %conv = zext i32 %first to i64
  %or = or i64 %conv, 288230376151711744
  %2 = xor i64 %0, %conv
  %xor11 = xor i64 %2, 8098989879002948979
  %add = add i64 %xor10, %xor7
  %call = call fastcc i64 @rol64(i64 noundef %xor7, i32 noundef 13) #4
  %xor12 = xor i64 %add, %call
  %call13 = call fastcc i64 @rol64(i64 noundef %add, i32 noundef 32) #4
  %add14 = add i64 %xor4, %xor11
  %call15 = call fastcc i64 @rol64(i64 noundef %xor11, i32 noundef 16) #4
  %xor16 = xor i64 %call15, %add14
  %add17 = add i64 %xor16, %call13
  %call18 = call fastcc i64 @rol64(i64 noundef %xor16, i32 noundef 21) #4
  %xor19 = xor i64 %add17, %call18
  %add20 = add i64 %xor12, %add14
  %call21 = call fastcc i64 @rol64(i64 noundef %xor12, i32 noundef 17) #4
  %xor22 = xor i64 %call21, %add20
  %call23 = call fastcc i64 @rol64(i64 noundef %add20, i32 noundef 32) #4
  %xor24 = xor i64 %add17, %or
  %xor25 = xor i64 %call23, 255
  %add27 = add i64 %xor24, %xor22
  %call28 = call fastcc i64 @rol64(i64 noundef %xor22, i32 noundef 13) #4
  %xor29 = xor i64 %call28, %add27
  %call30 = call fastcc i64 @rol64(i64 noundef %add27, i32 noundef 32) #4
  %add31 = add i64 %xor25, %xor19
  %call32 = call fastcc i64 @rol64(i64 noundef %xor19, i32 noundef 16) #4
  %xor33 = xor i64 %call32, %add31
  %add34 = add i64 %xor33, %call30
  %call35 = call fastcc i64 @rol64(i64 noundef %xor33, i32 noundef 21) #4
  %xor36 = xor i64 %add34, %call35
  %add37 = add i64 %add31, %xor29
  %call38 = call fastcc i64 @rol64(i64 noundef %xor29, i32 noundef 17) #4
  %xor39 = xor i64 %call38, %add37
  %call40 = call fastcc i64 @rol64(i64 noundef %add37, i32 noundef 32) #4
  %add44 = add i64 %xor39, %add34
  %call45 = call fastcc i64 @rol64(i64 noundef %xor39, i32 noundef 13) #4
  %xor46 = xor i64 %call45, %add44
  %call47 = call fastcc i64 @rol64(i64 noundef %add44, i32 noundef 32) #4
  %add48 = add i64 %call40, %xor36
  %call49 = call fastcc i64 @rol64(i64 noundef %xor36, i32 noundef 16) #4
  %xor50 = xor i64 %call49, %add48
  %add51 = add i64 %xor50, %call47
  %call52 = call fastcc i64 @rol64(i64 noundef %xor50, i32 noundef 21) #4
  %xor53 = xor i64 %add51, %call52
  %add54 = add i64 %xor46, %add48
  %call55 = call fastcc i64 @rol64(i64 noundef %xor46, i32 noundef 17) #4
  %xor56 = xor i64 %call55, %add54
  %call57 = call fastcc i64 @rol64(i64 noundef %add54, i32 noundef 32) #4
  %add61 = add i64 %xor56, %add51
  %call62 = call fastcc i64 @rol64(i64 noundef %xor56, i32 noundef 13) #4
  %xor63 = xor i64 %call62, %add61
  %add65 = add i64 %call57, %xor53
  %call66 = call fastcc i64 @rol64(i64 noundef %xor53, i32 noundef 16) #4
  %xor67 = xor i64 %call66, %add65
  %call69 = call fastcc i64 @rol64(i64 noundef %xor67, i32 noundef 21) #4
  %add71 = add i64 %xor63, %add65
  %call72 = call fastcc i64 @rol64(i64 noundef %xor63, i32 noundef 17) #4
  %call74 = call fastcc i64 @rol64(i64 noundef %add71, i32 noundef 32) #4
  %xor73 = xor i64 %call69, %add71
  %xor77 = xor i64 %xor73, %call72
  %xor79 = xor i64 %xor77, %call74
  %conv80 = trunc i64 %xor79 to i32
  ret i32 %conv80
}

; Function Attrs: mustprogress nofree noinline nosync nounwind null_pointer_is_valid readonly willreturn
define dso_local i32 @hsiphash_2u32(i32 noundef %first, i32 noundef %second, %struct.hsiphash_key_t* nocapture noundef readonly %key) local_unnamed_addr #2 {
entry:
  %conv = zext i32 %second to i64
  %shl = shl nuw i64 %conv, 32
  %conv1 = zext i32 %first to i64
  %or = or i64 %shl, %conv1
  %arrayidx = getelementptr %struct.hsiphash_key_t, %struct.hsiphash_key_t* %key, i64 0, i32 0, i64 1
  %0 = load i64, i64* %arrayidx, align 8
  %arrayidx4 = getelementptr inbounds %struct.hsiphash_key_t, %struct.hsiphash_key_t* %key, i64 0, i32 0, i64 0
  %1 = load i64, i64* %arrayidx4, align 8
  %xor5 = xor i64 %1, 7816392313619706465
  %xor8 = xor i64 %0, 7237128888997146477
  %xor11 = xor i64 %1, 8317987319222330741
  %2 = xor i64 %or, %0
  %xor12 = xor i64 %2, 8387220255154660723
  %add = add i64 %xor11, %xor8
  %call = call fastcc i64 @rol64(i64 noundef %xor8, i32 noundef 13) #4
  %xor13 = xor i64 %add, %call
  %call14 = call fastcc i64 @rol64(i64 noundef %add, i32 noundef 32) #4
  %add15 = add i64 %xor5, %xor12
  %call16 = call fastcc i64 @rol64(i64 noundef %xor12, i32 noundef 16) #4
  %xor17 = xor i64 %call16, %add15
  %add18 = add i64 %xor17, %call14
  %call19 = call fastcc i64 @rol64(i64 noundef %xor17, i32 noundef 21) #4
  %add21 = add i64 %xor13, %add15
  %call22 = call fastcc i64 @rol64(i64 noundef %xor13, i32 noundef 17) #4
  %xor23 = xor i64 %call22, %add21
  %call24 = call fastcc i64 @rol64(i64 noundef %add21, i32 noundef 32) #4
  %xor25 = xor i64 %add18, %or
  %3 = xor i64 %call19, %add18
  %xor26 = xor i64 %3, 576460752303423488
  %add28 = add i64 %xor25, %xor23
  %call29 = call fastcc i64 @rol64(i64 noundef %xor23, i32 noundef 13) #4
  %xor30 = xor i64 %call29, %add28
  %call31 = call fastcc i64 @rol64(i64 noundef %add28, i32 noundef 32) #4
  %add32 = add i64 %call24, %xor26
  %call33 = call fastcc i64 @rol64(i64 noundef %xor26, i32 noundef 16) #4
  %xor34 = xor i64 %call33, %add32
  %add35 = add i64 %xor34, %call31
  %call36 = call fastcc i64 @rol64(i64 noundef %xor34, i32 noundef 21) #4
  %xor37 = xor i64 %add35, %call36
  %add38 = add i64 %xor30, %add32
  %call39 = call fastcc i64 @rol64(i64 noundef %xor30, i32 noundef 17) #4
  %xor40 = xor i64 %call39, %add38
  %call41 = call fastcc i64 @rol64(i64 noundef %add38, i32 noundef 32) #4
  %xor44 = xor i64 %add35, 576460752303423488
  %xor45 = xor i64 %call41, 255
  %add47 = add i64 %xor44, %xor40
  %call48 = call fastcc i64 @rol64(i64 noundef %xor40, i32 noundef 13) #4
  %xor49 = xor i64 %call48, %add47
  %call50 = call fastcc i64 @rol64(i64 noundef %add47, i32 noundef 32) #4
  %add51 = add i64 %xor45, %xor37
  %call52 = call fastcc i64 @rol64(i64 noundef %xor37, i32 noundef 16) #4
  %xor53 = xor i64 %call52, %add51
  %add54 = add i64 %xor53, %call50
  %call55 = call fastcc i64 @rol64(i64 noundef %xor53, i32 noundef 21) #4
  %xor56 = xor i64 %add54, %call55
  %add57 = add i64 %add51, %xor49
  %call58 = call fastcc i64 @rol64(i64 noundef %xor49, i32 noundef 17) #4
  %xor59 = xor i64 %call58, %add57
  %call60 = call fastcc i64 @rol64(i64 noundef %add57, i32 noundef 32) #4
  %add64 = add i64 %xor59, %add54
  %call65 = call fastcc i64 @rol64(i64 noundef %xor59, i32 noundef 13) #4
  %xor66 = xor i64 %call65, %add64
  %call67 = call fastcc i64 @rol64(i64 noundef %add64, i32 noundef 32) #4
  %add68 = add i64 %call60, %xor56
  %call69 = call fastcc i64 @rol64(i64 noundef %xor56, i32 noundef 16) #4
  %xor70 = xor i64 %call69, %add68
  %add71 = add i64 %xor70, %call67
  %call72 = call fastcc i64 @rol64(i64 noundef %xor70, i32 noundef 21) #4
  %xor73 = xor i64 %add71, %call72
  %add74 = add i64 %xor66, %add68
  %call75 = call fastcc i64 @rol64(i64 noundef %xor66, i32 noundef 17) #4
  %xor76 = xor i64 %call75, %add74
  %call77 = call fastcc i64 @rol64(i64 noundef %add74, i32 noundef 32) #4
  %add81 = add i64 %xor76, %add71
  %call82 = call fastcc i64 @rol64(i64 noundef %xor76, i32 noundef 13) #4
  %xor83 = xor i64 %call82, %add81
  %add85 = add i64 %call77, %xor73
  %call86 = call fastcc i64 @rol64(i64 noundef %xor73, i32 noundef 16) #4
  %xor87 = xor i64 %call86, %add85
  %call89 = call fastcc i64 @rol64(i64 noundef %xor87, i32 noundef 21) #4
  %add91 = add i64 %xor83, %add85
  %call92 = call fastcc i64 @rol64(i64 noundef %xor83, i32 noundef 17) #4
  %call94 = call fastcc i64 @rol64(i64 noundef %add91, i32 noundef 32) #4
  %xor93 = xor i64 %call89, %add91
  %xor97 = xor i64 %xor93, %call92
  %xor99 = xor i64 %xor97, %call94
  %conv100 = trunc i64 %xor99 to i32
  ret i32 %conv100
}

; Function Attrs: mustprogress nofree noinline nosync nounwind null_pointer_is_valid readonly willreturn
define dso_local i32 @hsiphash_3u32(i32 noundef %first, i32 noundef %second, i32 noundef %third, %struct.hsiphash_key_t* nocapture noundef readonly %key) local_unnamed_addr #2 {
entry:
  %conv = zext i32 %second to i64
  %shl = shl nuw i64 %conv, 32
  %conv1 = zext i32 %first to i64
  %or = or i64 %shl, %conv1
  %arrayidx = getelementptr %struct.hsiphash_key_t, %struct.hsiphash_key_t* %key, i64 0, i32 0, i64 1
  %0 = load i64, i64* %arrayidx, align 8
  %arrayidx4 = getelementptr inbounds %struct.hsiphash_key_t, %struct.hsiphash_key_t* %key, i64 0, i32 0, i64 0
  %1 = load i64, i64* %arrayidx4, align 8
  %xor5 = xor i64 %1, 7816392313619706465
  %xor8 = xor i64 %0, 7237128888997146477
  %xor11 = xor i64 %1, 8317987319222330741
  %2 = xor i64 %or, %0
  %xor12 = xor i64 %2, 8387220255154660723
  %add = add i64 %xor11, %xor8
  %call = call fastcc i64 @rol64(i64 noundef %xor8, i32 noundef 13) #4
  %xor13 = xor i64 %add, %call
  %call14 = call fastcc i64 @rol64(i64 noundef %add, i32 noundef 32) #4
  %add15 = add i64 %xor5, %xor12
  %call16 = call fastcc i64 @rol64(i64 noundef %xor12, i32 noundef 16) #4
  %xor17 = xor i64 %call16, %add15
  %add18 = add i64 %xor17, %call14
  %call19 = call fastcc i64 @rol64(i64 noundef %xor17, i32 noundef 21) #4
  %add21 = add i64 %xor13, %add15
  %call22 = call fastcc i64 @rol64(i64 noundef %xor13, i32 noundef 17) #4
  %xor23 = xor i64 %call22, %add21
  %call24 = call fastcc i64 @rol64(i64 noundef %add21, i32 noundef 32) #4
  %xor25 = xor i64 %add18, %or
  %conv26 = zext i32 %third to i64
  %or27 = or i64 %conv26, 864691128455135232
  %xor20 = xor i64 %call19, %or27
  %xor28 = xor i64 %xor20, %add18
  %add30 = add i64 %xor25, %xor23
  %call31 = call fastcc i64 @rol64(i64 noundef %xor23, i32 noundef 13) #4
  %xor32 = xor i64 %call31, %add30
  %call33 = call fastcc i64 @rol64(i64 noundef %add30, i32 noundef 32) #4
  %add34 = add i64 %xor28, %call24
  %call35 = call fastcc i64 @rol64(i64 noundef %xor28, i32 noundef 16) #4
  %xor36 = xor i64 %call35, %add34
  %add37 = add i64 %xor36, %call33
  %call38 = call fastcc i64 @rol64(i64 noundef %xor36, i32 noundef 21) #4
  %xor39 = xor i64 %add37, %call38
  %add40 = add i64 %add34, %xor32
  %call41 = call fastcc i64 @rol64(i64 noundef %xor32, i32 noundef 17) #4
  %xor42 = xor i64 %call41, %add40
  %call43 = call fastcc i64 @rol64(i64 noundef %add40, i32 noundef 32) #4
  %xor46 = xor i64 %add37, %or27
  %xor47 = xor i64 %call43, 255
  %add49 = add i64 %xor46, %xor42
  %call50 = call fastcc i64 @rol64(i64 noundef %xor42, i32 noundef 13) #4
  %xor51 = xor i64 %call50, %add49
  %call52 = call fastcc i64 @rol64(i64 noundef %add49, i32 noundef 32) #4
  %add53 = add i64 %xor47, %xor39
  %call54 = call fastcc i64 @rol64(i64 noundef %xor39, i32 noundef 16) #4
  %xor55 = xor i64 %call54, %add53
  %add56 = add i64 %xor55, %call52
  %call57 = call fastcc i64 @rol64(i64 noundef %xor55, i32 noundef 21) #4
  %xor58 = xor i64 %add56, %call57
  %add59 = add i64 %add53, %xor51
  %call60 = call fastcc i64 @rol64(i64 noundef %xor51, i32 noundef 17) #4
  %xor61 = xor i64 %call60, %add59
  %call62 = call fastcc i64 @rol64(i64 noundef %add59, i32 noundef 32) #4
  %add66 = add i64 %xor61, %add56
  %call67 = call fastcc i64 @rol64(i64 noundef %xor61, i32 noundef 13) #4
  %xor68 = xor i64 %call67, %add66
  %call69 = call fastcc i64 @rol64(i64 noundef %add66, i32 noundef 32) #4
  %add70 = add i64 %call62, %xor58
  %call71 = call fastcc i64 @rol64(i64 noundef %xor58, i32 noundef 16) #4
  %xor72 = xor i64 %call71, %add70
  %add73 = add i64 %xor72, %call69
  %call74 = call fastcc i64 @rol64(i64 noundef %xor72, i32 noundef 21) #4
  %xor75 = xor i64 %add73, %call74
  %add76 = add i64 %xor68, %add70
  %call77 = call fastcc i64 @rol64(i64 noundef %xor68, i32 noundef 17) #4
  %xor78 = xor i64 %call77, %add76
  %call79 = call fastcc i64 @rol64(i64 noundef %add76, i32 noundef 32) #4
  %add83 = add i64 %xor78, %add73
  %call84 = call fastcc i64 @rol64(i64 noundef %xor78, i32 noundef 13) #4
  %xor85 = xor i64 %call84, %add83
  %add87 = add i64 %call79, %xor75
  %call88 = call fastcc i64 @rol64(i64 noundef %xor75, i32 noundef 16) #4
  %xor89 = xor i64 %call88, %add87
  %call91 = call fastcc i64 @rol64(i64 noundef %xor89, i32 noundef 21) #4
  %add93 = add i64 %xor85, %add87
  %call94 = call fastcc i64 @rol64(i64 noundef %xor85, i32 noundef 17) #4
  %call96 = call fastcc i64 @rol64(i64 noundef %add93, i32 noundef 32) #4
  %xor95 = xor i64 %call91, %add93
  %xor99 = xor i64 %xor95, %call94
  %xor101 = xor i64 %xor99, %call96
  %conv102 = trunc i64 %xor101 to i32
  ret i32 %conv102
}

; Function Attrs: mustprogress nofree noinline nosync nounwind null_pointer_is_valid readonly willreturn
define dso_local i32 @hsiphash_4u32(i32 noundef %first, i32 noundef %second, i32 noundef %third, i32 noundef %forth, %struct.hsiphash_key_t* nocapture noundef readonly %key) local_unnamed_addr #2 {
entry:
  %conv = zext i32 %second to i64
  %shl = shl nuw i64 %conv, 32
  %conv1 = zext i32 %first to i64
  %or = or i64 %shl, %conv1
  %arrayidx = getelementptr %struct.hsiphash_key_t, %struct.hsiphash_key_t* %key, i64 0, i32 0, i64 1
  %0 = load i64, i64* %arrayidx, align 8
  %arrayidx4 = getelementptr inbounds %struct.hsiphash_key_t, %struct.hsiphash_key_t* %key, i64 0, i32 0, i64 0
  %1 = load i64, i64* %arrayidx4, align 8
  %xor5 = xor i64 %1, 7816392313619706465
  %xor8 = xor i64 %0, 7237128888997146477
  %xor11 = xor i64 %1, 8317987319222330741
  %2 = xor i64 %or, %0
  %xor12 = xor i64 %2, 8387220255154660723
  %add = add i64 %xor11, %xor8
  %call = call fastcc i64 @rol64(i64 noundef %xor8, i32 noundef 13) #4
  %xor13 = xor i64 %add, %call
  %call14 = call fastcc i64 @rol64(i64 noundef %add, i32 noundef 32) #4
  %add15 = add i64 %xor5, %xor12
  %call16 = call fastcc i64 @rol64(i64 noundef %xor12, i32 noundef 16) #4
  %xor17 = xor i64 %call16, %add15
  %add18 = add i64 %xor17, %call14
  %call19 = call fastcc i64 @rol64(i64 noundef %xor17, i32 noundef 21) #4
  %add21 = add i64 %xor13, %add15
  %call22 = call fastcc i64 @rol64(i64 noundef %xor13, i32 noundef 17) #4
  %xor23 = xor i64 %call22, %add21
  %call24 = call fastcc i64 @rol64(i64 noundef %add21, i32 noundef 32) #4
  %xor25 = xor i64 %add18, %or
  %conv26 = zext i32 %forth to i64
  %shl27 = shl nuw i64 %conv26, 32
  %conv28 = zext i32 %third to i64
  %or29 = or i64 %shl27, %conv28
  %xor20 = xor i64 %call19, %or29
  %xor30 = xor i64 %xor20, %add18
  %add32 = add i64 %xor25, %xor23
  %call33 = call fastcc i64 @rol64(i64 noundef %xor23, i32 noundef 13) #4
  %xor34 = xor i64 %call33, %add32
  %call35 = call fastcc i64 @rol64(i64 noundef %add32, i32 noundef 32) #4
  %add36 = add i64 %xor30, %call24
  %call37 = call fastcc i64 @rol64(i64 noundef %xor30, i32 noundef 16) #4
  %xor38 = xor i64 %call37, %add36
  %add39 = add i64 %xor38, %call35
  %call40 = call fastcc i64 @rol64(i64 noundef %xor38, i32 noundef 21) #4
  %add42 = add i64 %add36, %xor34
  %call43 = call fastcc i64 @rol64(i64 noundef %xor34, i32 noundef 17) #4
  %xor44 = xor i64 %call43, %add42
  %call45 = call fastcc i64 @rol64(i64 noundef %add42, i32 noundef 32) #4
  %xor48 = xor i64 %add39, %or29
  %3 = xor i64 %call40, %add39
  %xor49 = xor i64 %3, 1152921504606846976
  %add51 = add i64 %xor48, %xor44
  %call52 = call fastcc i64 @rol64(i64 noundef %xor44, i32 noundef 13) #4
  %xor53 = xor i64 %call52, %add51
  %call54 = call fastcc i64 @rol64(i64 noundef %add51, i32 noundef 32) #4
  %add55 = add i64 %call45, %xor49
  %call56 = call fastcc i64 @rol64(i64 noundef %xor49, i32 noundef 16) #4
  %xor57 = xor i64 %call56, %add55
  %add58 = add i64 %xor57, %call54
  %call59 = call fastcc i64 @rol64(i64 noundef %xor57, i32 noundef 21) #4
  %xor60 = xor i64 %add58, %call59
  %add61 = add i64 %xor53, %add55
  %call62 = call fastcc i64 @rol64(i64 noundef %xor53, i32 noundef 17) #4
  %xor63 = xor i64 %call62, %add61
  %call64 = call fastcc i64 @rol64(i64 noundef %add61, i32 noundef 32) #4
  %xor67 = xor i64 %add58, 1152921504606846976
  %xor68 = xor i64 %call64, 255
  %add70 = add i64 %xor67, %xor63
  %call71 = call fastcc i64 @rol64(i64 noundef %xor63, i32 noundef 13) #4
  %xor72 = xor i64 %call71, %add70
  %call73 = call fastcc i64 @rol64(i64 noundef %add70, i32 noundef 32) #4
  %add74 = add i64 %xor68, %xor60
  %call75 = call fastcc i64 @rol64(i64 noundef %xor60, i32 noundef 16) #4
  %xor76 = xor i64 %call75, %add74
  %add77 = add i64 %xor76, %call73
  %call78 = call fastcc i64 @rol64(i64 noundef %xor76, i32 noundef 21) #4
  %xor79 = xor i64 %add77, %call78
  %add80 = add i64 %add74, %xor72
  %call81 = call fastcc i64 @rol64(i64 noundef %xor72, i32 noundef 17) #4
  %xor82 = xor i64 %call81, %add80
  %call83 = call fastcc i64 @rol64(i64 noundef %add80, i32 noundef 32) #4
  %add87 = add i64 %xor82, %add77
  %call88 = call fastcc i64 @rol64(i64 noundef %xor82, i32 noundef 13) #4
  %xor89 = xor i64 %call88, %add87
  %call90 = call fastcc i64 @rol64(i64 noundef %add87, i32 noundef 32) #4
  %add91 = add i64 %call83, %xor79
  %call92 = call fastcc i64 @rol64(i64 noundef %xor79, i32 noundef 16) #4
  %xor93 = xor i64 %call92, %add91
  %add94 = add i64 %xor93, %call90
  %call95 = call fastcc i64 @rol64(i64 noundef %xor93, i32 noundef 21) #4
  %xor96 = xor i64 %add94, %call95
  %add97 = add i64 %xor89, %add91
  %call98 = call fastcc i64 @rol64(i64 noundef %xor89, i32 noundef 17) #4
  %xor99 = xor i64 %call98, %add97
  %call100 = call fastcc i64 @rol64(i64 noundef %add97, i32 noundef 32) #4
  %add104 = add i64 %xor99, %add94
  %call105 = call fastcc i64 @rol64(i64 noundef %xor99, i32 noundef 13) #4
  %xor106 = xor i64 %call105, %add104
  %add108 = add i64 %call100, %xor96
  %call109 = call fastcc i64 @rol64(i64 noundef %xor96, i32 noundef 16) #4
  %xor110 = xor i64 %call109, %add108
  %call112 = call fastcc i64 @rol64(i64 noundef %xor110, i32 noundef 21) #4
  %add114 = add i64 %xor106, %add108
  %call115 = call fastcc i64 @rol64(i64 noundef %xor106, i32 noundef 17) #4
  %call117 = call fastcc i64 @rol64(i64 noundef %add114, i32 noundef 32) #4
  %xor116 = xor i64 %call112, %add114
  %xor120 = xor i64 %xor116, %call115
  %xor122 = xor i64 %xor120, %call117
  %conv123 = trunc i64 %xor122 to i32
  ret i32 %conv123
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i64 @llvm.fshl.i64(i64, i64, i64) #3

attributes #0 = { nofree noinline nounwind null_pointer_is_valid readonly "disable-tail-calls"="true" "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-builtins" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+v8a,-aes,-crypto,-fp-armv8,-neon,-sha2" "warn-stack-size"="2048" }
attributes #1 = { mustprogress nofree noinline nosync nounwind null_pointer_is_valid readnone willreturn "disable-tail-calls"="true" "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-builtins" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+v8a,-aes,-crypto,-fp-armv8,-neon,-sha2" "warn-stack-size"="2048" }
attributes #2 = { mustprogress nofree noinline nosync nounwind null_pointer_is_valid readonly willreturn "disable-tail-calls"="true" "frame-pointer"="non-leaf" "min-legal-vector-width"="0" "no-builtins" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+v8a,-aes,-crypto,-fp-armv8,-neon,-sha2" "warn-stack-size"="2048" }
attributes #3 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #4 = { nobuiltin "no-builtins" }
attributes #5 = { nounwind readonly }

!llvm.module.flags = !{!0, !1, !2, !3, !4, !5}
!llvm.ident = !{!6}

!0 = !{i32 1, !"wchar_size", i32 2}
!1 = !{i32 1, !"branch-target-enforcement", i32 0}
!2 = !{i32 1, !"sign-return-address", i32 0}
!3 = !{i32 1, !"sign-return-address-all", i32 0}
!4 = !{i32 1, !"sign-return-address-with-bkey", i32 0}
!5 = !{i32 7, !"frame-pointer", i32 1}
!6 = !{!"clang version 14.0.0"}
!7 = !{i64 2525627, i64 2525647, i64 2525655, i64 2525688, i64 2525703, i64 2525728, i64 2525747, i64 2525770, i64 2525815, i64 2525870, i64 2525881, i64 2150900305, i64 2150900346, i64 2150900368, i64 2150900414}
