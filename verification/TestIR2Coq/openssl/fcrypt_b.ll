; ModuleID = 'crypto/des/fcrypt_b.c'
source_filename = "crypto/des/fcrypt_b.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.DES_ks = type { [16 x %union.anon] }
%union.anon = type { [2 x i32] }

@DES_SPtrans = external local_unnamed_addr constant [8 x [64 x i32]], align 16

; Function Attrs: noinline nounwind uwtable
define void @fcrypt_body(i32* nocapture noundef writeonly %out, %struct.DES_ks* noundef readonly %ks, i32 noundef %Eswap0, i32 noundef %Eswap1) local_unnamed_addr #0 {
entry:
  %0 = getelementptr %struct.DES_ks, %struct.DES_ks* %ks, i64 0, i32 0, i64 0, i32 0, i64 0
  %1 = load i32, i32* %0, align 4, !tbaa !4
  %arrayidx6 = getelementptr inbounds %struct.DES_ks, %struct.DES_ks* %ks, i64 0, i32 0, i64 0, i32 0, i64 1
  %2 = load i32, i32* %arrayidx6, align 4, !tbaa !4
  %arrayidx56 = getelementptr inbounds %struct.DES_ks, %struct.DES_ks* %ks, i64 0, i32 0, i64 0, i32 0, i64 2
  %arrayidx61 = getelementptr inbounds %struct.DES_ks, %struct.DES_ks* %ks, i64 0, i32 0, i64 0, i32 0, i64 3
  %arrayidx113 = getelementptr inbounds %struct.DES_ks, %struct.DES_ks* %ks, i64 0, i32 0, i64 0, i32 0, i64 4
  %arrayidx118 = getelementptr inbounds %struct.DES_ks, %struct.DES_ks* %ks, i64 0, i32 0, i64 0, i32 0, i64 5
  %arrayidx170 = getelementptr inbounds %struct.DES_ks, %struct.DES_ks* %ks, i64 0, i32 0, i64 0, i32 0, i64 6
  %arrayidx175 = getelementptr inbounds %struct.DES_ks, %struct.DES_ks* %ks, i64 0, i32 0, i64 0, i32 0, i64 7
  %arrayidx227 = getelementptr inbounds %struct.DES_ks, %struct.DES_ks* %ks, i64 0, i32 0, i64 0, i32 0, i64 8
  %arrayidx232 = getelementptr inbounds %struct.DES_ks, %struct.DES_ks* %ks, i64 0, i32 0, i64 0, i32 0, i64 9
  %arrayidx284 = getelementptr inbounds %struct.DES_ks, %struct.DES_ks* %ks, i64 0, i32 0, i64 0, i32 0, i64 10
  %arrayidx289 = getelementptr inbounds %struct.DES_ks, %struct.DES_ks* %ks, i64 0, i32 0, i64 0, i32 0, i64 11
  %arrayidx341 = getelementptr inbounds %struct.DES_ks, %struct.DES_ks* %ks, i64 0, i32 0, i64 0, i32 0, i64 12
  %arrayidx346 = getelementptr inbounds %struct.DES_ks, %struct.DES_ks* %ks, i64 0, i32 0, i64 0, i32 0, i64 13
  %arrayidx398 = getelementptr inbounds %struct.DES_ks, %struct.DES_ks* %ks, i64 0, i32 0, i64 0, i32 0, i64 14
  %arrayidx403 = getelementptr inbounds %struct.DES_ks, %struct.DES_ks* %ks, i64 0, i32 0, i64 0, i32 0, i64 15
  %arrayidx455 = getelementptr inbounds %struct.DES_ks, %struct.DES_ks* %ks, i64 0, i32 0, i64 0, i32 0, i64 16
  %arrayidx460 = getelementptr inbounds %struct.DES_ks, %struct.DES_ks* %ks, i64 0, i32 0, i64 0, i32 0, i64 17
  %arrayidx512 = getelementptr inbounds %struct.DES_ks, %struct.DES_ks* %ks, i64 0, i32 0, i64 0, i32 0, i64 18
  %arrayidx517 = getelementptr inbounds %struct.DES_ks, %struct.DES_ks* %ks, i64 0, i32 0, i64 0, i32 0, i64 19
  %arrayidx569 = getelementptr inbounds %struct.DES_ks, %struct.DES_ks* %ks, i64 0, i32 0, i64 0, i32 0, i64 20
  %arrayidx574 = getelementptr inbounds %struct.DES_ks, %struct.DES_ks* %ks, i64 0, i32 0, i64 0, i32 0, i64 21
  %arrayidx626 = getelementptr inbounds %struct.DES_ks, %struct.DES_ks* %ks, i64 0, i32 0, i64 0, i32 0, i64 22
  %arrayidx631 = getelementptr inbounds %struct.DES_ks, %struct.DES_ks* %ks, i64 0, i32 0, i64 0, i32 0, i64 23
  %arrayidx683 = getelementptr inbounds %struct.DES_ks, %struct.DES_ks* %ks, i64 0, i32 0, i64 0, i32 0, i64 24
  %arrayidx688 = getelementptr inbounds %struct.DES_ks, %struct.DES_ks* %ks, i64 0, i32 0, i64 0, i32 0, i64 25
  %arrayidx740 = getelementptr inbounds %struct.DES_ks, %struct.DES_ks* %ks, i64 0, i32 0, i64 0, i32 0, i64 26
  %arrayidx745 = getelementptr inbounds %struct.DES_ks, %struct.DES_ks* %ks, i64 0, i32 0, i64 0, i32 0, i64 27
  %arrayidx797 = getelementptr inbounds %struct.DES_ks, %struct.DES_ks* %ks, i64 0, i32 0, i64 0, i32 0, i64 28
  %arrayidx802 = getelementptr inbounds %struct.DES_ks, %struct.DES_ks* %ks, i64 0, i32 0, i64 0, i32 0, i64 29
  %arrayidx854 = getelementptr inbounds %struct.DES_ks, %struct.DES_ks* %ks, i64 0, i32 0, i64 0, i32 0, i64 30
  %arrayidx859 = getelementptr inbounds %struct.DES_ks, %struct.DES_ks* %ks, i64 0, i32 0, i64 0, i32 0, i64 31
  br label %for.body

for.body:                                         ; preds = %entry, %for.body
  %l.01464 = phi i32 [ 0, %entry ], [ %xor904, %for.body ]
  %r.01463 = phi i32 [ 0, %entry ], [ %xor847, %for.body ]
  %j.01462 = phi i32 [ 0, %entry ], [ %inc, %for.body ]
  %shr = lshr i32 %r.01463, 16
  %xor = xor i32 %shr, %r.01463
  %and = and i32 %xor, %Eswap0
  %and1 = and i32 %xor, %Eswap1
  %shl = shl i32 %and, 16
  %xor2 = xor i32 %and, %r.01463
  %xor3 = xor i32 %xor2, %1
  %xor4 = xor i32 %xor3, %shl
  %shl5 = shl i32 %and1, 16
  %xor7 = xor i32 %and1, %r.01463
  %xor8 = xor i32 %xor7, %shl5
  %xor9 = xor i32 %xor8, %2
  %3 = tail call i32 asm "rorl $1,$0", "=r,I,0,~{cc},~{dirflag},~{fpsr},~{flags}"(i32 4, i32 %xor9) #1, !srcloc !8
  %shr11 = lshr i32 %xor3, 2
  %and12 = and i32 %shr11, 63
  %idxprom = zext i32 %and12 to i64
  %arrayidx13 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 0, i64 %idxprom
  %4 = load i32, i32* %arrayidx13, align 4, !tbaa !4
  %shr14 = lshr i32 %xor3, 10
  %and15 = and i32 %shr14, 63
  %idxprom16 = zext i32 %and15 to i64
  %arrayidx17 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 2, i64 %idxprom16
  %5 = load i32, i32* %arrayidx17, align 4, !tbaa !4
  %shr19 = lshr i32 %xor4, 18
  %and20 = and i32 %shr19, 63
  %idxprom21 = zext i32 %and20 to i64
  %arrayidx22 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 4, i64 %idxprom21
  %6 = load i32, i32* %arrayidx22, align 4, !tbaa !4
  %shr24 = lshr i32 %xor4, 26
  %idxprom26 = zext i32 %shr24 to i64
  %arrayidx27 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 6, i64 %idxprom26
  %7 = load i32, i32* %arrayidx27, align 4, !tbaa !4
  %shr29 = lshr i32 %3, 2
  %and30 = and i32 %shr29, 63
  %idxprom31 = zext i32 %and30 to i64
  %arrayidx32 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 1, i64 %idxprom31
  %8 = load i32, i32* %arrayidx32, align 4, !tbaa !4
  %shr34 = lshr i32 %3, 10
  %and35 = and i32 %shr34, 63
  %idxprom36 = zext i32 %and35 to i64
  %arrayidx37 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 3, i64 %idxprom36
  %9 = load i32, i32* %arrayidx37, align 4, !tbaa !4
  %shr39 = lshr i32 %3, 18
  %and40 = and i32 %shr39, 63
  %idxprom41 = zext i32 %and40 to i64
  %arrayidx42 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 5, i64 %idxprom41
  %10 = load i32, i32* %arrayidx42, align 4, !tbaa !4
  %shr44 = lshr i32 %3, 26
  %idxprom46 = zext i32 %shr44 to i64
  %arrayidx47 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 7, i64 %idxprom46
  %11 = load i32, i32* %arrayidx47, align 4, !tbaa !4
  %xor18 = xor i32 %4, %l.01464
  %xor23 = xor i32 %xor18, %5
  %xor28 = xor i32 %xor23, %6
  %xor33 = xor i32 %xor28, %7
  %xor38 = xor i32 %xor33, %8
  %xor43 = xor i32 %xor38, %9
  %xor48 = xor i32 %xor43, %10
  %xor49 = xor i32 %xor48, %11
  %shr51 = lshr i32 %xor49, 16
  %xor52 = xor i32 %shr51, %xor49
  %and53 = and i32 %xor52, %Eswap0
  %and54 = and i32 %xor52, %Eswap1
  %shl55 = shl i32 %and53, 16
  %12 = load i32, i32* %arrayidx56, align 4, !tbaa !4
  %xor57 = xor i32 %xor49, %12
  %xor58 = xor i32 %xor57, %and53
  %xor59 = xor i32 %xor58, %shl55
  %shl60 = shl i32 %and54, 16
  %13 = load i32, i32* %arrayidx61, align 4, !tbaa !4
  %xor62 = xor i32 %xor49, %13
  %xor63 = xor i32 %xor62, %and54
  %xor64 = xor i32 %xor63, %shl60
  %14 = tail call i32 asm "rorl $1,$0", "=r,I,0,~{cc},~{dirflag},~{fpsr},~{flags}"(i32 4, i32 %xor64) #1, !srcloc !9
  %shr67 = lshr i32 %xor58, 2
  %and68 = and i32 %shr67, 63
  %idxprom69 = zext i32 %and68 to i64
  %arrayidx70 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 0, i64 %idxprom69
  %15 = load i32, i32* %arrayidx70, align 4, !tbaa !4
  %shr71 = lshr i32 %xor58, 10
  %and72 = and i32 %shr71, 63
  %idxprom73 = zext i32 %and72 to i64
  %arrayidx74 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 2, i64 %idxprom73
  %16 = load i32, i32* %arrayidx74, align 4, !tbaa !4
  %shr76 = lshr i32 %xor59, 18
  %and77 = and i32 %shr76, 63
  %idxprom78 = zext i32 %and77 to i64
  %arrayidx79 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 4, i64 %idxprom78
  %17 = load i32, i32* %arrayidx79, align 4, !tbaa !4
  %shr81 = lshr i32 %xor59, 26
  %idxprom83 = zext i32 %shr81 to i64
  %arrayidx84 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 6, i64 %idxprom83
  %18 = load i32, i32* %arrayidx84, align 4, !tbaa !4
  %shr86 = lshr i32 %14, 2
  %and87 = and i32 %shr86, 63
  %idxprom88 = zext i32 %and87 to i64
  %arrayidx89 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 1, i64 %idxprom88
  %19 = load i32, i32* %arrayidx89, align 4, !tbaa !4
  %shr91 = lshr i32 %14, 10
  %and92 = and i32 %shr91, 63
  %idxprom93 = zext i32 %and92 to i64
  %arrayidx94 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 3, i64 %idxprom93
  %20 = load i32, i32* %arrayidx94, align 4, !tbaa !4
  %shr96 = lshr i32 %14, 18
  %and97 = and i32 %shr96, 63
  %idxprom98 = zext i32 %and97 to i64
  %arrayidx99 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 5, i64 %idxprom98
  %21 = load i32, i32* %arrayidx99, align 4, !tbaa !4
  %shr101 = lshr i32 %14, 26
  %idxprom103 = zext i32 %shr101 to i64
  %arrayidx104 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 7, i64 %idxprom103
  %22 = load i32, i32* %arrayidx104, align 4, !tbaa !4
  %xor75 = xor i32 %15, %r.01463
  %xor80 = xor i32 %xor75, %16
  %xor85 = xor i32 %xor80, %17
  %xor90 = xor i32 %xor85, %18
  %xor95 = xor i32 %xor90, %19
  %xor100 = xor i32 %xor95, %20
  %xor105 = xor i32 %xor100, %21
  %xor106 = xor i32 %xor105, %22
  %shr108 = lshr i32 %xor106, 16
  %xor109 = xor i32 %shr108, %xor106
  %and110 = and i32 %xor109, %Eswap0
  %and111 = and i32 %xor109, %Eswap1
  %shl112 = shl i32 %and110, 16
  %23 = load i32, i32* %arrayidx113, align 4, !tbaa !4
  %xor114 = xor i32 %xor106, %23
  %xor115 = xor i32 %xor114, %and110
  %xor116 = xor i32 %xor115, %shl112
  %shl117 = shl i32 %and111, 16
  %24 = load i32, i32* %arrayidx118, align 4, !tbaa !4
  %xor119 = xor i32 %xor106, %24
  %xor120 = xor i32 %xor119, %and111
  %xor121 = xor i32 %xor120, %shl117
  %25 = tail call i32 asm "rorl $1,$0", "=r,I,0,~{cc},~{dirflag},~{fpsr},~{flags}"(i32 4, i32 %xor121) #1, !srcloc !10
  %shr124 = lshr i32 %xor115, 2
  %and125 = and i32 %shr124, 63
  %idxprom126 = zext i32 %and125 to i64
  %arrayidx127 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 0, i64 %idxprom126
  %26 = load i32, i32* %arrayidx127, align 4, !tbaa !4
  %shr128 = lshr i32 %xor115, 10
  %and129 = and i32 %shr128, 63
  %idxprom130 = zext i32 %and129 to i64
  %arrayidx131 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 2, i64 %idxprom130
  %27 = load i32, i32* %arrayidx131, align 4, !tbaa !4
  %shr133 = lshr i32 %xor116, 18
  %and134 = and i32 %shr133, 63
  %idxprom135 = zext i32 %and134 to i64
  %arrayidx136 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 4, i64 %idxprom135
  %28 = load i32, i32* %arrayidx136, align 4, !tbaa !4
  %shr138 = lshr i32 %xor116, 26
  %idxprom140 = zext i32 %shr138 to i64
  %arrayidx141 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 6, i64 %idxprom140
  %29 = load i32, i32* %arrayidx141, align 4, !tbaa !4
  %shr143 = lshr i32 %25, 2
  %and144 = and i32 %shr143, 63
  %idxprom145 = zext i32 %and144 to i64
  %arrayidx146 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 1, i64 %idxprom145
  %30 = load i32, i32* %arrayidx146, align 4, !tbaa !4
  %shr148 = lshr i32 %25, 10
  %and149 = and i32 %shr148, 63
  %idxprom150 = zext i32 %and149 to i64
  %arrayidx151 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 3, i64 %idxprom150
  %31 = load i32, i32* %arrayidx151, align 4, !tbaa !4
  %shr153 = lshr i32 %25, 18
  %and154 = and i32 %shr153, 63
  %idxprom155 = zext i32 %and154 to i64
  %arrayidx156 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 5, i64 %idxprom155
  %32 = load i32, i32* %arrayidx156, align 4, !tbaa !4
  %shr158 = lshr i32 %25, 26
  %idxprom160 = zext i32 %shr158 to i64
  %arrayidx161 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 7, i64 %idxprom160
  %33 = load i32, i32* %arrayidx161, align 4, !tbaa !4
  %xor132 = xor i32 %26, %xor49
  %xor137 = xor i32 %xor132, %27
  %xor142 = xor i32 %xor137, %28
  %xor147 = xor i32 %xor142, %29
  %xor152 = xor i32 %xor147, %30
  %xor157 = xor i32 %xor152, %31
  %xor162 = xor i32 %xor157, %32
  %xor163 = xor i32 %xor162, %33
  %shr165 = lshr i32 %xor163, 16
  %xor166 = xor i32 %shr165, %xor163
  %and167 = and i32 %xor166, %Eswap0
  %and168 = and i32 %xor166, %Eswap1
  %shl169 = shl i32 %and167, 16
  %34 = load i32, i32* %arrayidx170, align 4, !tbaa !4
  %xor171 = xor i32 %xor163, %34
  %xor172 = xor i32 %xor171, %and167
  %xor173 = xor i32 %xor172, %shl169
  %shl174 = shl i32 %and168, 16
  %35 = load i32, i32* %arrayidx175, align 4, !tbaa !4
  %xor176 = xor i32 %xor163, %35
  %xor177 = xor i32 %xor176, %and168
  %xor178 = xor i32 %xor177, %shl174
  %36 = tail call i32 asm "rorl $1,$0", "=r,I,0,~{cc},~{dirflag},~{fpsr},~{flags}"(i32 4, i32 %xor178) #1, !srcloc !11
  %shr181 = lshr i32 %xor172, 2
  %and182 = and i32 %shr181, 63
  %idxprom183 = zext i32 %and182 to i64
  %arrayidx184 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 0, i64 %idxprom183
  %37 = load i32, i32* %arrayidx184, align 4, !tbaa !4
  %shr185 = lshr i32 %xor172, 10
  %and186 = and i32 %shr185, 63
  %idxprom187 = zext i32 %and186 to i64
  %arrayidx188 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 2, i64 %idxprom187
  %38 = load i32, i32* %arrayidx188, align 4, !tbaa !4
  %shr190 = lshr i32 %xor173, 18
  %and191 = and i32 %shr190, 63
  %idxprom192 = zext i32 %and191 to i64
  %arrayidx193 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 4, i64 %idxprom192
  %39 = load i32, i32* %arrayidx193, align 4, !tbaa !4
  %shr195 = lshr i32 %xor173, 26
  %idxprom197 = zext i32 %shr195 to i64
  %arrayidx198 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 6, i64 %idxprom197
  %40 = load i32, i32* %arrayidx198, align 4, !tbaa !4
  %shr200 = lshr i32 %36, 2
  %and201 = and i32 %shr200, 63
  %idxprom202 = zext i32 %and201 to i64
  %arrayidx203 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 1, i64 %idxprom202
  %41 = load i32, i32* %arrayidx203, align 4, !tbaa !4
  %shr205 = lshr i32 %36, 10
  %and206 = and i32 %shr205, 63
  %idxprom207 = zext i32 %and206 to i64
  %arrayidx208 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 3, i64 %idxprom207
  %42 = load i32, i32* %arrayidx208, align 4, !tbaa !4
  %shr210 = lshr i32 %36, 18
  %and211 = and i32 %shr210, 63
  %idxprom212 = zext i32 %and211 to i64
  %arrayidx213 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 5, i64 %idxprom212
  %43 = load i32, i32* %arrayidx213, align 4, !tbaa !4
  %shr215 = lshr i32 %36, 26
  %idxprom217 = zext i32 %shr215 to i64
  %arrayidx218 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 7, i64 %idxprom217
  %44 = load i32, i32* %arrayidx218, align 4, !tbaa !4
  %xor189 = xor i32 %37, %xor106
  %xor194 = xor i32 %xor189, %38
  %xor199 = xor i32 %xor194, %39
  %xor204 = xor i32 %xor199, %40
  %xor209 = xor i32 %xor204, %41
  %xor214 = xor i32 %xor209, %42
  %xor219 = xor i32 %xor214, %43
  %xor220 = xor i32 %xor219, %44
  %shr222 = lshr i32 %xor220, 16
  %xor223 = xor i32 %shr222, %xor220
  %and224 = and i32 %xor223, %Eswap0
  %and225 = and i32 %xor223, %Eswap1
  %shl226 = shl i32 %and224, 16
  %45 = load i32, i32* %arrayidx227, align 4, !tbaa !4
  %xor228 = xor i32 %xor220, %45
  %xor229 = xor i32 %xor228, %and224
  %xor230 = xor i32 %xor229, %shl226
  %shl231 = shl i32 %and225, 16
  %46 = load i32, i32* %arrayidx232, align 4, !tbaa !4
  %xor233 = xor i32 %xor220, %46
  %xor234 = xor i32 %xor233, %and225
  %xor235 = xor i32 %xor234, %shl231
  %47 = tail call i32 asm "rorl $1,$0", "=r,I,0,~{cc},~{dirflag},~{fpsr},~{flags}"(i32 4, i32 %xor235) #1, !srcloc !12
  %shr238 = lshr i32 %xor229, 2
  %and239 = and i32 %shr238, 63
  %idxprom240 = zext i32 %and239 to i64
  %arrayidx241 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 0, i64 %idxprom240
  %48 = load i32, i32* %arrayidx241, align 4, !tbaa !4
  %shr242 = lshr i32 %xor229, 10
  %and243 = and i32 %shr242, 63
  %idxprom244 = zext i32 %and243 to i64
  %arrayidx245 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 2, i64 %idxprom244
  %49 = load i32, i32* %arrayidx245, align 4, !tbaa !4
  %shr247 = lshr i32 %xor230, 18
  %and248 = and i32 %shr247, 63
  %idxprom249 = zext i32 %and248 to i64
  %arrayidx250 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 4, i64 %idxprom249
  %50 = load i32, i32* %arrayidx250, align 4, !tbaa !4
  %shr252 = lshr i32 %xor230, 26
  %idxprom254 = zext i32 %shr252 to i64
  %arrayidx255 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 6, i64 %idxprom254
  %51 = load i32, i32* %arrayidx255, align 4, !tbaa !4
  %shr257 = lshr i32 %47, 2
  %and258 = and i32 %shr257, 63
  %idxprom259 = zext i32 %and258 to i64
  %arrayidx260 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 1, i64 %idxprom259
  %52 = load i32, i32* %arrayidx260, align 4, !tbaa !4
  %shr262 = lshr i32 %47, 10
  %and263 = and i32 %shr262, 63
  %idxprom264 = zext i32 %and263 to i64
  %arrayidx265 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 3, i64 %idxprom264
  %53 = load i32, i32* %arrayidx265, align 4, !tbaa !4
  %shr267 = lshr i32 %47, 18
  %and268 = and i32 %shr267, 63
  %idxprom269 = zext i32 %and268 to i64
  %arrayidx270 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 5, i64 %idxprom269
  %54 = load i32, i32* %arrayidx270, align 4, !tbaa !4
  %shr272 = lshr i32 %47, 26
  %idxprom274 = zext i32 %shr272 to i64
  %arrayidx275 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 7, i64 %idxprom274
  %55 = load i32, i32* %arrayidx275, align 4, !tbaa !4
  %xor246 = xor i32 %48, %xor163
  %xor251 = xor i32 %xor246, %49
  %xor256 = xor i32 %xor251, %50
  %xor261 = xor i32 %xor256, %51
  %xor266 = xor i32 %xor261, %52
  %xor271 = xor i32 %xor266, %53
  %xor276 = xor i32 %xor271, %54
  %xor277 = xor i32 %xor276, %55
  %shr279 = lshr i32 %xor277, 16
  %xor280 = xor i32 %shr279, %xor277
  %and281 = and i32 %xor280, %Eswap0
  %and282 = and i32 %xor280, %Eswap1
  %shl283 = shl i32 %and281, 16
  %56 = load i32, i32* %arrayidx284, align 4, !tbaa !4
  %xor285 = xor i32 %xor277, %56
  %xor286 = xor i32 %xor285, %and281
  %xor287 = xor i32 %xor286, %shl283
  %shl288 = shl i32 %and282, 16
  %57 = load i32, i32* %arrayidx289, align 4, !tbaa !4
  %xor290 = xor i32 %xor277, %57
  %xor291 = xor i32 %xor290, %and282
  %xor292 = xor i32 %xor291, %shl288
  %58 = tail call i32 asm "rorl $1,$0", "=r,I,0,~{cc},~{dirflag},~{fpsr},~{flags}"(i32 4, i32 %xor292) #1, !srcloc !13
  %shr295 = lshr i32 %xor286, 2
  %and296 = and i32 %shr295, 63
  %idxprom297 = zext i32 %and296 to i64
  %arrayidx298 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 0, i64 %idxprom297
  %59 = load i32, i32* %arrayidx298, align 4, !tbaa !4
  %shr299 = lshr i32 %xor286, 10
  %and300 = and i32 %shr299, 63
  %idxprom301 = zext i32 %and300 to i64
  %arrayidx302 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 2, i64 %idxprom301
  %60 = load i32, i32* %arrayidx302, align 4, !tbaa !4
  %shr304 = lshr i32 %xor287, 18
  %and305 = and i32 %shr304, 63
  %idxprom306 = zext i32 %and305 to i64
  %arrayidx307 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 4, i64 %idxprom306
  %61 = load i32, i32* %arrayidx307, align 4, !tbaa !4
  %shr309 = lshr i32 %xor287, 26
  %idxprom311 = zext i32 %shr309 to i64
  %arrayidx312 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 6, i64 %idxprom311
  %62 = load i32, i32* %arrayidx312, align 4, !tbaa !4
  %shr314 = lshr i32 %58, 2
  %and315 = and i32 %shr314, 63
  %idxprom316 = zext i32 %and315 to i64
  %arrayidx317 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 1, i64 %idxprom316
  %63 = load i32, i32* %arrayidx317, align 4, !tbaa !4
  %shr319 = lshr i32 %58, 10
  %and320 = and i32 %shr319, 63
  %idxprom321 = zext i32 %and320 to i64
  %arrayidx322 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 3, i64 %idxprom321
  %64 = load i32, i32* %arrayidx322, align 4, !tbaa !4
  %shr324 = lshr i32 %58, 18
  %and325 = and i32 %shr324, 63
  %idxprom326 = zext i32 %and325 to i64
  %arrayidx327 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 5, i64 %idxprom326
  %65 = load i32, i32* %arrayidx327, align 4, !tbaa !4
  %shr329 = lshr i32 %58, 26
  %idxprom331 = zext i32 %shr329 to i64
  %arrayidx332 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 7, i64 %idxprom331
  %66 = load i32, i32* %arrayidx332, align 4, !tbaa !4
  %xor303 = xor i32 %59, %xor220
  %xor308 = xor i32 %xor303, %60
  %xor313 = xor i32 %xor308, %61
  %xor318 = xor i32 %xor313, %62
  %xor323 = xor i32 %xor318, %63
  %xor328 = xor i32 %xor323, %64
  %xor333 = xor i32 %xor328, %65
  %xor334 = xor i32 %xor333, %66
  %shr336 = lshr i32 %xor334, 16
  %xor337 = xor i32 %shr336, %xor334
  %and338 = and i32 %xor337, %Eswap0
  %and339 = and i32 %xor337, %Eswap1
  %shl340 = shl i32 %and338, 16
  %67 = load i32, i32* %arrayidx341, align 4, !tbaa !4
  %xor342 = xor i32 %xor334, %67
  %xor343 = xor i32 %xor342, %and338
  %xor344 = xor i32 %xor343, %shl340
  %shl345 = shl i32 %and339, 16
  %68 = load i32, i32* %arrayidx346, align 4, !tbaa !4
  %xor347 = xor i32 %xor334, %68
  %xor348 = xor i32 %xor347, %and339
  %xor349 = xor i32 %xor348, %shl345
  %69 = tail call i32 asm "rorl $1,$0", "=r,I,0,~{cc},~{dirflag},~{fpsr},~{flags}"(i32 4, i32 %xor349) #1, !srcloc !14
  %shr352 = lshr i32 %xor343, 2
  %and353 = and i32 %shr352, 63
  %idxprom354 = zext i32 %and353 to i64
  %arrayidx355 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 0, i64 %idxprom354
  %70 = load i32, i32* %arrayidx355, align 4, !tbaa !4
  %shr356 = lshr i32 %xor343, 10
  %and357 = and i32 %shr356, 63
  %idxprom358 = zext i32 %and357 to i64
  %arrayidx359 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 2, i64 %idxprom358
  %71 = load i32, i32* %arrayidx359, align 4, !tbaa !4
  %shr361 = lshr i32 %xor344, 18
  %and362 = and i32 %shr361, 63
  %idxprom363 = zext i32 %and362 to i64
  %arrayidx364 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 4, i64 %idxprom363
  %72 = load i32, i32* %arrayidx364, align 4, !tbaa !4
  %shr366 = lshr i32 %xor344, 26
  %idxprom368 = zext i32 %shr366 to i64
  %arrayidx369 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 6, i64 %idxprom368
  %73 = load i32, i32* %arrayidx369, align 4, !tbaa !4
  %shr371 = lshr i32 %69, 2
  %and372 = and i32 %shr371, 63
  %idxprom373 = zext i32 %and372 to i64
  %arrayidx374 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 1, i64 %idxprom373
  %74 = load i32, i32* %arrayidx374, align 4, !tbaa !4
  %shr376 = lshr i32 %69, 10
  %and377 = and i32 %shr376, 63
  %idxprom378 = zext i32 %and377 to i64
  %arrayidx379 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 3, i64 %idxprom378
  %75 = load i32, i32* %arrayidx379, align 4, !tbaa !4
  %shr381 = lshr i32 %69, 18
  %and382 = and i32 %shr381, 63
  %idxprom383 = zext i32 %and382 to i64
  %arrayidx384 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 5, i64 %idxprom383
  %76 = load i32, i32* %arrayidx384, align 4, !tbaa !4
  %shr386 = lshr i32 %69, 26
  %idxprom388 = zext i32 %shr386 to i64
  %arrayidx389 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 7, i64 %idxprom388
  %77 = load i32, i32* %arrayidx389, align 4, !tbaa !4
  %xor360 = xor i32 %70, %xor277
  %xor365 = xor i32 %xor360, %71
  %xor370 = xor i32 %xor365, %72
  %xor375 = xor i32 %xor370, %73
  %xor380 = xor i32 %xor375, %74
  %xor385 = xor i32 %xor380, %75
  %xor390 = xor i32 %xor385, %76
  %xor391 = xor i32 %xor390, %77
  %shr393 = lshr i32 %xor391, 16
  %xor394 = xor i32 %shr393, %xor391
  %and395 = and i32 %xor394, %Eswap0
  %and396 = and i32 %xor394, %Eswap1
  %shl397 = shl i32 %and395, 16
  %78 = load i32, i32* %arrayidx398, align 4, !tbaa !4
  %xor399 = xor i32 %xor391, %78
  %xor400 = xor i32 %xor399, %and395
  %xor401 = xor i32 %xor400, %shl397
  %shl402 = shl i32 %and396, 16
  %79 = load i32, i32* %arrayidx403, align 4, !tbaa !4
  %xor404 = xor i32 %xor391, %79
  %xor405 = xor i32 %xor404, %and396
  %xor406 = xor i32 %xor405, %shl402
  %80 = tail call i32 asm "rorl $1,$0", "=r,I,0,~{cc},~{dirflag},~{fpsr},~{flags}"(i32 4, i32 %xor406) #1, !srcloc !15
  %shr409 = lshr i32 %xor400, 2
  %and410 = and i32 %shr409, 63
  %idxprom411 = zext i32 %and410 to i64
  %arrayidx412 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 0, i64 %idxprom411
  %81 = load i32, i32* %arrayidx412, align 4, !tbaa !4
  %shr413 = lshr i32 %xor400, 10
  %and414 = and i32 %shr413, 63
  %idxprom415 = zext i32 %and414 to i64
  %arrayidx416 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 2, i64 %idxprom415
  %82 = load i32, i32* %arrayidx416, align 4, !tbaa !4
  %shr418 = lshr i32 %xor401, 18
  %and419 = and i32 %shr418, 63
  %idxprom420 = zext i32 %and419 to i64
  %arrayidx421 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 4, i64 %idxprom420
  %83 = load i32, i32* %arrayidx421, align 4, !tbaa !4
  %shr423 = lshr i32 %xor401, 26
  %idxprom425 = zext i32 %shr423 to i64
  %arrayidx426 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 6, i64 %idxprom425
  %84 = load i32, i32* %arrayidx426, align 4, !tbaa !4
  %shr428 = lshr i32 %80, 2
  %and429 = and i32 %shr428, 63
  %idxprom430 = zext i32 %and429 to i64
  %arrayidx431 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 1, i64 %idxprom430
  %85 = load i32, i32* %arrayidx431, align 4, !tbaa !4
  %shr433 = lshr i32 %80, 10
  %and434 = and i32 %shr433, 63
  %idxprom435 = zext i32 %and434 to i64
  %arrayidx436 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 3, i64 %idxprom435
  %86 = load i32, i32* %arrayidx436, align 4, !tbaa !4
  %shr438 = lshr i32 %80, 18
  %and439 = and i32 %shr438, 63
  %idxprom440 = zext i32 %and439 to i64
  %arrayidx441 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 5, i64 %idxprom440
  %87 = load i32, i32* %arrayidx441, align 4, !tbaa !4
  %shr443 = lshr i32 %80, 26
  %idxprom445 = zext i32 %shr443 to i64
  %arrayidx446 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 7, i64 %idxprom445
  %88 = load i32, i32* %arrayidx446, align 4, !tbaa !4
  %xor417 = xor i32 %81, %xor334
  %xor422 = xor i32 %xor417, %82
  %xor427 = xor i32 %xor422, %83
  %xor432 = xor i32 %xor427, %84
  %xor437 = xor i32 %xor432, %85
  %xor442 = xor i32 %xor437, %86
  %xor447 = xor i32 %xor442, %87
  %xor448 = xor i32 %xor447, %88
  %shr450 = lshr i32 %xor448, 16
  %xor451 = xor i32 %shr450, %xor448
  %and452 = and i32 %xor451, %Eswap0
  %and453 = and i32 %xor451, %Eswap1
  %shl454 = shl i32 %and452, 16
  %89 = load i32, i32* %arrayidx455, align 4, !tbaa !4
  %xor456 = xor i32 %xor448, %89
  %xor457 = xor i32 %xor456, %and452
  %xor458 = xor i32 %xor457, %shl454
  %shl459 = shl i32 %and453, 16
  %90 = load i32, i32* %arrayidx460, align 4, !tbaa !4
  %xor461 = xor i32 %xor448, %90
  %xor462 = xor i32 %xor461, %and453
  %xor463 = xor i32 %xor462, %shl459
  %91 = tail call i32 asm "rorl $1,$0", "=r,I,0,~{cc},~{dirflag},~{fpsr},~{flags}"(i32 4, i32 %xor463) #1, !srcloc !16
  %shr466 = lshr i32 %xor457, 2
  %and467 = and i32 %shr466, 63
  %idxprom468 = zext i32 %and467 to i64
  %arrayidx469 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 0, i64 %idxprom468
  %92 = load i32, i32* %arrayidx469, align 4, !tbaa !4
  %shr470 = lshr i32 %xor457, 10
  %and471 = and i32 %shr470, 63
  %idxprom472 = zext i32 %and471 to i64
  %arrayidx473 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 2, i64 %idxprom472
  %93 = load i32, i32* %arrayidx473, align 4, !tbaa !4
  %shr475 = lshr i32 %xor458, 18
  %and476 = and i32 %shr475, 63
  %idxprom477 = zext i32 %and476 to i64
  %arrayidx478 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 4, i64 %idxprom477
  %94 = load i32, i32* %arrayidx478, align 4, !tbaa !4
  %shr480 = lshr i32 %xor458, 26
  %idxprom482 = zext i32 %shr480 to i64
  %arrayidx483 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 6, i64 %idxprom482
  %95 = load i32, i32* %arrayidx483, align 4, !tbaa !4
  %shr485 = lshr i32 %91, 2
  %and486 = and i32 %shr485, 63
  %idxprom487 = zext i32 %and486 to i64
  %arrayidx488 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 1, i64 %idxprom487
  %96 = load i32, i32* %arrayidx488, align 4, !tbaa !4
  %shr490 = lshr i32 %91, 10
  %and491 = and i32 %shr490, 63
  %idxprom492 = zext i32 %and491 to i64
  %arrayidx493 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 3, i64 %idxprom492
  %97 = load i32, i32* %arrayidx493, align 4, !tbaa !4
  %shr495 = lshr i32 %91, 18
  %and496 = and i32 %shr495, 63
  %idxprom497 = zext i32 %and496 to i64
  %arrayidx498 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 5, i64 %idxprom497
  %98 = load i32, i32* %arrayidx498, align 4, !tbaa !4
  %shr500 = lshr i32 %91, 26
  %idxprom502 = zext i32 %shr500 to i64
  %arrayidx503 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 7, i64 %idxprom502
  %99 = load i32, i32* %arrayidx503, align 4, !tbaa !4
  %xor474 = xor i32 %92, %xor391
  %xor479 = xor i32 %xor474, %93
  %xor484 = xor i32 %xor479, %94
  %xor489 = xor i32 %xor484, %95
  %xor494 = xor i32 %xor489, %96
  %xor499 = xor i32 %xor494, %97
  %xor504 = xor i32 %xor499, %98
  %xor505 = xor i32 %xor504, %99
  %shr507 = lshr i32 %xor505, 16
  %xor508 = xor i32 %shr507, %xor505
  %and509 = and i32 %xor508, %Eswap0
  %and510 = and i32 %xor508, %Eswap1
  %shl511 = shl i32 %and509, 16
  %100 = load i32, i32* %arrayidx512, align 4, !tbaa !4
  %xor513 = xor i32 %xor505, %100
  %xor514 = xor i32 %xor513, %and509
  %xor515 = xor i32 %xor514, %shl511
  %shl516 = shl i32 %and510, 16
  %101 = load i32, i32* %arrayidx517, align 4, !tbaa !4
  %xor518 = xor i32 %xor505, %101
  %xor519 = xor i32 %xor518, %and510
  %xor520 = xor i32 %xor519, %shl516
  %102 = tail call i32 asm "rorl $1,$0", "=r,I,0,~{cc},~{dirflag},~{fpsr},~{flags}"(i32 4, i32 %xor520) #1, !srcloc !17
  %shr523 = lshr i32 %xor514, 2
  %and524 = and i32 %shr523, 63
  %idxprom525 = zext i32 %and524 to i64
  %arrayidx526 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 0, i64 %idxprom525
  %103 = load i32, i32* %arrayidx526, align 4, !tbaa !4
  %shr527 = lshr i32 %xor514, 10
  %and528 = and i32 %shr527, 63
  %idxprom529 = zext i32 %and528 to i64
  %arrayidx530 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 2, i64 %idxprom529
  %104 = load i32, i32* %arrayidx530, align 4, !tbaa !4
  %shr532 = lshr i32 %xor515, 18
  %and533 = and i32 %shr532, 63
  %idxprom534 = zext i32 %and533 to i64
  %arrayidx535 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 4, i64 %idxprom534
  %105 = load i32, i32* %arrayidx535, align 4, !tbaa !4
  %shr537 = lshr i32 %xor515, 26
  %idxprom539 = zext i32 %shr537 to i64
  %arrayidx540 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 6, i64 %idxprom539
  %106 = load i32, i32* %arrayidx540, align 4, !tbaa !4
  %shr542 = lshr i32 %102, 2
  %and543 = and i32 %shr542, 63
  %idxprom544 = zext i32 %and543 to i64
  %arrayidx545 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 1, i64 %idxprom544
  %107 = load i32, i32* %arrayidx545, align 4, !tbaa !4
  %shr547 = lshr i32 %102, 10
  %and548 = and i32 %shr547, 63
  %idxprom549 = zext i32 %and548 to i64
  %arrayidx550 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 3, i64 %idxprom549
  %108 = load i32, i32* %arrayidx550, align 4, !tbaa !4
  %shr552 = lshr i32 %102, 18
  %and553 = and i32 %shr552, 63
  %idxprom554 = zext i32 %and553 to i64
  %arrayidx555 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 5, i64 %idxprom554
  %109 = load i32, i32* %arrayidx555, align 4, !tbaa !4
  %shr557 = lshr i32 %102, 26
  %idxprom559 = zext i32 %shr557 to i64
  %arrayidx560 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 7, i64 %idxprom559
  %110 = load i32, i32* %arrayidx560, align 4, !tbaa !4
  %xor531 = xor i32 %103, %xor448
  %xor536 = xor i32 %xor531, %104
  %xor541 = xor i32 %xor536, %105
  %xor546 = xor i32 %xor541, %106
  %xor551 = xor i32 %xor546, %107
  %xor556 = xor i32 %xor551, %108
  %xor561 = xor i32 %xor556, %109
  %xor562 = xor i32 %xor561, %110
  %shr564 = lshr i32 %xor562, 16
  %xor565 = xor i32 %shr564, %xor562
  %and566 = and i32 %xor565, %Eswap0
  %and567 = and i32 %xor565, %Eswap1
  %shl568 = shl i32 %and566, 16
  %111 = load i32, i32* %arrayidx569, align 4, !tbaa !4
  %xor570 = xor i32 %xor562, %111
  %xor571 = xor i32 %xor570, %and566
  %xor572 = xor i32 %xor571, %shl568
  %shl573 = shl i32 %and567, 16
  %112 = load i32, i32* %arrayidx574, align 4, !tbaa !4
  %xor575 = xor i32 %xor562, %112
  %xor576 = xor i32 %xor575, %and567
  %xor577 = xor i32 %xor576, %shl573
  %113 = tail call i32 asm "rorl $1,$0", "=r,I,0,~{cc},~{dirflag},~{fpsr},~{flags}"(i32 4, i32 %xor577) #1, !srcloc !18
  %shr580 = lshr i32 %xor571, 2
  %and581 = and i32 %shr580, 63
  %idxprom582 = zext i32 %and581 to i64
  %arrayidx583 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 0, i64 %idxprom582
  %114 = load i32, i32* %arrayidx583, align 4, !tbaa !4
  %shr584 = lshr i32 %xor571, 10
  %and585 = and i32 %shr584, 63
  %idxprom586 = zext i32 %and585 to i64
  %arrayidx587 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 2, i64 %idxprom586
  %115 = load i32, i32* %arrayidx587, align 4, !tbaa !4
  %shr589 = lshr i32 %xor572, 18
  %and590 = and i32 %shr589, 63
  %idxprom591 = zext i32 %and590 to i64
  %arrayidx592 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 4, i64 %idxprom591
  %116 = load i32, i32* %arrayidx592, align 4, !tbaa !4
  %shr594 = lshr i32 %xor572, 26
  %idxprom596 = zext i32 %shr594 to i64
  %arrayidx597 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 6, i64 %idxprom596
  %117 = load i32, i32* %arrayidx597, align 4, !tbaa !4
  %shr599 = lshr i32 %113, 2
  %and600 = and i32 %shr599, 63
  %idxprom601 = zext i32 %and600 to i64
  %arrayidx602 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 1, i64 %idxprom601
  %118 = load i32, i32* %arrayidx602, align 4, !tbaa !4
  %shr604 = lshr i32 %113, 10
  %and605 = and i32 %shr604, 63
  %idxprom606 = zext i32 %and605 to i64
  %arrayidx607 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 3, i64 %idxprom606
  %119 = load i32, i32* %arrayidx607, align 4, !tbaa !4
  %shr609 = lshr i32 %113, 18
  %and610 = and i32 %shr609, 63
  %idxprom611 = zext i32 %and610 to i64
  %arrayidx612 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 5, i64 %idxprom611
  %120 = load i32, i32* %arrayidx612, align 4, !tbaa !4
  %shr614 = lshr i32 %113, 26
  %idxprom616 = zext i32 %shr614 to i64
  %arrayidx617 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 7, i64 %idxprom616
  %121 = load i32, i32* %arrayidx617, align 4, !tbaa !4
  %xor588 = xor i32 %114, %xor505
  %xor593 = xor i32 %xor588, %115
  %xor598 = xor i32 %xor593, %116
  %xor603 = xor i32 %xor598, %117
  %xor608 = xor i32 %xor603, %118
  %xor613 = xor i32 %xor608, %119
  %xor618 = xor i32 %xor613, %120
  %xor619 = xor i32 %xor618, %121
  %shr621 = lshr i32 %xor619, 16
  %xor622 = xor i32 %shr621, %xor619
  %and623 = and i32 %xor622, %Eswap0
  %and624 = and i32 %xor622, %Eswap1
  %shl625 = shl i32 %and623, 16
  %122 = load i32, i32* %arrayidx626, align 4, !tbaa !4
  %xor627 = xor i32 %xor619, %122
  %xor628 = xor i32 %xor627, %and623
  %xor629 = xor i32 %xor628, %shl625
  %shl630 = shl i32 %and624, 16
  %123 = load i32, i32* %arrayidx631, align 4, !tbaa !4
  %xor632 = xor i32 %xor619, %123
  %xor633 = xor i32 %xor632, %and624
  %xor634 = xor i32 %xor633, %shl630
  %124 = tail call i32 asm "rorl $1,$0", "=r,I,0,~{cc},~{dirflag},~{fpsr},~{flags}"(i32 4, i32 %xor634) #1, !srcloc !19
  %shr637 = lshr i32 %xor628, 2
  %and638 = and i32 %shr637, 63
  %idxprom639 = zext i32 %and638 to i64
  %arrayidx640 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 0, i64 %idxprom639
  %125 = load i32, i32* %arrayidx640, align 4, !tbaa !4
  %shr641 = lshr i32 %xor628, 10
  %and642 = and i32 %shr641, 63
  %idxprom643 = zext i32 %and642 to i64
  %arrayidx644 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 2, i64 %idxprom643
  %126 = load i32, i32* %arrayidx644, align 4, !tbaa !4
  %shr646 = lshr i32 %xor629, 18
  %and647 = and i32 %shr646, 63
  %idxprom648 = zext i32 %and647 to i64
  %arrayidx649 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 4, i64 %idxprom648
  %127 = load i32, i32* %arrayidx649, align 4, !tbaa !4
  %shr651 = lshr i32 %xor629, 26
  %idxprom653 = zext i32 %shr651 to i64
  %arrayidx654 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 6, i64 %idxprom653
  %128 = load i32, i32* %arrayidx654, align 4, !tbaa !4
  %shr656 = lshr i32 %124, 2
  %and657 = and i32 %shr656, 63
  %idxprom658 = zext i32 %and657 to i64
  %arrayidx659 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 1, i64 %idxprom658
  %129 = load i32, i32* %arrayidx659, align 4, !tbaa !4
  %shr661 = lshr i32 %124, 10
  %and662 = and i32 %shr661, 63
  %idxprom663 = zext i32 %and662 to i64
  %arrayidx664 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 3, i64 %idxprom663
  %130 = load i32, i32* %arrayidx664, align 4, !tbaa !4
  %shr666 = lshr i32 %124, 18
  %and667 = and i32 %shr666, 63
  %idxprom668 = zext i32 %and667 to i64
  %arrayidx669 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 5, i64 %idxprom668
  %131 = load i32, i32* %arrayidx669, align 4, !tbaa !4
  %shr671 = lshr i32 %124, 26
  %idxprom673 = zext i32 %shr671 to i64
  %arrayidx674 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 7, i64 %idxprom673
  %132 = load i32, i32* %arrayidx674, align 4, !tbaa !4
  %xor645 = xor i32 %125, %xor562
  %xor650 = xor i32 %xor645, %126
  %xor655 = xor i32 %xor650, %127
  %xor660 = xor i32 %xor655, %128
  %xor665 = xor i32 %xor660, %129
  %xor670 = xor i32 %xor665, %130
  %xor675 = xor i32 %xor670, %131
  %xor676 = xor i32 %xor675, %132
  %shr678 = lshr i32 %xor676, 16
  %xor679 = xor i32 %shr678, %xor676
  %and680 = and i32 %xor679, %Eswap0
  %and681 = and i32 %xor679, %Eswap1
  %shl682 = shl i32 %and680, 16
  %133 = load i32, i32* %arrayidx683, align 4, !tbaa !4
  %xor684 = xor i32 %xor676, %133
  %xor685 = xor i32 %xor684, %and680
  %xor686 = xor i32 %xor685, %shl682
  %shl687 = shl i32 %and681, 16
  %134 = load i32, i32* %arrayidx688, align 4, !tbaa !4
  %xor689 = xor i32 %xor676, %134
  %xor690 = xor i32 %xor689, %and681
  %xor691 = xor i32 %xor690, %shl687
  %135 = tail call i32 asm "rorl $1,$0", "=r,I,0,~{cc},~{dirflag},~{fpsr},~{flags}"(i32 4, i32 %xor691) #1, !srcloc !20
  %shr694 = lshr i32 %xor685, 2
  %and695 = and i32 %shr694, 63
  %idxprom696 = zext i32 %and695 to i64
  %arrayidx697 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 0, i64 %idxprom696
  %136 = load i32, i32* %arrayidx697, align 4, !tbaa !4
  %shr698 = lshr i32 %xor685, 10
  %and699 = and i32 %shr698, 63
  %idxprom700 = zext i32 %and699 to i64
  %arrayidx701 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 2, i64 %idxprom700
  %137 = load i32, i32* %arrayidx701, align 4, !tbaa !4
  %shr703 = lshr i32 %xor686, 18
  %and704 = and i32 %shr703, 63
  %idxprom705 = zext i32 %and704 to i64
  %arrayidx706 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 4, i64 %idxprom705
  %138 = load i32, i32* %arrayidx706, align 4, !tbaa !4
  %shr708 = lshr i32 %xor686, 26
  %idxprom710 = zext i32 %shr708 to i64
  %arrayidx711 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 6, i64 %idxprom710
  %139 = load i32, i32* %arrayidx711, align 4, !tbaa !4
  %shr713 = lshr i32 %135, 2
  %and714 = and i32 %shr713, 63
  %idxprom715 = zext i32 %and714 to i64
  %arrayidx716 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 1, i64 %idxprom715
  %140 = load i32, i32* %arrayidx716, align 4, !tbaa !4
  %shr718 = lshr i32 %135, 10
  %and719 = and i32 %shr718, 63
  %idxprom720 = zext i32 %and719 to i64
  %arrayidx721 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 3, i64 %idxprom720
  %141 = load i32, i32* %arrayidx721, align 4, !tbaa !4
  %shr723 = lshr i32 %135, 18
  %and724 = and i32 %shr723, 63
  %idxprom725 = zext i32 %and724 to i64
  %arrayidx726 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 5, i64 %idxprom725
  %142 = load i32, i32* %arrayidx726, align 4, !tbaa !4
  %shr728 = lshr i32 %135, 26
  %idxprom730 = zext i32 %shr728 to i64
  %arrayidx731 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 7, i64 %idxprom730
  %143 = load i32, i32* %arrayidx731, align 4, !tbaa !4
  %xor702 = xor i32 %136, %xor619
  %xor707 = xor i32 %xor702, %137
  %xor712 = xor i32 %xor707, %138
  %xor717 = xor i32 %xor712, %139
  %xor722 = xor i32 %xor717, %140
  %xor727 = xor i32 %xor722, %141
  %xor732 = xor i32 %xor727, %142
  %xor733 = xor i32 %xor732, %143
  %shr735 = lshr i32 %xor733, 16
  %xor736 = xor i32 %shr735, %xor733
  %and737 = and i32 %xor736, %Eswap0
  %and738 = and i32 %xor736, %Eswap1
  %shl739 = shl i32 %and737, 16
  %144 = load i32, i32* %arrayidx740, align 4, !tbaa !4
  %xor741 = xor i32 %xor733, %144
  %xor742 = xor i32 %xor741, %and737
  %xor743 = xor i32 %xor742, %shl739
  %shl744 = shl i32 %and738, 16
  %145 = load i32, i32* %arrayidx745, align 4, !tbaa !4
  %xor746 = xor i32 %xor733, %145
  %xor747 = xor i32 %xor746, %and738
  %xor748 = xor i32 %xor747, %shl744
  %146 = tail call i32 asm "rorl $1,$0", "=r,I,0,~{cc},~{dirflag},~{fpsr},~{flags}"(i32 4, i32 %xor748) #1, !srcloc !21
  %shr751 = lshr i32 %xor742, 2
  %and752 = and i32 %shr751, 63
  %idxprom753 = zext i32 %and752 to i64
  %arrayidx754 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 0, i64 %idxprom753
  %147 = load i32, i32* %arrayidx754, align 4, !tbaa !4
  %shr755 = lshr i32 %xor742, 10
  %and756 = and i32 %shr755, 63
  %idxprom757 = zext i32 %and756 to i64
  %arrayidx758 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 2, i64 %idxprom757
  %148 = load i32, i32* %arrayidx758, align 4, !tbaa !4
  %shr760 = lshr i32 %xor743, 18
  %and761 = and i32 %shr760, 63
  %idxprom762 = zext i32 %and761 to i64
  %arrayidx763 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 4, i64 %idxprom762
  %149 = load i32, i32* %arrayidx763, align 4, !tbaa !4
  %shr765 = lshr i32 %xor743, 26
  %idxprom767 = zext i32 %shr765 to i64
  %arrayidx768 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 6, i64 %idxprom767
  %150 = load i32, i32* %arrayidx768, align 4, !tbaa !4
  %shr770 = lshr i32 %146, 2
  %and771 = and i32 %shr770, 63
  %idxprom772 = zext i32 %and771 to i64
  %arrayidx773 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 1, i64 %idxprom772
  %151 = load i32, i32* %arrayidx773, align 4, !tbaa !4
  %shr775 = lshr i32 %146, 10
  %and776 = and i32 %shr775, 63
  %idxprom777 = zext i32 %and776 to i64
  %arrayidx778 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 3, i64 %idxprom777
  %152 = load i32, i32* %arrayidx778, align 4, !tbaa !4
  %shr780 = lshr i32 %146, 18
  %and781 = and i32 %shr780, 63
  %idxprom782 = zext i32 %and781 to i64
  %arrayidx783 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 5, i64 %idxprom782
  %153 = load i32, i32* %arrayidx783, align 4, !tbaa !4
  %shr785 = lshr i32 %146, 26
  %idxprom787 = zext i32 %shr785 to i64
  %arrayidx788 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 7, i64 %idxprom787
  %154 = load i32, i32* %arrayidx788, align 4, !tbaa !4
  %xor759 = xor i32 %147, %xor676
  %xor764 = xor i32 %xor759, %148
  %xor769 = xor i32 %xor764, %149
  %xor774 = xor i32 %xor769, %150
  %xor779 = xor i32 %xor774, %151
  %xor784 = xor i32 %xor779, %152
  %xor789 = xor i32 %xor784, %153
  %xor790 = xor i32 %xor789, %154
  %shr792 = lshr i32 %xor790, 16
  %xor793 = xor i32 %shr792, %xor790
  %and794 = and i32 %xor793, %Eswap0
  %and795 = and i32 %xor793, %Eswap1
  %shl796 = shl i32 %and794, 16
  %155 = load i32, i32* %arrayidx797, align 4, !tbaa !4
  %xor798 = xor i32 %xor790, %155
  %xor799 = xor i32 %xor798, %and794
  %xor800 = xor i32 %xor799, %shl796
  %shl801 = shl i32 %and795, 16
  %156 = load i32, i32* %arrayidx802, align 4, !tbaa !4
  %xor803 = xor i32 %xor790, %156
  %xor804 = xor i32 %xor803, %and795
  %xor805 = xor i32 %xor804, %shl801
  %157 = tail call i32 asm "rorl $1,$0", "=r,I,0,~{cc},~{dirflag},~{fpsr},~{flags}"(i32 4, i32 %xor805) #1, !srcloc !22
  %shr808 = lshr i32 %xor799, 2
  %and809 = and i32 %shr808, 63
  %idxprom810 = zext i32 %and809 to i64
  %arrayidx811 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 0, i64 %idxprom810
  %158 = load i32, i32* %arrayidx811, align 4, !tbaa !4
  %shr812 = lshr i32 %xor799, 10
  %and813 = and i32 %shr812, 63
  %idxprom814 = zext i32 %and813 to i64
  %arrayidx815 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 2, i64 %idxprom814
  %159 = load i32, i32* %arrayidx815, align 4, !tbaa !4
  %shr817 = lshr i32 %xor800, 18
  %and818 = and i32 %shr817, 63
  %idxprom819 = zext i32 %and818 to i64
  %arrayidx820 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 4, i64 %idxprom819
  %160 = load i32, i32* %arrayidx820, align 4, !tbaa !4
  %shr822 = lshr i32 %xor800, 26
  %idxprom824 = zext i32 %shr822 to i64
  %arrayidx825 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 6, i64 %idxprom824
  %161 = load i32, i32* %arrayidx825, align 4, !tbaa !4
  %shr827 = lshr i32 %157, 2
  %and828 = and i32 %shr827, 63
  %idxprom829 = zext i32 %and828 to i64
  %arrayidx830 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 1, i64 %idxprom829
  %162 = load i32, i32* %arrayidx830, align 4, !tbaa !4
  %shr832 = lshr i32 %157, 10
  %and833 = and i32 %shr832, 63
  %idxprom834 = zext i32 %and833 to i64
  %arrayidx835 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 3, i64 %idxprom834
  %163 = load i32, i32* %arrayidx835, align 4, !tbaa !4
  %shr837 = lshr i32 %157, 18
  %and838 = and i32 %shr837, 63
  %idxprom839 = zext i32 %and838 to i64
  %arrayidx840 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 5, i64 %idxprom839
  %164 = load i32, i32* %arrayidx840, align 4, !tbaa !4
  %shr842 = lshr i32 %157, 26
  %idxprom844 = zext i32 %shr842 to i64
  %arrayidx845 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 7, i64 %idxprom844
  %165 = load i32, i32* %arrayidx845, align 4, !tbaa !4
  %xor816 = xor i32 %158, %xor733
  %xor821 = xor i32 %xor816, %159
  %xor826 = xor i32 %xor821, %160
  %xor831 = xor i32 %xor826, %161
  %xor836 = xor i32 %xor831, %162
  %xor841 = xor i32 %xor836, %163
  %xor846 = xor i32 %xor841, %164
  %xor847 = xor i32 %xor846, %165
  %shr849 = lshr i32 %xor847, 16
  %xor850 = xor i32 %shr849, %xor847
  %and851 = and i32 %xor850, %Eswap0
  %and852 = and i32 %xor850, %Eswap1
  %shl853 = shl i32 %and851, 16
  %166 = load i32, i32* %arrayidx854, align 4, !tbaa !4
  %xor855 = xor i32 %xor847, %166
  %xor856 = xor i32 %xor855, %and851
  %xor857 = xor i32 %xor856, %shl853
  %shl858 = shl i32 %and852, 16
  %167 = load i32, i32* %arrayidx859, align 4, !tbaa !4
  %xor860 = xor i32 %xor847, %167
  %xor861 = xor i32 %xor860, %and852
  %xor862 = xor i32 %xor861, %shl858
  %168 = tail call i32 asm "rorl $1,$0", "=r,I,0,~{cc},~{dirflag},~{fpsr},~{flags}"(i32 4, i32 %xor862) #1, !srcloc !23
  %shr865 = lshr i32 %xor856, 2
  %and866 = and i32 %shr865, 63
  %idxprom867 = zext i32 %and866 to i64
  %arrayidx868 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 0, i64 %idxprom867
  %169 = load i32, i32* %arrayidx868, align 4, !tbaa !4
  %shr869 = lshr i32 %xor856, 10
  %and870 = and i32 %shr869, 63
  %idxprom871 = zext i32 %and870 to i64
  %arrayidx872 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 2, i64 %idxprom871
  %170 = load i32, i32* %arrayidx872, align 4, !tbaa !4
  %shr874 = lshr i32 %xor857, 18
  %and875 = and i32 %shr874, 63
  %idxprom876 = zext i32 %and875 to i64
  %arrayidx877 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 4, i64 %idxprom876
  %171 = load i32, i32* %arrayidx877, align 4, !tbaa !4
  %shr879 = lshr i32 %xor857, 26
  %idxprom881 = zext i32 %shr879 to i64
  %arrayidx882 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 6, i64 %idxprom881
  %172 = load i32, i32* %arrayidx882, align 4, !tbaa !4
  %shr884 = lshr i32 %168, 2
  %and885 = and i32 %shr884, 63
  %idxprom886 = zext i32 %and885 to i64
  %arrayidx887 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 1, i64 %idxprom886
  %173 = load i32, i32* %arrayidx887, align 4, !tbaa !4
  %shr889 = lshr i32 %168, 10
  %and890 = and i32 %shr889, 63
  %idxprom891 = zext i32 %and890 to i64
  %arrayidx892 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 3, i64 %idxprom891
  %174 = load i32, i32* %arrayidx892, align 4, !tbaa !4
  %shr894 = lshr i32 %168, 18
  %and895 = and i32 %shr894, 63
  %idxprom896 = zext i32 %and895 to i64
  %arrayidx897 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 5, i64 %idxprom896
  %175 = load i32, i32* %arrayidx897, align 4, !tbaa !4
  %shr899 = lshr i32 %168, 26
  %idxprom901 = zext i32 %shr899 to i64
  %arrayidx902 = getelementptr inbounds [8 x [64 x i32]], [8 x [64 x i32]]* @DES_SPtrans, i64 0, i64 7, i64 %idxprom901
  %176 = load i32, i32* %arrayidx902, align 4, !tbaa !4
  %xor873 = xor i32 %169, %xor790
  %xor878 = xor i32 %xor873, %170
  %xor883 = xor i32 %xor878, %171
  %xor888 = xor i32 %xor883, %172
  %xor893 = xor i32 %xor888, %173
  %xor898 = xor i32 %xor893, %174
  %xor903 = xor i32 %xor898, %175
  %xor904 = xor i32 %xor903, %176
  %inc = add nuw nsw i32 %j.01462, 1
  %exitcond.not = icmp eq i32 %inc, 25
  br i1 %exitcond.not, label %for.end, label %for.body, !llvm.loop !24

for.end:                                          ; preds = %for.body
  %177 = tail call i32 asm "rorl $1,$0", "=r,I,0,~{cc},~{dirflag},~{fpsr},~{flags}"(i32 3, i32 %xor904) #1, !srcloc !26
  %178 = tail call i32 asm "rorl $1,$0", "=r,I,0,~{cc},~{dirflag},~{fpsr},~{flags}"(i32 3, i32 %xor847) #1, !srcloc !27
  %shr914 = lshr i32 %177, 1
  %xor915 = xor i32 %shr914, %178
  %179 = and i32 %xor915, 1431655765
  %xor919 = xor i32 %179, %178
  %shl920 = shl nuw i32 %179, 1
  %xor921 = xor i32 %shl920, %177
  %shr922 = lshr i32 %xor919, 8
  %xor923 = xor i32 %shr922, %xor921
  %180 = and i32 %xor923, 16711935
  %xor927 = xor i32 %180, %xor921
  %shl928 = shl nuw i32 %180, 8
  %xor929 = xor i32 %shl928, %xor919
  %shr930 = lshr i32 %xor927, 2
  %xor931 = xor i32 %shr930, %xor929
  %181 = and i32 %xor931, 858993459
  %xor935 = xor i32 %181, %xor929
  %shl936 = shl nuw i32 %181, 2
  %xor937 = xor i32 %shl936, %xor927
  %shr938 = lshr i32 %xor935, 16
  %xor937.masked = and i32 %xor937, 65535
  %182 = xor i32 %xor937.masked, %shr938
  %xor943 = xor i32 %182, %xor937
  %shl944 = shl nuw i32 %182, 16
  %xor945 = xor i32 %shl944, %xor935
  %shr946 = lshr i32 %xor943, 4
  %xor947 = xor i32 %shr946, %xor945
  %183 = and i32 %xor947, 252645135
  %xor951 = xor i32 %183, %xor945
  %shl952 = shl nuw i32 %183, 4
  %xor953 = xor i32 %shl952, %xor943
  store i32 %xor951, i32* %out, align 4, !tbaa !4
  %arrayidx955 = getelementptr inbounds i32, i32* %out, i64 1
  store i32 %xor953, i32* %arrayidx955, align 4, !tbaa !4
  ret void
}

attributes #0 = { noinline nounwind uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-builtins" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nounwind readnone }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"uwtable", i32 1}
!3 = !{!"clang version 14.0.0"}
!4 = !{!5, !5, i64 0}
!5 = !{!"int", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C/C++ TBAA"}
!8 = !{i64 2147888224}
!9 = !{i64 2147889271}
!10 = !{i64 2147890318}
!11 = !{i64 2147891365}
!12 = !{i64 2147892412}
!13 = !{i64 2147893463}
!14 = !{i64 2147894514}
!15 = !{i64 2147895565}
!16 = !{i64 2147896616}
!17 = !{i64 2147897667}
!18 = !{i64 2147898718}
!19 = !{i64 2147899769}
!20 = !{i64 2147900820}
!21 = !{i64 2147901871}
!22 = !{i64 2147902922}
!23 = !{i64 2147903973}
!24 = distinct !{!24, !25}
!25 = !{!"llvm.loop.mustprogress"}
!26 = !{i64 2147904328}
!27 = !{i64 2147904683}
