; ModuleID = 'test/poly1305_internal_test.c'
source_filename = "test/poly1305_internal_test.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.SIZED_DATA = type { i64, [1024 x i8] }
%struct.poly1305_context = type { [24 x double], [4 x i32], [16 x i8], i64, %struct.anon }
%struct.anon = type { void (i8*, i8*, i64, i32)*, void (i8*, i8*, i32*)* }
%struct.TESTDATA = type { %struct.SIZED_DATA, %struct.SIZED_DATA, %struct.SIZED_DATA }

@.str = private unnamed_addr constant [14 x i8] c"test_poly1305\00", align 1
@.str.1 = private unnamed_addr constant [30 x i8] c"test/poly1305_internal_test.c\00", align 1
@.str.2 = private unnamed_addr constant [12 x i8] c"expectedlen\00", align 1
@.str.3 = private unnamed_addr constant [12 x i8] c"sizeof(out)\00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c"out\00", align 1
@.str.5 = private unnamed_addr constant [9 x i8] c"expected\00", align 1
@.str.6 = private unnamed_addr constant [26 x i8] c"Poly1305 test #%d failed.\00", align 1
@.str.7 = private unnamed_addr constant [34 x i8] c"Poly1305 test #%d/1+(N-1) failed.\00", align 1
@.str.8 = private unnamed_addr constant [28 x i8] c"Poly1305 test #%d/2 failed.\00", align 1
@.str.9 = private unnamed_addr constant [34 x i8] c"Poly1305 test #%d/%zu+%zu failed.\00", align 1
@tests = internal unnamed_addr constant <{ { { i64, <{ [34 x i8], [990 x i8] }> }, { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } }, { { i64, <{ i8, i8, [1022 x i8] }> }, { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } }, { %struct.SIZED_DATA, { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } }, { { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } }, { { i64, <{ [63 x i8], [961 x i8] }> }, { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } }, { { i64, <{ [64 x i8], [960 x i8] }> }, { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } }, { { i64, <{ [48 x i8], [976 x i8] }> }, { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } }, { { i64, <{ [96 x i8], [928 x i8] }> }, { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } }, { { i64, <{ [112 x i8], [912 x i8] }> }, { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } }, { { i64, <{ [128 x i8], [896 x i8] }> }, { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } }, { { i64, <{ [144 x i8], [880 x i8] }> }, { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } }, { { i64, <{ [160 x i8], [864 x i8] }> }, { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } }, { { i64, <{ [288 x i8], [736 x i8] }> }, { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } }, { { i64, <{ [320 x i8], [704 x i8] }> }, { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } }, { { i64, <{ [256 x i8], [768 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } }, { { i64, <{ [252 x i8], [772 x i8] }> }, { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } }, { { i64, <{ [208 x i8], [816 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } }, { %struct.SIZED_DATA, { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } }, { { i64, <{ [12 x i8], [1012 x i8] }> }, { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } }, { %struct.SIZED_DATA, { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } }, { { i64, <{ [128 x i8], [896 x i8] }> }, { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } }, { { i64, <{ [528 x i8], [496 x i8] }> }, { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } }, { { i64, <{ [257 x i8], [767 x i8] }> }, { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } }, { { i64, <{ [39 x i8], [985 x i8] }> }, { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } }, { { i64, <{ i8, i8, [1022 x i8] }> }, { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } }, { { i64, <{ [415 x i8], [609 x i8] }> }, { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } }, { { i64, <{ [118 x i8], [906 x i8] }> }, { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } }, { { i64, <{ [131 x i8], [893 x i8] }> }, { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } }, { { i64, <{ [16 x i8], [1008 x i8] }> }, { i64, <{ i8, [1023 x i8] }> }, { i64, <{ i8, [1023 x i8] }> } }, { { i64, <{ i8, [1023 x i8] }> }, { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ i8, [1023 x i8] }> } }, { { i64, <{ [33 x i8], [991 x i8] }> }, { i64, <{ i8, [1023 x i8] }> }, { i64, <{ i8, [1023 x i8] }> } }, { { i64, <{ [48 x i8], [976 x i8] }> }, { i64, <{ i8, [1023 x i8] }> }, %struct.SIZED_DATA }, { { i64, <{ [16 x i8], [1008 x i8] }> }, { i64, <{ i8, [1023 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } }, { { i64, <{ [49 x i8], [975 x i8] }> }, { i64, <{ [9 x i8], [1015 x i8] }> }, { i64, <{ [9 x i8], [1015 x i8] }> } }, { { i64, <{ [25 x i8], [999 x i8] }> }, { i64, <{ [9 x i8], [1015 x i8] }> }, { i64, <{ i8, [1023 x i8] }> } } }> <{ { { i64, <{ [34 x i8], [990 x i8] }> }, { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } } { { i64, <{ [34 x i8], [990 x i8] }> } { i64 34, <{ [34 x i8], [990 x i8] }> <{ [34 x i8] c"Cryptographic Forum Research Group", [990 x i8] zeroinitializer }> }, { i64, <{ [32 x i8], [992 x i8] }> } { i64 32, <{ [32 x i8], [992 x i8] }> <{ [32 x i8] c"\85\D6\BExWUm3\7FDR\FEB\D5\06\A8\01\03\80\8A\FB\0D\B2\FDJ\BF\F6\AFAI\F5\1B", [992 x i8] zeroinitializer }> }, { i64, <{ [16 x i8], [1008 x i8] }> } { i64 16, <{ [16 x i8], [1008 x i8] }> <{ [16 x i8] c"\A8\06\1D\C10Q6\C6\C2+\8B\AF\0C\01'\A9", [1008 x i8] zeroinitializer }> } }, { { i64, <{ i8, i8, [1022 x i8] }> }, { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } } { { i64, <{ i8, i8, [1022 x i8] }> } { i64 2, <{ i8, i8, [1022 x i8] }> <{ i8 -13, i8 -10, [1022 x i8] zeroinitializer }> }, { i64, <{ [32 x i8], [992 x i8] }> } { i64 32, <{ [32 x i8], [992 x i8] }> <{ [32 x i8] c"\85\1F\C4\0C4g\AC\0B\E0\\\C2\04\04\F3\F7\00X\0B;\0F\94G\BB\1Ei\D0\95\B5\92\8Bm\BC", [992 x i8] zeroinitializer }> }, { i64, <{ [16 x i8], [1008 x i8] }> } { i64 16, <{ [16 x i8], [1008 x i8] }> <{ [16 x i8] c"\F4\C63\C3\04O\C1E\F8O3\\\B8\19S\DE", [1008 x i8] zeroinitializer }> } }, { %struct.SIZED_DATA, { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } } { %struct.SIZED_DATA zeroinitializer, { i64, <{ [32 x i8], [992 x i8] }> } { i64 32, <{ [32 x i8], [992 x i8] }> <{ [32 x i8] c"\A0\F3\08\00\00\F4d\00\D0\C7\E9\07l\83D\03\DD?\AB\22Q\F1\1A\C7Y\F0\88q)\CC.\E7", [992 x i8] zeroinitializer }> }, { i64, <{ [16 x i8], [1008 x i8] }> } { i64 16, <{ [16 x i8], [1008 x i8] }> <{ [16 x i8] c"\DD?\AB\22Q\F1\1A\C7Y\F0\88q)\CC.\E7", [1008 x i8] zeroinitializer }> } }, { { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } } { { i64, <{ [32 x i8], [992 x i8] }> } { i64 32, <{ [32 x i8], [992 x i8] }> <{ [32 x i8] c"f<\EA\19\0F\FB\83\D8\95\93\F3\F4v\B6\BC$\D7\E6y\10~\A2j\DB\8C\AFfR\D0ea6", [992 x i8] zeroinitializer }> }, { i64, <{ [32 x i8], [992 x i8] }> } { i64 32, <{ [32 x i8], [992 x i8] }> <{ [32 x i8] c"HD=\0B\B0\D2\11\09\C8\9A\10\0B\\\E2\C2\08\83\14\9Ci\B5a\DD\88)\8A\17\98\B1\07\16\EF", [992 x i8] zeroinitializer }> }, { i64, <{ [16 x i8], [1008 x i8] }> } { i64 16, <{ [16 x i8], [1008 x i8] }> <{ [16 x i8] c"\0E\E1\C1k\B7?\0FO\D1\98\81u<\01\CD\BE", [1008 x i8] zeroinitializer }> } }, { { i64, <{ [63 x i8], [961 x i8] }> }, { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } } { { i64, <{ [63 x i8], [961 x i8] }> } { i64 63, <{ [63 x i8], [961 x i8] }> <{ [63 x i8] c"\AB\08\12rJ\7F\1E4'B\CB\ED7M\94\D16\C6\B8y]E\B3\81\980\F2\C0D\91\FA\F0\99\0Cb\E4\8B\80\18\B2\C3\E4\A0\FA14\CBg\FA\83\E1X\C9\94\D9a\C4\CB!\09\\\1B\F9", [961 x i8] zeroinitializer }> }, { i64, <{ [32 x i8], [992 x i8] }> } { i64 32, <{ [32 x i8], [992 x i8] }> <{ [32 x i8] c"\12\97j\08\C4Bm\0C\E8\A8$\07\C4\F4\82\07\80\F8\C2\0A\A7\12\02\D1\E2\91y\CB\CBUZW", [992 x i8] zeroinitializer }> }, { i64, <{ [16 x i8], [1008 x i8] }> } { i64 16, <{ [16 x i8], [1008 x i8] }> <{ [16 x i8] c"QT\AD\0D,\B2n\01'O\C5\11HI\1F\1B", [1008 x i8] zeroinitializer }> } }, { { i64, <{ [64 x i8], [960 x i8] }> }, { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } } { { i64, <{ [64 x i8], [960 x i8] }> } { i64 64, <{ [64 x i8], [960 x i8] }> <{ [64 x i8] c"\AB\08\12rJ\7F\1E4'B\CB\ED7M\94\D16\C6\B8y]E\B3\81\980\F2\C0D\91\FA\F0\99\0Cb\E4\8B\80\18\B2\C3\E4\A0\FA14\CBg\FA\83\E1X\C9\94\D9a\C4\CB!\09\\\1B\F9\AF", [960 x i8] zeroinitializer }> }, { i64, <{ [32 x i8], [992 x i8] }> } { i64 32, <{ [32 x i8], [992 x i8] }> <{ [32 x i8] c"\12\97j\08\C4Bm\0C\E8\A8$\07\C4\F4\82\07\80\F8\C2\0A\A7\12\02\D1\E2\91y\CB\CBUZW", [992 x i8] zeroinitializer }> }, { i64, <{ [16 x i8], [1008 x i8] }> } { i64 16, <{ [16 x i8], [1008 x i8] }> <{ [16 x i8] c"\81 Y\A5\DA\19\867\CA\C7\C4\A61\BE\E4f", [1008 x i8] zeroinitializer }> } }, { { i64, <{ [48 x i8], [976 x i8] }> }, { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } } { { i64, <{ [48 x i8], [976 x i8] }> } { i64 48, <{ [48 x i8], [976 x i8] }> <{ [48 x i8] c"\AB\08\12rJ\7F\1E4'B\CB\ED7M\94\D16\C6\B8y]E\B3\81\980\F2\C0D\91\FA\F0\99\0Cb\E4\8B\80\18\B2\C3\E4\A0\FA14\CBg", [976 x i8] zeroinitializer }> }, { i64, <{ [32 x i8], [992 x i8] }> } { i64 32, <{ [32 x i8], [992 x i8] }> <{ [32 x i8] c"\12\97j\08\C4Bm\0C\E8\A8$\07\C4\F4\82\07\80\F8\C2\0A\A7\12\02\D1\E2\91y\CB\CBUZW", [992 x i8] zeroinitializer }> }, { i64, <{ [16 x i8], [1008 x i8] }> } { i64 16, <{ [16 x i8], [1008 x i8] }> <{ [16 x i8] c"[\88\D7\F6\22\8B\11\E2\E2\85y\A5\C0\C1\F7a", [1008 x i8] zeroinitializer }> } }, { { i64, <{ [96 x i8], [928 x i8] }> }, { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } } { { i64, <{ [96 x i8], [928 x i8] }> } { i64 96, <{ [96 x i8], [928 x i8] }> <{ [96 x i8] c"\AB\08\12rJ\7F\1E4'B\CB\ED7M\94\D16\C6\B8y]E\B3\81\980\F2\C0D\91\FA\F0\99\0Cb\E4\8B\80\18\B2\C3\E4\A0\FA14\CBg\FA\83\E1X\C9\94\D9a\C4\CB!\09\\\1B\F9\AFf<\EA\19\0F\FB\83\D8\95\93\F3\F4v\B6\BC$\D7\E6y\10~\A2j\DB\8C\AFfR\D0ea6", [928 x i8] zeroinitializer }> }, { i64, <{ [32 x i8], [992 x i8] }> } { i64 32, <{ [32 x i8], [992 x i8] }> <{ [32 x i8] c"\12\97j\08\C4Bm\0C\E8\A8$\07\C4\F4\82\07\80\F8\C2\0A\A7\12\02\D1\E2\91y\CB\CBUZW", [992 x i8] zeroinitializer }> }, { i64, <{ [16 x i8], [1008 x i8] }> } { i64 16, <{ [16 x i8], [1008 x i8] }> <{ [16 x i8] c"\BB\B6\13\B2\B6\D7S\BA\079[\91j\AE\CE\15", [1008 x i8] zeroinitializer }> } }, { { i64, <{ [112 x i8], [912 x i8] }> }, { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } } { { i64, <{ [112 x i8], [912 x i8] }> } { i64 112, <{ [112 x i8], [912 x i8] }> <{ [112 x i8] c"\AB\08\12rJ\7F\1E4'B\CB\ED7M\94\D16\C6\B8y]E\B3\81\980\F2\C0D\91\FA\F0\99\0Cb\E4\8B\80\18\B2\C3\E4\A0\FA14\CBg\FA\83\E1X\C9\94\D9a\C4\CB!\09\\\1B\F9\AFHD=\0B\B0\D2\11\09\C8\9A\10\0B\\\E2\C2\08\83\14\9Ci\B5a\DD\88)\8A\17\98\B1\07\16\EFf<\EA\19\0F\FB\83\D8\95\93\F3\F4v\B6\BC$", [912 x i8] zeroinitializer }> }, { i64, <{ [32 x i8], [992 x i8] }> } { i64 32, <{ [32 x i8], [992 x i8] }> <{ [32 x i8] c"\12\97j\08\C4Bm\0C\E8\A8$\07\C4\F4\82\07\80\F8\C2\0A\A7\12\02\D1\E2\91y\CB\CBUZW", [992 x i8] zeroinitializer }> }, { i64, <{ [16 x i8], [1008 x i8] }> } { i64 16, <{ [16 x i8], [1008 x i8] }> <{ [16 x i8] c"\C7\94\D7\05}\17x\C4\BB\EE\0A9\B3\D9sB", [1008 x i8] zeroinitializer }> } }, { { i64, <{ [128 x i8], [896 x i8] }> }, { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } } { { i64, <{ [128 x i8], [896 x i8] }> } { i64 128, <{ [128 x i8], [896 x i8] }> <{ [128 x i8] c"\AB\08\12rJ\7F\1E4'B\CB\ED7M\94\D16\C6\B8y]E\B3\81\980\F2\C0D\91\FA\F0\99\0Cb\E4\8B\80\18\B2\C3\E4\A0\FA14\CBg\FA\83\E1X\C9\94\D9a\C4\CB!\09\\\1B\F9\AFHD=\0B\B0\D2\11\09\C8\9A\10\0B\\\E2\C2\08\83\14\9Ci\B5a\DD\88)\8A\17\98\B1\07\16\EFf<\EA\19\0F\FB\83\D8\95\93\F3\F4v\B6\BC$\D7\E6y\10~\A2j\DB\8C\AFfR\D0ea6", [896 x i8] zeroinitializer }> }, { i64, <{ [32 x i8], [992 x i8] }> } { i64 32, <{ [32 x i8], [992 x i8] }> <{ [32 x i8] c"\12\97j\08\C4Bm\0C\E8\A8$\07\C4\F4\82\07\80\F8\C2\0A\A7\12\02\D1\E2\91y\CB\CBUZW", [992 x i8] zeroinitializer }> }, { i64, <{ [16 x i8], [1008 x i8] }> } { i64 16, <{ [16 x i8], [1008 x i8] }> <{ [16 x i8] c"\FF\BC\B9\B3qB1R\D7\FC\A5\AD\04/\BA\A9", [1008 x i8] zeroinitializer }> } }, { { i64, <{ [144 x i8], [880 x i8] }> }, { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } } { { i64, <{ [144 x i8], [880 x i8] }> } { i64 144, <{ [144 x i8], [880 x i8] }> <{ [144 x i8] c"\AB\08\12rJ\7F\1E4'B\CB\ED7M\94\D16\C6\B8y]E\B3\81\980\F2\C0D\91\FA\F0\99\0Cb\E4\8B\80\18\B2\C3\E4\A0\FA14\CBg\FA\83\E1X\C9\94\D9a\C4\CB!\09\\\1B\F9\AFHD=\0B\B0\D2\11\09\C8\9A\10\0B\\\E2\C2\08\83\14\9Ci\B5a\DD\88)\8A\17\98\B1\07\16\EFf<\EA\19\0F\FB\83\D8\95\93\F3\F4v\B6\BC$\D7\E6y\10~\A2j\DB\8C\AFfR\D0ea6\81 Y\A5\DA\19\867\CA\C7\C4\A61\BE\E4f", [880 x i8] zeroinitializer }> }, { i64, <{ [32 x i8], [992 x i8] }> } { i64 32, <{ [32 x i8], [992 x i8] }> <{ [32 x i8] c"\12\97j\08\C4Bm\0C\E8\A8$\07\C4\F4\82\07\80\F8\C2\0A\A7\12\02\D1\E2\91y\CB\CBUZW", [992 x i8] zeroinitializer }> }, { i64, <{ [16 x i8], [1008 x i8] }> } { i64 16, <{ [16 x i8], [1008 x i8] }> <{ [16 x i8] c"\06\9E\D6\B8\EF\0F {>$;\B1\01\9F\E62", [1008 x i8] zeroinitializer }> } }, { { i64, <{ [160 x i8], [864 x i8] }> }, { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } } { { i64, <{ [160 x i8], [864 x i8] }> } { i64 160, <{ [160 x i8], [864 x i8] }> <{ [160 x i8] c"\AB\08\12rJ\7F\1E4'B\CB\ED7M\94\D16\C6\B8y]E\B3\81\980\F2\C0D\91\FA\F0\99\0Cb\E4\8B\80\18\B2\C3\E4\A0\FA14\CBg\FA\83\E1X\C9\94\D9a\C4\CB!\09\\\1B\F9\AFHD=\0B\B0\D2\11\09\C8\9A\10\0B\\\E2\C2\08\83\14\9Ci\B5a\DD\88)\8A\17\98\B1\07\16\EFf<\EA\19\0F\FB\83\D8\95\93\F3\F4v\B6\BC$\D7\E6y\10~\A2j\DB\8C\AFfR\D0ea6\81 Y\A5\DA\19\867\CA\C7\C4\A61\BE\E4f[\88\D7\F6\22\8B\11\E2\E2\85y\A5\C0\C1\F7a", [864 x i8] zeroinitializer }> }, { i64, <{ [32 x i8], [992 x i8] }> } { i64 32, <{ [32 x i8], [992 x i8] }> <{ [32 x i8] c"\12\97j\08\C4Bm\0C\E8\A8$\07\C4\F4\82\07\80\F8\C2\0A\A7\12\02\D1\E2\91y\CB\CBUZW", [992 x i8] zeroinitializer }> }, { i64, <{ [16 x i8], [1008 x i8] }> } { i64 16, <{ [16 x i8], [1008 x i8] }> <{ [16 x i8] c"\CC\A39\D9\A4_\A26\8C,h\B3\A4\17\913", [1008 x i8] zeroinitializer }> } }, { { i64, <{ [288 x i8], [736 x i8] }> }, { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } } { { i64, <{ [288 x i8], [736 x i8] }> } { i64 288, <{ [288 x i8], [736 x i8] }> <{ [288 x i8] c"\AB\08\12rJ\7F\1E4'B\CB\ED7M\94\D16\C6\B8y]E\B3\81\980\F2\C0D\91\FA\F0\99\0Cb\E4\8B\80\18\B2\C3\E4\A0\FA14\CBg\FA\83\E1X\C9\94\D9a\C4\CB!\09\\\1B\F9\AFHD=\0B\B0\D2\11\09\C8\9A\10\0B\\\E2\C2\08\83\14\9Ci\B5a\DD\88)\8A\17\98\B1\07\16\EFf<\EA\19\0F\FB\83\D8\95\93\F3\F4v\B6\BC$\D7\E6y\10~\A2j\DB\8C\AFfR\D0ea6\81 Y\A5\DA\19\867\CA\C7\C4\A61\BE\E4f[\88\D7\F6\22\8B\11\E2\E2\85y\A5\C0\C1\F7a\AB\08\12rJ\7F\1E4'B\CB\ED7M\94\D16\C6\B8y]E\B3\81\980\F2\C0D\91\FA\F0\99\0Cb\E4\8B\80\18\B2\C3\E4\A0\FA14\CBg\FA\83\E1X\C9\94\D9a\C4\CB!\09\\\1B\F9\AFHD=\0B\B0\D2\11\09\C8\9A\10\0B\\\E2\C2\08\83\14\9Ci\B5a\DD\88)\8A\17\98\B1\07\16\EFf<\EA\19\0F\FB\83\D8\95\93\F3\F4v\B6\BC$\D7\E6y\10~\A2j\DB\8C\AFfR\D0ea6", [736 x i8] zeroinitializer }> }, { i64, <{ [32 x i8], [992 x i8] }> } { i64 32, <{ [32 x i8], [992 x i8] }> <{ [32 x i8] c"\12\97j\08\C4Bm\0C\E8\A8$\07\C4\F4\82\07\80\F8\C2\0A\A7\12\02\D1\E2\91y\CB\CBUZW", [992 x i8] zeroinitializer }> }, { i64, <{ [16 x i8], [1008 x i8] }> } { i64 16, <{ [16 x i8], [1008 x i8] }> <{ [16 x i8] c"S\F6\E8(\A2\F0\FE\0E\E8\15\BF\0B\D5\84\1A4", [1008 x i8] zeroinitializer }> } }, { { i64, <{ [320 x i8], [704 x i8] }> }, { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } } { { i64, <{ [320 x i8], [704 x i8] }> } { i64 320, <{ [320 x i8], [704 x i8] }> <{ [320 x i8] c"\AB\08\12rJ\7F\1E4'B\CB\ED7M\94\D16\C6\B8y]E\B3\81\980\F2\C0D\91\FA\F0\99\0Cb\E4\8B\80\18\B2\C3\E4\A0\FA14\CBg\FA\83\E1X\C9\94\D9a\C4\CB!\09\\\1B\F9\AFHD=\0B\B0\D2\11\09\C8\9A\10\0B\\\E2\C2\08\83\14\9Ci\B5a\DD\88)\8A\17\98\B1\07\16\EFf<\EA\19\0F\FB\83\D8\95\93\F3\F4v\B6\BC$\D7\E6y\10~\A2j\DB\8C\AFfR\D0ea6\81 Y\A5\DA\19\867\CA\C7\C4\A61\BE\E4f[\88\D7\F6\22\8B\11\E2\E2\85y\A5\C0\C1\F7a\AB\08\12rJ\7F\1E4'B\CB\ED7M\94\D16\C6\B8y]E\B3\81\980\F2\C0D\91\FA\F0\99\0Cb\E4\8B\80\18\B2\C3\E4\A0\FA14\CBg\FA\83\E1X\C9\94\D9a\C4\CB!\09\\\1B\F9\AFHD=\0B\B0\D2\11\09\C8\9A\10\0B\\\E2\C2\08\83\14\9Ci\B5a\DD\88)\8A\17\98\B1\07\16\EFf<\EA\19\0F\FB\83\D8\95\93\F3\F4v\B6\BC$\D7\E6y\10~\A2j\DB\8C\AFfR\D0ea6\81 Y\A5\DA\19\867\CA\C7\C4\A61\BE\E4f[\88\D7\F6\22\8B\11\E2\E2\85y\A5\C0\C1\F7a", [704 x i8] zeroinitializer }> }, { i64, <{ [32 x i8], [992 x i8] }> } { i64 32, <{ [32 x i8], [992 x i8] }> <{ [32 x i8] c"\12\97j\08\C4Bm\0C\E8\A8$\07\C4\F4\82\07\80\F8\C2\0A\A7\12\02\D1\E2\91y\CB\CBUZW", [992 x i8] zeroinitializer }> }, { i64, <{ [16 x i8], [1008 x i8] }> } { i64 16, <{ [16 x i8], [1008 x i8] }> <{ [16 x i8] c"\B8F\D4N\9B\BDS\CE\DF\FB\FB\B6\B7\FAI3", [1008 x i8] zeroinitializer }> } }, { { i64, <{ [256 x i8], [768 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } } { { i64, <{ [256 x i8], [768 x i8] }> } { i64 256, <{ [256 x i8], [768 x i8] }> <{ [256 x i8] cx i8] zeroinitializer }> }, { i64, <{ [16 x i8], [1008 x i8] }> } { i64 32, <{ [16 x i8], [1008 x i8] }> <{ [16 x i8] c"\ADb\81\07\E85\1D\0F,#\1A\05\DCJA\06", [1008 x i8] zeroinitializer }> }, { i64, <{ [16 x i8], [1008 x i8] }> } { i64 16, <{ [16 x i8], [1008 x i8] }> <{ [16 x i8] c"\07\14ZL\02\FE_\A3 6\DEh\FA\BE\90f", [1008 x i8] zeroinitializer }> } }, { { i64, <{ [252 x i8], [772 x i8] }> }, { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } } { { i64, <{ [252 x i8], [772 x i8] }> } { i64 252, <{ [252 x i8], [772 x i8] }> <{ [252 x i8] c"\84#d\E1V3l\09\98\B93\A6#w&\18\0D\9E?\DC\BD\E4\CD]\17\08\0F\C3\BE\B4\96\14\D7\12,\03tc\FF\10Ms\F1\9C\12pF(\D4\17\C4\C5J?\E3\0D<=w\148-C\B08*P\A5\DE\E5K\E8D\B0v\E8\DF\88 \1A\1C\D4;\90\EB!d?\A9o9\B5\18\AA\83@\C9B\FF<1\BA\F7\C9\BD\BF\0F1\AE?\A0\96\BF\8Cc\03\06\09\82\9F\E7.\17\98$\89\0B\C8\E0\8C1\\\1C\CE*\83\14M\BB\FF\09\F7N>\FCw\0BT\D0\98J\8F\19\B1G\19\E665d\1Dk\1E\ED\F6>\FB\F0\80\E1x=2DT\12\11L \DE\0B\83z\0D\FA3\D6\B8(%\FF\F4L\9Ap\EAT\CEG\F0}\F6\98\E6\B03#\B50y6J_\C3\E9\DD\03C\92\BD\DE\86\DC\CD\DA\942\1C^D\06\04\893l\B6[\F3\98\9C6\F7(,/]+\88,\17\1Et", [772 x i8] zeroinitializer }> }, { i64, <{ [32 x i8], [992 x i8] }> } { i64 32, <{ [32 x i8], [992 x i8] }> <{ [32 x i8] c"\95\D5\C0\05P>Q\0D\8C\D0\AA\07,JM\06n\AB\C5-\11e=\F4\7F\BFc\AB\19\8B\CC&", [992 x i8] zeroinitializer }> }, { i64, <{ [16 x i8], [1008 x i8] }> } { i64 16, <{ [16 x i8], [1008 x i8] }> <{ [16 x i8] c"\F2H1.W\8D\9DX\F8\B7\BBM\19\10T1", [1008 x i8] zeroinitializer }> } }, { { i64, <{ [208 x i8], [816 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } } { { i64, <{ [208 x i8], [816 x i8] }> } { i64 208, <{ [208 x i8], [816 x i8] }> <{ [208 x i8] c"$\8A\C3\10\85\B6\C2\AD\AA\A3\82Y\A0\D7\19,\\5\D1\BBN\F3\9A\D9L8\D1\C8$y\E2\DD!Y\A0w\02K\05\89\BC\8A \10\1BPo\0A\1A\D0\BB\ABv\E8:\83\F1\B9K\E6\BE\AEt\E8t\CA\B6\92\C5\96:uCkwa!\EC\9Fb9\9A>f\B2\D2'\07\DA\E8\193\B6'\7F<\85\16\BC\BE&\DB\BD\86\F3s\10=|\F4\CA\D1\88\8C\95!\18\FB\FB\D0\D7\B4\BE\DCJ\E4\93j\FF\91\15~z\A4|TD.\A7\8Dj\C2Q\D3$\A0\FB\E4\9D\89\CC5!\B6m\16\E9\C6j7\09\89NN\B0\A4\EE\DCJ\E1\94h\E6k\81\F2q5\1B\1D\92\1E\A5Q\04z\BC\C6\B8z\90\1F\DE}\B7\9F\A1\81\8C\113m\BC\07$J@\EB", [816 x i8] zeroinitializer }> }, { i64, <{ [16 x i8], [1008 x i8] }> } { i64 32, <{ [16 x i8], [1008 x i8] }> <{ [16 x i8] c"\00\01\02\03\04\05\06\07\08\09\0A\0B\0C\0D\0E\0F", [1008 x i8] zeroinitializer }> }, { i64, <{ [16 x i8], [1008 x i8] }> } { i64 16, <{ [16 x i8], [1008 x i8] }> <{ [16 x i8] c"\BC\93\9B\C5(\14\80\FA\99\C6\D6\8C%\8E\C4/", [1008 x i8] zeroinitializer }> } }, { %struct.SIZED_DATA, { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } } { %struct.SIZED_DATA zeroinitializer, { i64, <{ [32 x i8], [992 x i8] }> } { i64 32, <{ [32 x i8], [992 x i8] }> <{ [32 x i8] c"\C8\AF\AA\C31\EE7,\D6\08-\E14\94;\17G\10\13\0E\9Fo\EA\8Dr)8P\A6g\D8l", [992 x i8] zeroinitializer }> }, { i64, <{ [16 x i8], [1008 x i8] }> } { i64 16, <{ [16 x i8], [1008 x i8] }> <{ [16 x i8] c"G\10\13\0E\9Fo\EA\8Dr)8P\A6g\D8l", [1008 x i8] zeroinitializer }> } }, { { i64, <{ [12 x i8], [1012 x i8] }> }, { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } } { { i64, <{ [12 x i8], [1012 x i8] }> } { i64 12, <{ [12 x i8], [1012 x i8] }> <{ [12 x i8] c"Hello world!", [1012 x i8] zeroinitializer }> }, { i64, <{ [32 x i8], [992 x i8] }> } { i64 32, <{ [32 x i8], [992 x i8] }> <{ [32 x i8] c"this is 32-byte key for Poly1305", [992 x i8] zeroinitializer }> }, { i64, <{ [16 x i8], [1008 x i8] }> } { i64 16, <{ [16 x i8], [1008 x i8] }> <{ [16 x i8] c"\A6\F7E\00\8F\81\C9\16\A2\0D\CCt\EE\F2\B2\F0", [1008 x i8] zeroinitializer }> } }, { %struct.SIZED_DATA, { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } } { %struct.SIZED_DATA { i64 32, [1024 x i8] zeroinitializer }, { i64, <{ [32 x i8], [992 x i8] }> } { i64 32, <{ [32 x i8], [992 x i8] }> <{ [32 x i8] c"this is 32-byte key for Poly1305", [992 x i8] zeroinitializer }> }, { i64, <{ [16 x i8], [1008 x i8] }> } { i64 16, <{ [16 x i8], [1008 x i8] }> <{ [16 x i8] c"I\ECx\09\0EH\1E\C6\C2k3\B9\1C\CC\03\07", [1008 x i8] zeroinitializer }> } }, { { i64, <{ [128 x i8], [896 x i8] }> }, { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } } { { i64, <{ [128 x i8], [896 x i8] }> } { i64 128, <{ [128 x i8], [896 x i8] }> <{ [128 x i8] c"\89\DA\B8\0Bw\17\C1\DB]\B47\86\0A?p!\8E\93\E1\B8\F4a\FBg\7F\16\F3_o\87\E2\A9\1C\99\BC:G\AC\E4v@\CC\95\C3E\BE^\CC\A5\A3R<5\CC\01\89:\F0\B6Jb\034'\03r\EC\12H-\1B\1E65ai\8AW\8B5\98\03I[\B4\E2\EF\190\B1zQ\90\B5\80\F1A0\0D\F3\0A\DB\EC\A2\8Fd'\A8\BC\1A\99\9F\D5\1CUJ\01}\09]\8C>1'\DA\F9\F5\95", [896 x i8] zeroinitializer }> }, { i64, <{ [32 x i8], [992 x i8] }> } { i64 32, <{ [32 x i8], [992 x i8] }> <{ [32 x i8] c"-w;\E3z\DB\1EMh;\F0\07^y\C4\EE\03y\18SZ\7F\99\CC\B7\04\0F\B5\F5\F4:\EA", [992 x i8] zeroinitializer }> }, { i64, <{ [16 x i8], [1008 x i8] }> } { i64 16, <{ [16 x i8], [1008 x i8] }> <{ [16 x i8] c"\C8]\15\EDD\C3x\D6\B0\0E#\06L{\CDQ", [1008 x i8] zeroinitializer }> } }, { { i64, <{ [528 x i8], [496 x i8] }> }, { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } } { { i64, <{ [528 x i8], [496 x i8] }> } { i64 528, <{ [528 x i8], [496 x i8] }> <{ [528 x i8] c"\00\00\00\00\00\00\00\0B\17\03\03\02\00\00\00\00\06\DB\1F\1F6\8Dij\81\0A4\9C\0CqL\9A^xP\C2@}r\1A\CD\ED\95\E0\18\D7\A8Rf\A6\E1(\9C\DBJ\EB\18\DAZ\C8\A2\B0\02m$\A5\9A\D4\85\22\7F>\AE\DB\B2\E7\E3^\1Cf\CD`\F9\AB\F7\16\DC\C9\ACBh-\D7\DA\B2\87\A7\02LN\EF\C3!\CC\05t\E1g\93\E3|\EC\03\C5\BD\A4+T\C1\14\A8\0BW\AF&Al{\E7B\00^ \85\\s\E2\1D\C8\E2\ED\C9\D45\CBo`Y(\00\11\C2p\B7\15p\05\1C\1C\9B0R\12f \BC\1E'0\FA\06lzP\9DS\C6\0EZ\E1\B4\0A\A6\E3\9EIf\92(\C9\0E\EC\B4\A5\0D\B3*P\BCI\E9\0BOK5\9A\1D\FD\11t\9C\D3\86\7F\CF/\B7\BBl\D4s\8FjJ\D6\F7\CAPX\F7a\88E\AF\9F\02\0Fl;\96{\8FL\D4\A9\1E(\13\B5\07\AEf\F2\D3\\\18(Or\92\18`b\E1\0F\D5Q\0D\18wSQ\EF3Nv4\ABGC\F5\B6\8FI\AD\CA\B3\84\D3\FDu\F79\0F@\06\EF*)\\\8Cz\07j\D5EF\CD%\D2\10\7F\BE\146\C8@\92J\AE\BE[7\08\93\CDc\D12[\86\16\FCH\10\88k\C1R\C52!\B6\DF71\1992U\EEr\BC\AA\88\01t\F1q\7F\91\84\FA\91do\17\A2J\C5]\16\BF\DD\CA\95\81\A9.\DAG\92\01\F0\ED\BFc6\00\D6\06m\1A\B3m]$\15\D7\13Q\BB\CD`\8A%\10\8D%d\19\92\C1\F2lS\1C\F9\F9\02\03\BCL\C1\9FY'\D84\B0\A4q\16\D3\88K\BB\16K\8E\C8\83\D1\AC\83.V\B3\91\8A\98`\1A\08\D1q\88\15A\D5\94\DB9\9Cj\E6\15\12!tZ\EC\81LE\B0\B0[VT6\FDo\13z\A1\0A\0C\0Bd7a\DB\D6\F9\A9\DC\B9\9B\1Ani\08T\CE\07i\CD\E3\97a\D8/\CD\EC\15\F0\D9-}\8E\94\AD\E8\EB\83\FB\E0", [496 x i8] zeroinitializer }> }, { i64, <{ [32 x i8], [992 x i8] }> } { i64 32, <{ [32 x i8], [992 x i8] }> <{ [32 x i8] c"\99\E5\82-\D4\17<\99^=\AE\0D\DE\FB\97t?\DE;\08\014\B3\9Fv\E9\BF\8D\0E\88\D5F", [992 x i8] zeroinitializer }> }, { i64, <{ [16 x i8], [1008 x i8] }> } { i64 16, <{ [16 x i8], [1008 x i8] }> <{ [16 x i8] c"&7@\8F\E10\86\EAs\F9q\E3B^( ", [1008 x i8] zeroinitializer }> } }, { { i64, <{ [257 x i8], [767 x i8] }> }, { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } } { { i64, <{ [257 x i8], [767 x i8] }> } { i64 257, <{ [257 x i8], [767 x i8] }> <{ [257 x i8] cq\92\05\A8R\1D\FC", [767 x i8] zeroinitializer }> }, { i64, <{ [32 x i8], [992 x i8] }> } { i64 32, <{ [32 x i8], [992 x i8] }> <{ [32 x i8] c"\7F\1B\02d\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\CC\CC\CC\CC\CC\CC\CC\CC", [992 x i8] zeroinitializer }> }, { i64, <{ [16 x i8], [1008 x i8] }> } { i64 16, <{ [16 x i8], [1008 x i8] }> <{ [16 x i8] c"\85Y\B8v\EC\EE\D6n\B3w\98\C0E{\AF\F9", [1008 x i8] zeroinitializer }> } }, { { i64, <{ [39 x i8], [985 x i8] }> }, { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } } { { i64, <{ [39 x i8], [985 x i8] }> } { i64 39, <{ [39 x i8], [985 x i8] }> <{ [39 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\00\00\00\00\00\00\00\00\00\80\02d", [985 x i8] zeroinitializer }> }, { i64, <{ [32 x i8], [992 x i8] }> } { i64 32, <{ [32 x i8], [992 x i8] }> <{ [32 x i8] c"\E0\00\16\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA", [992 x i8] zeroinitializer }> }, { i64, <{ [16 x i8], [1008 x i8] }> } { i64 16, <{ [16 x i8], [1008 x i8] }> <{ [16 x i8] c"\00\BD\12X\97\8E TD\C9\AA\AA\82\00o\ED", [1008 x i8] zeroinitializer }> } }, { { i64, <{ i8, i8, [1022 x i8] }> }, { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } } { { i64, <{ i8, i8, [1022 x i8] }> } { i64 2, <{ i8, i8, [1022 x i8] }> <{ i8 2, i8 -4, [1022 x i8] zeroinitializer }> }, { i64, <{ [32 x i8], [992 x i8] }> } { i64 32, <{ [32 x i8], [992 x i8] }> <{ [32 x i8] c"\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C", [992 x i8] zeroinitializer }> }, { i64, <{ [16 x i8], [1008 x i8] }> } { i64 16, <{ [16 x i8], [1008 x i8] }> <{ [16 x i8] c"\06\12\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C", [1008 x i8] zeroinitializer }> } }, { { i64, <{ [415 x i8], [609 x i8] }> }, { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } } { { i64, <{ [415 x i8], [609 x i8] }> } { i64 415, <{ [415 x i8], [609 x i8] }> <{ [415 x i8] c"{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{z{{{{{{{{{{{{{{{{{{{{{{{{{{{\\{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{n{\00{{{{{{{{{{{{{{{{{{{{{{{{{{{{z{{{{{{{{{{{{{{{{{{{{{{{{{{{\\{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{n{\00\13\00\00\00\00\B3\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\F2\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00 \00\EF\FF\00\09\00\00\00\00\00\00\00\00\00\00\00\00\10\00\00\00\00\09\00\00\00d\00\00\00\00\00\00\00\00\00\00\00\00\13\00\00\00\00\B3\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\F2\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00 \00\EF\FF\00\09\00\00\00\00\00\00\00\00\00z\00\00\10\00\00\00\00\09\00\00\00d\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\FC", [609 x i8] zeroinitializer }> }, { i64, <{ [32 x i8], [992 x i8] }> } { i64 32, <{ [32 x i8], [992 x i8] }> <{ [32 x i8] c"\00\FF\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\1E\00\00\00\00\00\00\00\00{{", [992 x i8] zeroinitializer }> }, { i64, <{ [16 x i8], [1008 x i8] }> } { i64 16, <{ [16 x i8], [1008 x i8] }> <{ [16 x i8] c"3 [\BF\9E\9F\8Fr\12\AB\9E*\B9\B7\E4\A5", [1008 x i8] zeroinitializer }> } }, { { i64, <{ [118 x i8], [906 x i8] }> }, { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } } { { i64, <{ [118 x i8], [906 x i8] }> } { i64 118, <{ [118 x i8], [906 x i8] }> <{ [118 x i8] c"wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww\FF\FF\FF\E9\E9\AC\AC\AC\AC\AC\AC\AC\AC\AC\AC\AC\00\00\AC\AC\EC\01\00\AC\AC\AC,\AC\A2\AC\AC\AC\AC\AC\AC\AC\AC\AC\AC\ACd\F2", [906 x i8] zeroinitializer }> }, { i64, <{ [32 x i8], [992 x i8] }> } { i64 32, <{ [32 x i8], [992 x i8] }> <{ [32 x i8] c"\00\00\00\7F\00\00\00\7F\01\00\00 \00\00\00\00\00\00\CFwwwwwwwwwwwww", [992 x i8] zeroinitializer }> }, { i64, <{ [16 x i8], [1008 x i8] }> } { i64 16, <{ [16 x i8], [1008 x i8] }> <{ [16 x i8] c"\02\EE|\8CTm\DE\B1\A4g\E4\C3\98\11X\B9", [1008 x i8] zeroinitializer }> } }, { { i64, <{ [131 x i8], [893 x i8] }> }, { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } } { { i64, <{ [131 x i8], [893 x i8] }> } { i64 131, <{ [131 x i8], [893 x i8] }> <{ [131 x i8] c"\8E\99;\9FHh\12s\C2\96P\BA2\FCv\CEH3.\A7\16M\96\A4Go\B8\C51\A1\18j\C0\DF\C1|\98\DC\E8{M\A7\F0\11\ECH\C9rq\D2\C2\0F\9B\92\8F\E2'\0Do\B8c\D5\178\B4\8E\EE\E3\14\A7\CC\8A\B92\16EH\E5&\AE\90\22ChQz\CF\EA\BDk\B3s+\C0\E9\DA\99\83+a\CA\01\B6\DEV$J\9E\88\D5\F9\B3ys\F6\22\A4=\14\A6Y\9B\1FeL\B4Zt\E3U\A5", [893 x i8] zeroinitializer }> }, { i64, <{ [32 x i8], [992 x i8] }> } { i64 32, <{ [32 x i8], [992 x i8] }> <{ [32 x i8] c"\EE\A6\A7%\1C\1Er\91m\11\C2\CB!M<%%9\12\1D\8E#Ne-e\1F\A4\C8\CF\F8\80", [992 x i8] zeroinitializer }> }, { i64, <{ [16 x i8], [1008 x i8] }> } { i64 16, <{ [16 x i8], [1008 x i8] }> <{ [16 x i8] c"\F3\FF\C7p?\94\00\E5*}\FBK=3\05\D9", [1008 x i8] zeroinitializer }> } }, { { i64, <{ [16 x i8], [1008 x i8] }> }, { i64, <{ i8, [1023 x i8] }> }, { i64, <{ i8, [1023 x i8] }> } } { { i64, <{ [16 x i8], [1008 x i8] }> } { i64 16, <{ [16 x i8], [1008 x i8] }> <{ [16 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF", [1008 x i8] zeroinitializer }> }, { i64, <{ i8, [1023 x i8] }> } { i64 32, <{ i8, [1023 x i8] }> <{ i8 2, [1023 x i8] zeroinitializer }> }, { i64, <{ i8, [1023 x i8] }> } { i64 16, <{ i8, [1023 x i8] }> <{ i8 3, [1023 x i8] zeroinitializer }> } }, { { i64, <{ i8, [1023 x i8] }> }, { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ i8, [1023 x i8] }> } } { { i64, <{ i8, [1023 x i8] }> } { i64 16, <{ i8, [1023 x i8] }> <{ i8 2, [1023 x i8] zeroinitializer }> }, { i64, <{ [32 x i8], [992 x i8] }> } { i64 32, <{ [32 x i8], [992 x i8] }> <{ [32 x i8] c"\02\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF", [992 x i8] zeroinitializer }> }, { i64, <{ i8, [1023 x i8] }> } { i64 16, <{ i8, [1023 x i8] }> <{ i8 3, [1023 x i8] zeroinitializer }> } }, { { i64, <{ [33 x i8], [991 x i8] }> }, { i64, <{ i8, [1023 x i8] }> }, { i64, <{ i8, [1023 x i8] }> } } { { i64, <{ [33 x i8], [991 x i8] }> } { i64 48, <{ [33 x i8], [991 x i8] }> <{ [33 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\F0\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\11", [991 x i8] zeroinitializer }> }, { i64, <{ i8, [1023 x i8] }> } { i64 32, <{ i8, [1023 x i8] }> <{ i8 1, [1023 x i8] zeroinitializer }> }, { i64, <{ i8, [1023 x i8] }> } { i64 16, <{ i8, [1023 x i8] }> <{ i8 5, [1023 x i8] zeroinitializer }> } }, { { i64, <{ [48 x i8], [976 x i8] }> }, { i64, <{ i8, [1023 x i8] }> }, %struct.SIZED_DATA } { { i64, <{ [48 x i8], [976 x i8] }> } { i64 48, <{ [48 x i8], [976 x i8] }> <{ [48 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FB\FE\FE\FE\FE\FE\FE\FE\FE\FE\FE\FE\FE\FE\FE\FE\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01", [976 x i8] zeroinitializer }> }, { i64, <{ i8, [1023 x i8] }> } { i64 32, <{ i8, [1023 x i8] }> <{ i8 1, [1023 x i8] zeroinitializer }> }, %struct.SIZED_DATA { i64 16, [1024 x i8] zeroinitializer } }, { { i64, <{ [16 x i8], [1008 x i8] }> }, { i64, <{ i8, [1023 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } } { { i64, <{ [16 x i8], [1008 x i8] }> } { i64 16, <{ [16 x i8], [1008 x i8] }> <{ [16 x i8] c"\FD\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF", [1008 x i8] zeroinitializer }> }, { i64, <{ i8, [1023 x i8] }> } { i64 32, <{ i8, [1023 x i8] }> <{ i8 2, [1023 x i8] zeroinitializer }> }, { i64, <{ [16 x i8], [1008 x i8] }> } { i64 16, <{ [16 x i8], [1008 x i8] }> <{ [16 x i8] c"\FA\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF", [1008 x i8] zeroinitializer }> } }, { { i64, <{ [49 x i8], [975 x i8] }> }, { i64, <{ [9 x i8], [1015 x i8] }> }, { i64, <{ [9 x i8], [1015 x i8] }> } } { { i64, <{ [49 x i8], [975 x i8] }> } { i64 64, <{ [49 x i8], [975 x i8] }> <{ [49 x i8] c"\E35\94\D7P^C\B9\00\00\00\00\00\00\00\003\94\D7P^Cy\CD\01\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\01", [975 x i8] zeroinitializer }> }, { i64, <{ [9 x i8], [1015 x i8] }> } { i64 32, <{ [9 x i8], [1015 x i8] }> <{ [9 x i8] c"\01\00\00\00\00\00\00\00\04", [1015 x i8] zeroinitializer }> }, { i64, <{ [9 x i8], [1015 x i8] }> } { i64 16, <{ [9 x i8], [1015 x i8] }> <{ [9 x i8] c"\14\00\00\00\00\00\00\00U", [1015 x i8] zeroinitializer }> } }, { { i64, <{ [25 x i8], [999 x i8] }> }, { i64, <{ [9 x i8], [1015 x i8] }> }, { i64, <{ i8, [1023 x i8] }> } } { { i64, <{ [25 x i8], [999 x i8] }> } { i64 48, <{ [25 x i8], [999 x i8] }> <{ [25 x i8] c"\E35\94\D7P^C\B9\00\00\00\00\00\00\00\003\94\D7P^Cy\CD\01", [999 x i8] zeroinitializer }> }, { i64, <{ [9 x i8], [1015 x i8] }> } { i64 32, <{ [9 x i8], [1015 x i8] }> <{ [9 x i8] c"\01\00\00\00\00\00\00\00\04", [1015 x i8] zeroinitializer }> }, { i64, <{ i8, [1023 x i8] }> } { i64 16, <{ i8, [1023 x i8] }> <{ i8 19, [1023 x i8] zeroinitializer }> } } }>, align 16

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @setup_tests() local_unnamed_addr #0 {
entry:
  tail call void @add_all_tests(i8* noundef getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 (i32)* noundef nonnull @test_poly1305, i32 noundef 35, i32 noundef 1) #4
  ret i32 1
}

declare dso_local void @add_all_tests(i8* noundef, i32 (i32)* noundef, i32 noundef, i32 noundef) local_unnamed_addr #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @test_poly1305(i32 noundef %idx) #0 {
entry:
  %poly1305 = alloca %struct.poly1305_context, align 8
  %test = alloca %struct.TESTDATA, align 8
  %out = alloca [16 x i8], align 16
  %0 = bitcast %struct.poly1305_context* %poly1305 to i8*
  call void @llvm.lifetime.start.p0i8(i64 248, i8* nonnull %0) #5
  %1 = bitcast %struct.TESTDATA* %test to i8*
  call void @llvm.lifetime.start.p0i8(i64 3096, i8* nonnull %1) #5
  %idxprom = sext i32 %idx to i64
  %arrayidx = getelementptr inbounds [35 x %struct.TESTDATA], [35 x %struct.TESTDATA]* bitcast (<{ { { i64, <{ [34 x i8], [990 x i8] }> }, { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } }, { { i64, <{ i8, i8, [1022 x i8] }> }, { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } }, { %struct.SIZED_DATA, { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } }, { { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } }, { { i64, <{ [63 x i8], [961 x i8] }> }, { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } }, { { i64, <{ [64 x i8], [960 x i8] }> }, { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } }, { { i64, <{ [48 x i8], [976 x i8] }> }, { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } }, { { i64, <{ [96 x i8], [928 x i8] }> }, { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } }, { { i64, <{ [112 x i8], [912 x i8] }> }, { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } }, { { i64, <{ [128 x i8], [896 x i8] }> }, { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } }, { { i64, <{ [144 x i8], [880 x i8] }> }, { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } }, { { i64, <{ [160 x i8], [864 x i8] }> }, { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } }, { { i64, <{ [288 x i8], [736 x i8] }> }, { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } }, { { i64, <{ [320 x i8], [704 x i8] }> }, { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } }, { { i64, <{ [256 x i8], [768 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } }, { { i64, <{ [252 x i8], [772 x i8] }> }, { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } }, { { i64, <{ [208 x i8], [816 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } }, { %struct.SIZED_DATA, { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } }, { { i64, <{ [12 x i8], [1012 x i8] }> }, { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } }, { %struct.SIZED_DATA, { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } }, { { i64, <{ [128 x i8], [896 x i8] }> }, { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } }, { { i64, <{ [528 x i8], [496 x i8] }> }, { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } }, { { i64, <{ [257 x i8], [767 x i8] }> }, { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } }, { { i64, <{ [39 x i8], [985 x i8] }> }, { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } }, { { i64, <{ i8, i8, [1022 x i8] }> }, { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } }, { { i64, <{ [415 x i8], [609 x i8] }> }, { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } }, { { i64, <{ [118 x i8], [906 x i8] }> }, { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } }, { { i64, <{ [131 x i8], [893 x i8] }> }, { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } }, { { i64, <{ [16 x i8], [1008 x i8] }> }, { i64, <{ i8, [1023 x i8] }> }, { i64, <{ i8, [1023 x i8] }> } }, { { i64, <{ i8, [1023 x i8] }> }, { i64, <{ [32 x i8], [992 x i8] }> }, { i64, <{ i8, [1023 x i8] }> } }, { { i64, <{ [33 x i8], [991 x i8] }> }, { i64, <{ i8, [1023 x i8] }> }, { i64, <{ i8, [1023 x i8] }> } }, { { i64, <{ [48 x i8], [976 x i8] }> }, { i64, <{ i8, [1023 x i8] }> }, %struct.SIZED_DATA }, { { i64, <{ [16 x i8], [1008 x i8] }> }, { i64, <{ i8, [1023 x i8] }> }, { i64, <{ [16 x i8], [1008 x i8] }> } }, { { i64, <{ [49 x i8], [975 x i8] }> }, { i64, <{ [9 x i8], [1015 x i8] }> }, { i64, <{ [9 x i8], [1015 x i8] }> } }, { { i64, <{ [25 x i8], [999 x i8] }> }, { i64, <{ [9 x i8], [1015 x i8] }> }, { i64, <{ i8, [1023 x i8] }> } } }>* @tests to [35 x %struct.TESTDATA]*), i64 0, i64 %idxprom
  %2 = bitcast %struct.TESTDATA* %arrayidx to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* noundef nonnull align 8 dereferenceable(3096) %1, i8* noundef nonnull align 8 dereferenceable(3096) %2, i64 3096, i1 false), !tbaa.struct !3
  %arraydecay = getelementptr inbounds %struct.TESTDATA, %struct.TESTDATA* %test, i64 0, i32 0, i32 1, i64 0
  %size = getelementptr inbounds %struct.TESTDATA, %struct.TESTDATA* %test, i64 0, i32 0, i32 0
  %3 = load i64, i64* %size, align 8, !tbaa !9
  %arraydecay4 = getelementptr inbounds %struct.TESTDATA, %struct.TESTDATA* %test, i64 0, i32 1, i32 1, i64 0
  %arraydecay7 = getelementptr inbounds %struct.TESTDATA, %struct.TESTDATA* %test, i64 0, i32 2, i32 1, i64 0
  %size9 = getelementptr inbounds %struct.TESTDATA, %struct.TESTDATA* %test, i64 0, i32 2, i32 0
  %4 = load i64, i64* %size9, align 8, !tbaa !12
  %5 = getelementptr inbounds [16 x i8], [16 x i8]* %out, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %5) #5
  %call = tail call i32 @test_size_t_eq(i8* noundef getelementptr inbounds ([30 x i8], [30 x i8]* @.str.1, i64 0, i64 0), i32 noundef 1517, i8* noundef getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0), i8* noundef getelementptr inbounds ([12 x i8], [12 x i8]* @.str.3, i64 0, i64 0), i64 noundef %4, i64 noundef 16) #4
  %tobool.not = icmp eq i32 %call, 0
  br i1 %tobool.not, label %cleanup45, label %if.end

if.end:                                           ; preds = %entry
  call void @Poly1305_Init(%struct.poly1305_context* noundef nonnull %poly1305, i8* noundef nonnull %arraydecay4) #4
  call void @Poly1305_Update(%struct.poly1305_context* noundef nonnull %poly1305, i8* noundef nonnull %arraydecay, i64 noundef %3) #4
  call void @Poly1305_Final(%struct.poly1305_context* noundef nonnull %poly1305, i8* noundef nonnull %5) #4
  %call12 = call i32 @test_mem_eq(i8* noundef getelementptr inbounds ([30 x i8], [30 x i8]* @.str.1, i64 0, i64 0), i32 noundef 1524, i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i64 0, i64 0), i8* noundef getelementptr inbounds ([9 x i8], [9 x i8]* @.str.5, i64 0, i64 0), i8* noundef nonnull %5, i64 noundef %4, i8* noundef nonnull %arraydecay7, i64 noundef %4) #4
  %tobool13.not = icmp eq i32 %call12, 0
  br i1 %tobool13.not, label %if.then14, label %if.end15

if.then14:                                        ; preds = %if.end
  call void (i8*, i32, i8*, ...) @test_info(i8* noundef getelementptr inbounds ([30 x i8], [30 x i8]* @.str.1, i64 0, i64 0), i32 noundef 1525, i8* noundef getelementptr inbounds ([26 x i8], [26 x i8]* @.str.6, i64 0, i64 0), i32 noundef %idx) #4
  br label %cleanup45

if.end15:                                         ; preds = %if.end
  %cmp = icmp ugt i64 %3, 16
  br i1 %cmp, label %if.then16, label %cleanup45

if.then16:                                        ; preds = %if.end15
  call void @Poly1305_Init(%struct.poly1305_context* noundef nonnull %poly1305, i8* noundef nonnull %arraydecay4) #4
  call void @Poly1305_Update(%struct.poly1305_context* noundef nonnull %poly1305, i8* noundef nonnull %arraydecay, i64 noundef 1) #4
  %add.ptr = getelementptr inbounds %struct.TESTDATA, %struct.TESTDATA* %test, i64 0, i32 0, i32 1, i64 1
  %sub = add i64 %3, -1
  call void @Poly1305_Update(%struct.poly1305_context* noundef nonnull %poly1305, i8* noundef nonnull %add.ptr, i64 noundef %sub) #4
  call void @Poly1305_Final(%struct.poly1305_context* noundef nonnull %poly1305, i8* noundef nonnull %5) #4
  %call19 = call i32 @test_mem_eq(i8* noundef getelementptr inbounds ([30 x i8], [30 x i8]* @.str.1, i64 0, i64 0), i32 noundef 1535, i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i64 0, i64 0), i8* noundef getelementptr inbounds ([9 x i8], [9 x i8]* @.str.5, i64 0, i64 0), i8* noundef nonnull %5, i64 noundef %4, i8* noundef nonnull %arraydecay7, i64 noundef %4) #4
  %tobool20.not = icmp eq i32 %call19, 0
  br i1 %tobool20.not, label %if.then21, label %if.end23

if.then21:                                        ; preds = %if.then16
  call void (i8*, i32, i8*, ...) @test_info(i8* noundef getelementptr inbounds ([30 x i8], [30 x i8]* @.str.1, i64 0, i64 0), i32 noundef 1536, i8* noundef getelementptr inbounds ([34 x i8], [34 x i8]* @.str.7, i64 0, i64 0), i32 noundef %idx) #4
  br label %cleanup45

if.end23:                                         ; preds = %if.then16
  %cmp24 = icmp ugt i64 %3, 32
  br i1 %cmp24, label %if.then25, label %cleanup45

if.then25:                                        ; preds = %if.end23
  %div = lshr i64 %3, 1
  call void @Poly1305_Init(%struct.poly1305_context* noundef nonnull %poly1305, i8* noundef nonnull %arraydecay4) #4
  call void @Poly1305_Update(%struct.poly1305_context* noundef nonnull %poly1305, i8* noundef nonnull %arraydecay, i64 noundef %div) #4
  %add.ptr26 = getelementptr inbounds %struct.TESTDATA, %struct.TESTDATA* %test, i64 0, i32 0, i32 1, i64 %div
  %sub27 = sub i64 %3, %div
  call void @Poly1305_Update(%struct.poly1305_context* noundef nonnull %poly1305, i8* noundef nonnull %add.ptr26, i64 noundef %sub27) #4
  call void @Poly1305_Final(%struct.poly1305_context* noundef nonnull %poly1305, i8* noundef nonnull %5) #4
  %call30 = call i32 @test_mem_eq(i8* noundef getelementptr inbounds ([30 x i8], [30 x i8]* @.str.1, i64 0, i64 0), i32 noundef 1549, i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i64 0, i64 0), i8* noundef getelementptr inbounds ([9 x i8], [9 x i8]* @.str.5, i64 0, i64 0), i8* noundef nonnull %5, i64 noundef %4, i8* noundef nonnull %arraydecay7, i64 noundef %4) #4
  %tobool31.not = icmp eq i32 %call30, 0
  br i1 %tobool31.not, label %if.then32, label %for.body

if.then32:                                        ; preds = %if.then25
  call void (i8*, i32, i8*, ...) @test_info(i8* noundef getelementptr inbounds ([30 x i8], [30 x i8]* @.str.1, i64 0, i64 0), i32 noundef 1550, i8* noundef getelementptr inbounds ([28 x i8], [28 x i8]* @.str.8, i64 0, i64 0), i32 noundef %idx) #4
  br label %cleanup45

for.body:                                         ; preds = %if.then25, %for.inc
  %half.0104 = phi i64 [ %add, %for.inc ], [ 16, %if.then25 ]
  call void @Poly1305_Init(%struct.poly1305_context* noundef nonnull %poly1305, i8* noundef nonnull %arraydecay4) #4
  call void @Poly1305_Update(%struct.poly1305_context* noundef nonnull %poly1305, i8* noundef nonnull %arraydecay, i64 noundef %half.0104) #4
  %add.ptr35 = getelementptr inbounds %struct.TESTDATA, %struct.TESTDATA* %test, i64 0, i32 0, i32 1, i64 %half.0104
  %sub36 = sub i64 %3, %half.0104
  call void @Poly1305_Update(%struct.poly1305_context* noundef nonnull %poly1305, i8* noundef nonnull %add.ptr35, i64 noundef %sub36) #4
  call void @Poly1305_Final(%struct.poly1305_context* noundef nonnull %poly1305, i8* noundef nonnull %5) #4
  %call39 = call i32 @test_mem_eq(i8* noundef getelementptr inbounds ([30 x i8], [30 x i8]* @.str.1, i64 0, i64 0), i32 noundef 1560, i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i64 0, i64 0), i8* noundef getelementptr inbounds ([9 x i8], [9 x i8]* @.str.5, i64 0, i64 0), i8* noundef nonnull %5, i64 noundef %4, i8* noundef nonnull %arraydecay7, i64 noundef %4) #4
  %tobool40.not = icmp eq i32 %call39, 0
  br i1 %tobool40.not, label %if.then41, label %for.inc

if.then41:                                        ; preds = %for.body
  call void (i8*, i32, i8*, ...) @test_info(i8* noundef getelementptr inbounds ([30 x i8], [30 x i8]* @.str.1, i64 0, i64 0), i32 noundef 1562, i8* noundef getelementptr inbounds ([34 x i8], [34 x i8]* @.str.9, i64 0, i64 0), i32 noundef %idx, i64 noundef %half.0104, i64 noundef %sub36) #4
  br label %cleanup45

for.inc:                                          ; preds = %for.body
  %add = add i64 %half.0104, 16
  %cmp34 = icmp ugt i64 %3, %add
  br i1 %cmp34, label %for.body, label %cleanup45, !llvm.loop !13

cleanup45:                                        ; preds = %for.inc, %if.end15, %if.end23, %if.then32, %if.then41, %entry, %if.then21, %if.then14
  %retval.1 = phi i32 [ 0, %if.then21 ], [ 0, %if.then14 ], [ 0, %entry ], [ 0, %if.then41 ], [ 0, %if.then32 ], [ 1, %if.end23 ], [ 1, %if.end15 ], [ 1, %for.inc ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 3096, i8* nonnull %1) #5
  call void @llvm.lifetime.end.p0i8(i64 248, i8* nonnull %0) #5
  ret i32 %retval.1
}

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

declare dso_local i32 @test_size_t_eq(i8* noundef, i32 noundef, i8* noundef, i8* noundef, i64 noundef, i64 noundef) local_unnamed_addr #1

declare dso_local void @Poly1305_Init(%struct.poly1305_context* noundef, i8* noundef) local_unnamed_addr #1

declare dso_local void @Poly1305_Update(%struct.poly1305_context* noundef, i8* noundef, i64 noundef) local_unnamed_addr #1

declare dso_local void @Poly1305_Final(%struct.poly1305_context* noundef, i8* noundef) local_unnamed_addr #1

declare dso_local i32 @test_mem_eq(i8* noundef, i32 noundef, i8* noundef, i8* noundef, i8* noundef, i64 noundef, i8* noundef, i64 noundef) local_unnamed_addr #1

declare dso_local void @test_info(i8* noundef, i32 noundef, i8* noundef, ...) local_unnamed_addr #1

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

attributes #0 = { noinline nounwind uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-builtins" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { "frame-pointer"="none" "no-builtins" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { argmemonly mustprogress nofree nosync nounwind willreturn }
attributes #3 = { argmemonly mustprogress nofree nounwind willreturn }
attributes #4 = { nobuiltin nounwind "no-builtins" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 14.0.0"}
!3 = !{i64 0, i64 8, !4, i64 8, i64 1024, !8, i64 1032, i64 8, !4, i64 1040, i64 1024, !8, i64 2064, i64 8, !4, i64 2072, i64 1024, !8}
!4 = !{!5, !5, i64 0}
!5 = !{!"long", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C/C++ TBAA"}
!8 = !{!6, !6, i64 0}
!9 = !{!10, !5, i64 0}
!10 = !{!"", !11, i64 0, !11, i64 1032, !11, i64 2064}
!11 = !{!"", !5, i64 0, !6, i64 8}
!12 = !{!10, !5, i64 2064}
!13 = distinct !{!13, !14}
!14 = !{!"llvm.loop.mustprogress"}
