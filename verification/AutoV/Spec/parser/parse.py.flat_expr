from antlr4 import *

from AutoV.Spec.parser.SpecLexer import SpecLexer
from AutoV.Spec.parser.SpecParser import SpecParser
from AutoV.Spec.parser.SpecVisitor import SpecVisitor
from AutoV.Spec.nodes import *
from AutoV.Spec.values import *
from AutoV.Spec.project import Project
import pickle
import os


class ProgramVisitor(SpecVisitor):

    def __init__(self, proj: Project, path: str):
        super().__init__()
        self.proj = proj
        self.path = path
        self.current_layer = None

    def visitProgram(self, ctx: SpecParser.ProgramContext):
        for s in ctx.statement():
            self.visit(s)

    def visitSection_begin(self, ctx:SpecParser.Section_beginContext):
        if self.current_layer is not None:
            raise Exception(f"Last Layer {self.current_layer['name']} not closed with 'End")
        self.current_layer = {"name": ctx.name().getText(), "abs_data": None, 
                              "ops": {}, "prims": [], "code": None}

    def visitSection_end(self, ctx:SpecParser.Section_endContext):
        if self.current_layer is not None:
            assert(self.current_layer["name"] == ctx.name().getText())
            self.proj.add_layer(Layer(**self.current_layer))
            self.current_layer = None
        else:
            raise Exception(f"No Layer {ctx.name().getText()} to close")

    def visitStatement(self, ctx: SpecParser.StatementContext):
        if ctx.decl():
            return self.visit(ctx.decl())
        elif ctx.typedef():
            return self.visit(ctx.typedef())
        elif ctx.def_():
            return self.visit(ctx.def_())
        elif ctx.fixpoint():
            return self.visit(ctx.fixpoint())
        elif ctx.inductive_decl():
            return self.visit(ctx.inductive_decl())
        elif ctx.record_decl():
            return self.visit(ctx.record_decl())
        elif ctx.include():
            return self.visit(ctx.include())
        elif ctx.section_begin():
            return self.visit(ctx.section_begin())
        elif ctx.section_end():
            return self.visit(ctx.section_end())
        elif ctx.command():
            return self.visit(ctx.command())

    def visitInclude(self, ctx: SpecParser.IncludeContext):
        path = eval(ctx.path().getText())
        if not os.path.isabs(path):
            path = os.path.join(os.path.dirname(self.path), path)
        parse(self.proj, path)

    def visitCommand(self, ctx: SpecParser.CommandContext):
        self.proj.add_command([n.getText() for n in ctx.name()])
        
    def visitTypedef(self, ctx: SpecParser.TypedefContext):
        name = ctx.name().getText()
        typ = self.visit(ctx.type_())

        if name == "LAYER_DATA":
            self.current_layer["abs_data"] = typ
        else:
            self.proj.add_typedef(name, typ)

        print(f"Parsed Typedef {name}")

    def visitDef(self, ctx: SpecParser.DefContext):
        name = ctx.name().getText()
        expr = self.visit(ctx.expr())
        var_anno = [self.visit(var) for var in ctx.var_anno()]
        rettype = self.visit(ctx.type_())

        if name == "PROJ_NAME" and len(var_anno) == 0 and rettype == String():
            self.proj.set_name(expr.value)
        elif name == "PROJ_BASE" and len(var_anno) == 0 and rettype == String():
            path = expr.value
            if not os.path.isabs(path):
                path = os.path.join(os.path.dirname(self.path), path)
            self.proj.set_base(path)
        elif name == "LAYER_PRIMS" and len(var_anno) == 0 and rettype == List(String()):
            self.current_layer["prims"] = []
            while isinstance(expr, Expr) and expr.op == "::":
                self.current_layer["prims"].append(expr.elems[0].value)
                expr = expr.elems[1]
        elif name == "LAYER_CODE" and len(var_anno) == 0 and rettype == String():
            path = expr.value
            if not os.path.isabs(path):
                path = os.path.join(os.path.dirname(self.path), path)
            self.current_layer["code"] = path
        elif name == "LAYER_DATA_INIT" and len(var_anno) == 0 and rettype == String():
            self.current_layer["ops"]["init"] = expr.value
        elif name == "LAYER_LOAD" and len(var_anno) == 0 and rettype == String():
            self.current_layer["ops"]["load"] = expr.value
        elif name == "LAYER_STORE" and len(var_anno) == 0 and rettype == String():
            self.current_layer["ops"]["store"] = expr.value
        elif name == "LAYER_ALLOC" and len(var_anno) == 0 and rettype == String():
            self.current_layer["ops"]["alloc"] = expr.value
        elif name == "LAYER_FREE" and len(var_anno) == 0 and rettype == String():
            self.current_layer["ops"]["free"] = expr.value
        else:
            if self.current_layer is not None:
                loc = (self.current_layer["name"], "Spec")
            else:
                loc = ("GlobalDefs",)
            self.proj.add_definition(Definition(name, rettype, var_anno, expr), loc)
        print(f"Parsed Definition {name}")

    def visitDecl(self, ctx: SpecParser.DeclContext):
        name = self.visit(ctx.name()).text
        type = self.visit(ctx.type_())
        if self.current_layer is not None:
            loc = (self.current_layer["name"], "Spec")
        else:
            loc = ("GlobalDefs",)
        self.proj.add_declaration(Declaration(name, type), loc)
        print(f"Parsed Declaaration {name}")

    def visitFixpoint(self, ctx: SpecParser.FixpointContext):
        name = self.visit(ctx.name()).text
        expr = self.visit(ctx.expr())
        var_anno = [self.visit(var) for var in ctx.var_anno()]
        rettype = self.visit(ctx.type_())
        if self.current_layer is not None:
            loc = (self.current_layer["name"], "Spec")
        else:
            loc = ("GlobalDefs",)
        self.proj.add_definition(Fixpoint(name, rettype, var_anno, expr), loc)
        print(f"Parsed Fixpoint {name}")

    def visitInductive_decl(self, ctx: SpecParser.Inductive_declContext):
        name = self.visit(ctx.name()).text
        arms = [self.visit(arm) for arm in ctx.induct_arm()]
        self.proj.add_indtype(Inductive(name, arms))
        print(f"Parsed Inductive {name}")

    def visitInduct_arm(self, ctx: SpecParser.Induct_armContext):
        return IndConstr(self.visit(ctx.name()).text, [self.visit(var) for var in ctx.var_anno()])

    def visitRecord_fields(self, ctx:SpecParser.Record_fieldsContext):
        return [Arg(self.visit(name).text, self.visit(type)) for type, name in zip(ctx.type_(), ctx.name())]

    def visitRecord_decl(self, ctx: SpecParser.Record_declContext):
        name = self.visit(ctx.name(0)).text
        fields = self.visit(ctx.record_fields())
        self.proj.add_struct(Struct(name, fields))
        print(f"Parsed Record {name}")

    def visitExpr(self, ctx:SpecParser.ExprContext):
        if ctx.if_stmt():
            return self.visit(ctx.if_stmt())
        elif ctx.when_stmt():
            return self.visit(ctx.when_stmt())
        elif ctx.assert_stmt():
            return self.visit(ctx.assert_stmt())
        elif ctx.match_stmt():
            return self.visit(ctx.match_stmt())
        elif ctx.let_stmt():
            return self.visit(ctx.let_stmt())
        elif ctx.bin_op1():
            return Expr(self.visit(ctx.bin_op1()), [self.visit(ctx.expr(0)), self.visit(ctx.expr(1))])

        elif ctx.bin_op2():
            return Expr(self.visit(ctx.bin_op2()), [self.visit(ctx.expr(0)), self.visit(ctx.expr(1))])
        elif ctx.record_set:
            return Expr("Record.set",[self.visit(ctx.expr(0))] + [self.visit(n) for n in ctx.name()] + [self.visit(ctx.expr(1))])
        elif ctx.record_set2:
            return Expr("Record.set",[self.visit(ctx.expr(0)), self.visit(ctx.name(0)), self.visit(ctx.expr(1))])
        elif ctx.map_get:
            return Expr("ZMap.get", [self.visit(ctx.expr(0)),self.visit(ctx.expr(1))])
        elif ctx.map_set:
            return Expr("ZMap.set", [self.visit(ctx.expr(0)),self.visit(ctx.expr(1)),self.visit(ctx.expr(2))])
        elif ctx.forall_expr():
            return Forall(self.visit(ctx.forall_expr()), self.visit(ctx.expr(0)))
        elif ctx.exists_expr():
            return Exists(self.visit(ctx.exists_expr()), self.visit(ctx.expr(0)))
        elif ctx.bin_op3():
            return Expr(self.visit(ctx.bin_op3()), [self.visit(ctx.expr(0)), self.visit(ctx.expr(1))])
        elif ctx.bin_op4():
            return Expr(self.visit(ctx.bin_op4()), [self.visit(ctx.expr(0)), self.visit(ctx.expr(1))])
        elif ctx.bin_op5():
            return Expr(self.visit(ctx.bin_op5()), [self.visit(ctx.expr(0)), self.visit(ctx.expr(1))])
        elif ctx.expr_op:
            exprs = [self.visit(e) for e in ctx.expr()]
            op = exprs[0]
            exprs = exprs[1:]
            if isinstance(op, Symbol):
                return Expr(op.text, exprs)
            else:
                return Expr(op, exprs)
        elif ctx.uni_op():
            return Expr(self.visit(ctx.uni_op()), [self.visit(ctx.expr(0))])
        elif ctx.record_get:
            return Expr("Record.get",[self.visit(ctx.expr(0)),self.visit(ctx.name(0))])
        elif ctx.tuple_():
            return self.visit((ctx.tuple_()))
        elif ctx.value():
            return self.visit(ctx.value())
        else:
            return self.visit(ctx.par)

    def visitBin_op1(self, ctx:SpecParser.Bin_op1Context):
        return ctx.getText()

    def visitBin_op2(self, ctx:SpecParser.Bin_op2Context):
        return ctx.getText()

    def visitBin_op3(self, ctx:SpecParser.Bin_op3Context):
        return ctx.getText()

    def visitBin_op4(self, ctx:SpecParser.Bin_op4Context):
        return ctx.getText()

    def visitBin_op5(self, ctx:SpecParser.Bin_op5Context):
        return ctx.getText()

    def visitUni_op(self, ctx:SpecParser.Uni_opContext):
        return ctx.getText()

    def visitLet_stmt(self, ctx: SpecParser.Let_stmtContext):
        if ctx.tuple_():
            return Match(self.visit(ctx.expr(0)), [PatternMatch(self.visit(ctx.tuple_()), self.visit(ctx.expr(1)))])
        elif ctx.name():
            return Match(self.visit(ctx.expr(0)), [PatternMatch(self.visit(ctx.name()), self.visit(ctx.expr(1)))])

    def visitMatch_stmt(self, ctx: SpecParser.Match_stmtContext):
        return Match(self.visit(ctx.expr()), [self.visit(branch) for branch in ctx.match_branch()])

    def visitMatch_branch(self, ctx:SpecParser.Match_branchContext):
        return PatternMatch(self.visit(ctx.expr(0)), self.visit(ctx.expr(1)))

    def visitWhen_stmt(self, ctx: SpecParser.When_stmtContext):
        branch1 = PatternMatch(Expr('Some', [self.visit(ctx.name())]), self.visit(ctx.expr(1)))
        branch2 = PatternMatch(Symbol("None"), Symbol("None"))

        return Match(self.visit(ctx.expr(0)), [branch1, branch2])

    def visitAssert_stmt(self, ctx: SpecParser.Assert_stmtContext):
        return Rely(self.visit(ctx.expr(0)), self.visit(ctx.expr(1)))

    def visitFunc_call(self, ctx: SpecParser.Func_callContext):
        return Expr(ctx.name().getText(), [self.visit(e) for e in ctx.expr()])

    def visitForall_expr(self, ctx: SpecParser.Forall_exprContext):
        return [self.visit(var) for var in ctx.var_anno()]

    def visitExists_expr(self, ctx:SpecParser.Exists_exprContext):
        return [self.visit(var) for var in ctx.var_anno()]

    def visitIf_stmt(self, ctx: SpecParser.If_stmtContext):
        return If(self.visit(ctx.expr(0)), self.visit(ctx.expr(1)), self.visit(ctx.expr(2)))

    def visitTuple(self, ctx: SpecParser.TupleContext):
        return Expr("Tuple", [self.visit(expr) for expr in ctx.expr()])

    def visitValue(self, ctx: SpecParser.ValueContext):
        if ctx.string():
            return StringConst(eval(ctx.string().getText()))
        elif ctx.number():
            return IntConst(self.visit(ctx.number()))
        elif ctx.bool_():
            return BoolConst(self.visit(ctx.bool_()))
        elif ctx.name():
            return self.visit(ctx.name())

    def visitNumber(self, ctx:SpecParser.NumberContext):
        return int(ctx.getText())

    def visitBool(self, ctx:SpecParser.BoolContext):
        return ctx.getText()

    def visitName(self, ctx:SpecParser.NameContext):
        return Symbol(ctx.getText())

    def visitVar_anno(self, ctx: SpecParser.Var_annoContext):
        return Arg(self.visit(ctx.name()).text, self.visit(ctx.type_()))

    def visitType(self, ctx : SpecParser.TypeContext):
        if ctx.par:
            return self.visit(ctx.type_(0))
        if ctx.Z_type:
            return Int()
        elif ctx.bool_type:
            return Bool()
        elif ctx.str_type:
            return String()
        elif ctx.type_type:
            return Type()
        elif ctx.prop_type:
            return Prop()
        elif ctx.list_type:
            return List(self.visit(ctx.type_(0)))
        elif ctx.option_type:
            return Option(self.visit(ctx.type_(0)))
        elif ctx.domain:
            domain = self.visit(ctx.type_(0))
            curried_type = self.visit(ctx.type_(1))
            if(isinstance(curried_type, Function)):
                args = list(curried_type.args)
                args.insert(0, domain)
                return Function(curried_type.rettype, args=args)
            else:
                return Function(curried_type,args=[domain])
        elif ctx.tup:
            return Tuple([self.visit(type) for type in ctx.type_()])
        elif ctx.map_type:
            return ZMap(self.visit(ctx.type_(0)))
        elif ctx.name():
            name = ctx.name().getText()
            sym = self.proj.symbols.get(name, {"kind": "", "info": ""})
            if sym["kind"] == "struct":
                return self.proj.structs[name]
            if sym["kind"] == "indtype":
                return self.proj.indtypes[name]
            if sym["kind"] == "typedef":
                return self.proj.typedef[name]
            return SpecType(name)

def parse(proj, path):
    print("Parsing " + path)
    lexer = SpecLexer(FileStream(path))
    stream = CommonTokenStream(lexer)
    parser = SpecParser(stream)
    tree = parser.program()
    ProgramVisitor(proj, path).visitProgram(tree)

if __name__ == '__main__':
    proj = Project()
    parse(proj, "AutoV/Spec/parser/test2.v")
    print(proj.name)
    for s, v in proj.symbols.items():
        print(s, v)
    for c in proj.cmds:
        print(" ".join(c))

    for layer in proj.layers:
        print(layer.name)
        print(layer.abs_data)
        print(layer.prims)
        print(layer.ops)
